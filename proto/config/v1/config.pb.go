// Copyright (C) 2025 Author(s) of MCP-XY
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v6.33.0
// source: proto/config/v1/config.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ParameterType defines the data type of a parameter.
type ParameterType int32

const (
	ParameterType_STRING  ParameterType = 0
	ParameterType_NUMBER  ParameterType = 1
	ParameterType_INTEGER ParameterType = 2
	ParameterType_BOOLEAN ParameterType = 3
	ParameterType_ARRAY   ParameterType = 4
	ParameterType_OBJECT  ParameterType = 5
)

// Enum value maps for ParameterType.
var (
	ParameterType_name = map[int32]string{
		0: "STRING",
		1: "NUMBER",
		2: "INTEGER",
		3: "BOOLEAN",
		4: "ARRAY",
		5: "OBJECT",
	}
	ParameterType_value = map[string]int32{
		"STRING":  0,
		"NUMBER":  1,
		"INTEGER": 2,
		"BOOLEAN": 3,
		"ARRAY":   4,
		"OBJECT":  5,
	}
)

func (x ParameterType) Enum() *ParameterType {
	p := new(ParameterType)
	*p = x
	return p
}

func (x ParameterType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ParameterType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_config_v1_config_proto_enumTypes[0].Descriptor()
}

func (ParameterType) Type() protoreflect.EnumType {
	return &file_proto_config_v1_config_proto_enumTypes[0]
}

func (x ParameterType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Defines strategies for load balancing across multiple service endpoints.
type LoadBalancingStrategy int32

const (
	// Distributes requests sequentially among the available servers.
	LoadBalancingStrategy_ROUND_ROBIN LoadBalancingStrategy = 0
	// Sends the next request to the server that has the fewest active connections.
	LoadBalancingStrategy_LEAST_CONNECTIONS LoadBalancingStrategy = 1
	// Selects a server at random.
	LoadBalancingStrategy_RANDOM LoadBalancingStrategy = 2
)

// Enum value maps for LoadBalancingStrategy.
var (
	LoadBalancingStrategy_name = map[int32]string{
		0: "ROUND_ROBIN",
		1: "LEAST_CONNECTIONS",
		2: "RANDOM",
	}
	LoadBalancingStrategy_value = map[string]int32{
		"ROUND_ROBIN":       0,
		"LEAST_CONNECTIONS": 1,
		"RANDOM":            2,
	}
)

func (x LoadBalancingStrategy) Enum() *LoadBalancingStrategy {
	p := new(LoadBalancingStrategy)
	*p = x
	return p
}

func (x LoadBalancingStrategy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LoadBalancingStrategy) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_config_v1_config_proto_enumTypes[1].Descriptor()
}

func (LoadBalancingStrategy) Type() protoreflect.EnumType {
	return &file_proto_config_v1_config_proto_enumTypes[1]
}

func (x LoadBalancingStrategy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type GlobalSettings_LogLevel int32

const (
	GlobalSettings_INFO  GlobalSettings_LogLevel = 0
	GlobalSettings_WARN  GlobalSettings_LogLevel = 1
	GlobalSettings_ERROR GlobalSettings_LogLevel = 2
	GlobalSettings_DEBUG GlobalSettings_LogLevel = 3
)

// Enum value maps for GlobalSettings_LogLevel.
var (
	GlobalSettings_LogLevel_name = map[int32]string{
		0: "INFO",
		1: "WARN",
		2: "ERROR",
		3: "DEBUG",
	}
	GlobalSettings_LogLevel_value = map[string]int32{
		"INFO":  0,
		"WARN":  1,
		"ERROR": 2,
		"DEBUG": 3,
	}
)

func (x GlobalSettings_LogLevel) Enum() *GlobalSettings_LogLevel {
	p := new(GlobalSettings_LogLevel)
	*p = x
	return p
}

func (x GlobalSettings_LogLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GlobalSettings_LogLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_config_v1_config_proto_enumTypes[2].Descriptor()
}

func (GlobalSettings_LogLevel) Type() protoreflect.EnumType {
	return &file_proto_config_v1_config_proto_enumTypes[2]
}

func (x GlobalSettings_LogLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type HttpCallDefinition_HttpMethod int32

const (
	HttpCallDefinition_HTTP_METHOD_UNSPECIFIED HttpCallDefinition_HttpMethod = 0
	HttpCallDefinition_HTTP_METHOD_GET         HttpCallDefinition_HttpMethod = 1
	HttpCallDefinition_HTTP_METHOD_POST        HttpCallDefinition_HttpMethod = 2
	HttpCallDefinition_HTTP_METHOD_PUT         HttpCallDefinition_HttpMethod = 3
	HttpCallDefinition_HTTP_METHOD_DELETE      HttpCallDefinition_HttpMethod = 4
	HttpCallDefinition_HTTP_METHOD_PATCH       HttpCallDefinition_HttpMethod = 5
)

// Enum value maps for HttpCallDefinition_HttpMethod.
var (
	HttpCallDefinition_HttpMethod_name = map[int32]string{
		0: "HTTP_METHOD_UNSPECIFIED",
		1: "HTTP_METHOD_GET",
		2: "HTTP_METHOD_POST",
		3: "HTTP_METHOD_PUT",
		4: "HTTP_METHOD_DELETE",
		5: "HTTP_METHOD_PATCH",
	}
	HttpCallDefinition_HttpMethod_value = map[string]int32{
		"HTTP_METHOD_UNSPECIFIED": 0,
		"HTTP_METHOD_GET":         1,
		"HTTP_METHOD_POST":        2,
		"HTTP_METHOD_PUT":         3,
		"HTTP_METHOD_DELETE":      4,
		"HTTP_METHOD_PATCH":       5,
	}
)

func (x HttpCallDefinition_HttpMethod) Enum() *HttpCallDefinition_HttpMethod {
	p := new(HttpCallDefinition_HttpMethod)
	*p = x
	return p
}

func (x HttpCallDefinition_HttpMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HttpCallDefinition_HttpMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_config_v1_config_proto_enumTypes[3].Descriptor()
}

func (HttpCallDefinition_HttpMethod) Type() protoreflect.EnumType {
	return &file_proto_config_v1_config_proto_enumTypes[3]
}

func (x HttpCallDefinition_HttpMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type OutputTransformer_OutputFormat int32

const (
	OutputTransformer_JSON OutputTransformer_OutputFormat = 0 // The output is JSON, which will be parsed using JSONPath expressions.
	OutputTransformer_XML  OutputTransformer_OutputFormat = 1 // The output is XML, which will be parsed using XPath expressions.
	OutputTransformer_TEXT OutputTransformer_OutputFormat = 2 // The output is plain text, which will be parsed using regex.
)

// Enum value maps for OutputTransformer_OutputFormat.
var (
	OutputTransformer_OutputFormat_name = map[int32]string{
		0: "JSON",
		1: "XML",
		2: "TEXT",
	}
	OutputTransformer_OutputFormat_value = map[string]int32{
		"JSON": 0,
		"XML":  1,
		"TEXT": 2,
	}
)

func (x OutputTransformer_OutputFormat) Enum() *OutputTransformer_OutputFormat {
	p := new(OutputTransformer_OutputFormat)
	*p = x
	return p
}

func (x OutputTransformer_OutputFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OutputTransformer_OutputFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_config_v1_config_proto_enumTypes[4].Descriptor()
}

func (OutputTransformer_OutputFormat) Type() protoreflect.EnumType {
	return &file_proto_config_v1_config_proto_enumTypes[4]
}

func (x OutputTransformer_OutputFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Where the API key is located.
type APIKeyAuth_Location int32

const (
	APIKeyAuth_HEADER APIKeyAuth_Location = 0
	APIKeyAuth_QUERY  APIKeyAuth_Location = 1
)

// Enum value maps for APIKeyAuth_Location.
var (
	APIKeyAuth_Location_name = map[int32]string{
		0: "HEADER",
		1: "QUERY",
	}
	APIKeyAuth_Location_value = map[string]int32{
		"HEADER": 0,
		"QUERY":  1,
	}
)

func (x APIKeyAuth_Location) Enum() *APIKeyAuth_Location {
	p := new(APIKeyAuth_Location)
	*p = x
	return p
}

func (x APIKeyAuth_Location) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (APIKeyAuth_Location) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_config_v1_config_proto_enumTypes[5].Descriptor()
}

func (APIKeyAuth_Location) Type() protoreflect.EnumType {
	return &file_proto_config_v1_config_proto_enumTypes[5]
}

func (x APIKeyAuth_Location) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// McpxServerConfig is the root configuration for the entire MCPXY server.
type McpxServerConfig struct {
	state                       protoimpl.MessageState    `protogen:"opaque.v1"`
	xxx_hidden_GlobalSettings   *GlobalSettings           `protobuf:"bytes,1,opt,name=global_settings,json=globalSettings"`
	xxx_hidden_UpstreamServices *[]*UpstreamServiceConfig `protobuf:"bytes,2,rep,name=upstream_services,json=upstreamServices"`
	xxx_hidden_FrontendServices *[]*FrontendService       `protobuf:"bytes,3,rep,name=frontend_services,json=frontendServices"`
	xxx_hidden_ServiceBindings  *[]*ServiceBinding        `protobuf:"bytes,4,rep,name=service_bindings,json=serviceBindings"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *McpxServerConfig) Reset() {
	*x = McpxServerConfig{}
	mi := &file_proto_config_v1_config_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *McpxServerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*McpxServerConfig) ProtoMessage() {}

func (x *McpxServerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_config_v1_config_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *McpxServerConfig) GetGlobalSettings() *GlobalSettings {
	if x != nil {
		return x.xxx_hidden_GlobalSettings
	}
	return nil
}

func (x *McpxServerConfig) GetUpstreamServices() []*UpstreamServiceConfig {
	if x != nil {
		if x.xxx_hidden_UpstreamServices != nil {
			return *x.xxx_hidden_UpstreamServices
		}
	}
	return nil
}

func (x *McpxServerConfig) GetFrontendServices() []*FrontendService {
	if x != nil {
		if x.xxx_hidden_FrontendServices != nil {
			return *x.xxx_hidden_FrontendServices
		}
	}
	return nil
}

func (x *McpxServerConfig) GetServiceBindings() []*ServiceBinding {
	if x != nil {
		if x.xxx_hidden_ServiceBindings != nil {
			return *x.xxx_hidden_ServiceBindings
		}
	}
	return nil
}

func (x *McpxServerConfig) SetGlobalSettings(v *GlobalSettings) {
	x.xxx_hidden_GlobalSettings = v
}

func (x *McpxServerConfig) SetUpstreamServices(v []*UpstreamServiceConfig) {
	x.xxx_hidden_UpstreamServices = &v
}

func (x *McpxServerConfig) SetFrontendServices(v []*FrontendService) {
	x.xxx_hidden_FrontendServices = &v
}

func (x *McpxServerConfig) SetServiceBindings(v []*ServiceBinding) {
	x.xxx_hidden_ServiceBindings = &v
}

func (x *McpxServerConfig) HasGlobalSettings() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_GlobalSettings != nil
}

func (x *McpxServerConfig) ClearGlobalSettings() {
	x.xxx_hidden_GlobalSettings = nil
}

type McpxServerConfig_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Server-wide operational parameters.
	GlobalSettings *GlobalSettings
	// A list of all configured upstream services that mcpx can proxy to.
	UpstreamServices []*UpstreamServiceConfig
	// A list of all defined public-facing frontend services.
	FrontendServices []*FrontendService
	// A list of bindings that link a frontend service to a specific upstream service.
	ServiceBindings []*ServiceBinding
}

func (b0 McpxServerConfig_builder) Build() *McpxServerConfig {
	m0 := &McpxServerConfig{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_GlobalSettings = b.GlobalSettings
	x.xxx_hidden_UpstreamServices = &b.UpstreamServices
	x.xxx_hidden_FrontendServices = &b.FrontendServices
	x.xxx_hidden_ServiceBindings = &b.ServiceBindings
	return m0
}

// GlobalSettings contains server-wide operational parameters.
type GlobalSettings struct {
	state                    protoimpl.MessageState  `protogen:"opaque.v1"`
	xxx_hidden_BindAddress   *string                 `protobuf:"bytes,1,opt,name=bind_address,json=bindAddress"`
	xxx_hidden_McpBasepath   *string                 `protobuf:"bytes,2,opt,name=mcp_basepath,json=mcpBasepath"`
	xxx_hidden_LogLevel      GlobalSettings_LogLevel `protobuf:"varint,3,opt,name=log_level,json=logLevel,enum=mcpx.config.v1.GlobalSettings_LogLevel"`
	xxx_hidden_ProtocVersion *string                 `protobuf:"bytes,4,opt,name=protoc_version,json=protocVersion"`
	XXX_raceDetectHookData   protoimpl.RaceDetectHookData
	XXX_presence             [1]uint32
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *GlobalSettings) Reset() {
	*x = GlobalSettings{}
	mi := &file_proto_config_v1_config_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GlobalSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalSettings) ProtoMessage() {}

func (x *GlobalSettings) ProtoReflect() protoreflect.Message {
	mi := &file_proto_config_v1_config_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *GlobalSettings) GetBindAddress() string {
	if x != nil {
		if x.xxx_hidden_BindAddress != nil {
			return *x.xxx_hidden_BindAddress
		}
		return ""
	}
	return ""
}

func (x *GlobalSettings) GetMcpBasepath() string {
	if x != nil {
		if x.xxx_hidden_McpBasepath != nil {
			return *x.xxx_hidden_McpBasepath
		}
		return ""
	}
	return ""
}

func (x *GlobalSettings) GetLogLevel() GlobalSettings_LogLevel {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 2) {
			return x.xxx_hidden_LogLevel
		}
	}
	return GlobalSettings_INFO
}

func (x *GlobalSettings) GetProtocVersion() string {
	if x != nil {
		if x.xxx_hidden_ProtocVersion != nil {
			return *x.xxx_hidden_ProtocVersion
		}
		return ""
	}
	return ""
}

func (x *GlobalSettings) SetBindAddress(v string) {
	x.xxx_hidden_BindAddress = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 4)
}

func (x *GlobalSettings) SetMcpBasepath(v string) {
	x.xxx_hidden_McpBasepath = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 4)
}

func (x *GlobalSettings) SetLogLevel(v GlobalSettings_LogLevel) {
	x.xxx_hidden_LogLevel = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 4)
}

func (x *GlobalSettings) SetProtocVersion(v string) {
	x.xxx_hidden_ProtocVersion = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 4)
}

func (x *GlobalSettings) HasBindAddress() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *GlobalSettings) HasMcpBasepath() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *GlobalSettings) HasLogLevel() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *GlobalSettings) HasProtocVersion() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *GlobalSettings) ClearBindAddress() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_BindAddress = nil
}

func (x *GlobalSettings) ClearMcpBasepath() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_McpBasepath = nil
}

func (x *GlobalSettings) ClearLogLevel() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_LogLevel = GlobalSettings_INFO
}

func (x *GlobalSettings) ClearProtocVersion() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_ProtocVersion = nil
}

type GlobalSettings_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The address and port the server should bind to (e.g., "0.0.0.0:8080").
	BindAddress *string
	// The base path for all MCP API endpoints (e.g., "/mcp/v1").
	McpBasepath *string
	// The logging level for the server.
	LogLevel *GlobalSettings_LogLevel
	// The version of protoc to use.
	ProtocVersion *string
}

func (b0 GlobalSettings_builder) Build() *GlobalSettings {
	m0 := &GlobalSettings{}
	b, x := &b0, m0
	_, _ = b, x
	if b.BindAddress != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 4)
		x.xxx_hidden_BindAddress = b.BindAddress
	}
	if b.McpBasepath != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 4)
		x.xxx_hidden_McpBasepath = b.McpBasepath
	}
	if b.LogLevel != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 4)
		x.xxx_hidden_LogLevel = *b.LogLevel
	}
	if b.ProtocVersion != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 4)
		x.xxx_hidden_ProtocVersion = b.ProtocVersion
	}
	return m0
}

// FrontendService defines the public-facing identity of a service.
type FrontendService struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Id          *string                `protobuf:"bytes,1,opt,name=id"`
	xxx_hidden_Name        *string                `protobuf:"bytes,2,opt,name=name"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *FrontendService) Reset() {
	*x = FrontendService{}
	mi := &file_proto_config_v1_config_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FrontendService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrontendService) ProtoMessage() {}

func (x *FrontendService) ProtoReflect() protoreflect.Message {
	mi := &file_proto_config_v1_config_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *FrontendService) GetId() string {
	if x != nil {
		if x.xxx_hidden_Id != nil {
			return *x.xxx_hidden_Id
		}
		return ""
	}
	return ""
}

func (x *FrontendService) GetName() string {
	if x != nil {
		if x.xxx_hidden_Name != nil {
			return *x.xxx_hidden_Name
		}
		return ""
	}
	return ""
}

func (x *FrontendService) SetId(v string) {
	x.xxx_hidden_Id = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 2)
}

func (x *FrontendService) SetName(v string) {
	x.xxx_hidden_Name = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 2)
}

func (x *FrontendService) HasId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *FrontendService) HasName() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *FrontendService) ClearId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Id = nil
}

func (x *FrontendService) ClearName() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Name = nil
}

type FrontendService_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// A UUID to uniquely identify this frontend service.
	Id *string
	// A human-readable name for the service (e.g., "user-api").
	Name *string
}

func (b0 FrontendService_builder) Build() *FrontendService {
	m0 := &FrontendService{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Id != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 2)
		x.xxx_hidden_Id = b.Id
	}
	if b.Name != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 2)
		x.xxx_hidden_Name = b.Name
	}
	return m0
}

// ServiceBinding links a FrontendService to an UpstreamServiceConfig using their IDs.
type ServiceBinding struct {
	state                        protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_FrontendServiceId *string                `protobuf:"bytes,1,opt,name=frontend_service_id,json=frontendServiceId"`
	xxx_hidden_UpstreamServiceId *string                `protobuf:"bytes,2,opt,name=upstream_service_id,json=upstreamServiceId"`
	XXX_raceDetectHookData       protoimpl.RaceDetectHookData
	XXX_presence                 [1]uint32
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

func (x *ServiceBinding) Reset() {
	*x = ServiceBinding{}
	mi := &file_proto_config_v1_config_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceBinding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceBinding) ProtoMessage() {}

func (x *ServiceBinding) ProtoReflect() protoreflect.Message {
	mi := &file_proto_config_v1_config_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ServiceBinding) GetFrontendServiceId() string {
	if x != nil {
		if x.xxx_hidden_FrontendServiceId != nil {
			return *x.xxx_hidden_FrontendServiceId
		}
		return ""
	}
	return ""
}

func (x *ServiceBinding) GetUpstreamServiceId() string {
	if x != nil {
		if x.xxx_hidden_UpstreamServiceId != nil {
			return *x.xxx_hidden_UpstreamServiceId
		}
		return ""
	}
	return ""
}

func (x *ServiceBinding) SetFrontendServiceId(v string) {
	x.xxx_hidden_FrontendServiceId = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 2)
}

func (x *ServiceBinding) SetUpstreamServiceId(v string) {
	x.xxx_hidden_UpstreamServiceId = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 2)
}

func (x *ServiceBinding) HasFrontendServiceId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *ServiceBinding) HasUpstreamServiceId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *ServiceBinding) ClearFrontendServiceId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_FrontendServiceId = nil
}

func (x *ServiceBinding) ClearUpstreamServiceId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_UpstreamServiceId = nil
}

type ServiceBinding_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The ID of the FrontendService to bind.
	FrontendServiceId *string
	// The ID of the UpstreamServiceConfig to bind.
	UpstreamServiceId *string
}

func (b0 ServiceBinding_builder) Build() *ServiceBinding {
	m0 := &ServiceBinding{}
	b, x := &b0, m0
	_, _ = b, x
	if b.FrontendServiceId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 2)
		x.xxx_hidden_FrontendServiceId = b.FrontendServiceId
	}
	if b.UpstreamServiceId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 2)
		x.xxx_hidden_UpstreamServiceId = b.UpstreamServiceId
	}
	return m0
}

// UpstreamServiceConfig is the top-level configuration for a single upstream service
// that mcpx will proxy. It defines the service's identity, how to connect to it,
// and policies like authentication, caching, rate limiting, and load balancing.
type UpstreamServiceConfig struct {
	state                             protoimpl.MessageState                `protogen:"opaque.v1"`
	xxx_hidden_Id                     *string                               `protobuf:"bytes,1,opt,name=id"`
	xxx_hidden_Name                   *string                               `protobuf:"bytes,2,opt,name=name"`
	xxx_hidden_ConnectionPool         *ConnectionPoolConfig                 `protobuf:"bytes,3,opt,name=connection_pool,json=connectionPool"`
	xxx_hidden_UpstreamAuthentication *UpstreamAuthentication               `protobuf:"bytes,4,opt,name=upstream_authentication,json=upstreamAuthentication"`
	xxx_hidden_Cache                  *CacheConfig                          `protobuf:"bytes,5,opt,name=cache"`
	xxx_hidden_RateLimit              *RateLimitConfig                      `protobuf:"bytes,6,opt,name=rate_limit,json=rateLimit"`
	xxx_hidden_LoadBalancingStrategy  LoadBalancingStrategy                 `protobuf:"varint,7,opt,name=load_balancing_strategy,json=loadBalancingStrategy,enum=mcpx.config.v1.LoadBalancingStrategy"`
	xxx_hidden_Resilience             *ResilienceConfig                     `protobuf:"bytes,8,opt,name=resilience"`
	xxx_hidden_ServiceConfig          isUpstreamServiceConfig_ServiceConfig `protobuf_oneof:"service_config"`
	xxx_hidden_Version                *string                               `protobuf:"bytes,14,opt,name=version"`
	xxx_hidden_Authentication         *AuthenticationConfig                 `protobuf:"bytes,15,opt,name=authentication"`
	XXX_raceDetectHookData            protoimpl.RaceDetectHookData
	XXX_presence                      [1]uint32
	unknownFields                     protoimpl.UnknownFields
	sizeCache                         protoimpl.SizeCache
}

func (x *UpstreamServiceConfig) Reset() {
	*x = UpstreamServiceConfig{}
	mi := &file_proto_config_v1_config_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpstreamServiceConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpstreamServiceConfig) ProtoMessage() {}

func (x *UpstreamServiceConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_config_v1_config_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *UpstreamServiceConfig) GetId() string {
	if x != nil {
		if x.xxx_hidden_Id != nil {
			return *x.xxx_hidden_Id
		}
		return ""
	}
	return ""
}

func (x *UpstreamServiceConfig) GetName() string {
	if x != nil {
		if x.xxx_hidden_Name != nil {
			return *x.xxx_hidden_Name
		}
		return ""
	}
	return ""
}

func (x *UpstreamServiceConfig) GetConnectionPool() *ConnectionPoolConfig {
	if x != nil {
		return x.xxx_hidden_ConnectionPool
	}
	return nil
}

func (x *UpstreamServiceConfig) GetUpstreamAuthentication() *UpstreamAuthentication {
	if x != nil {
		return x.xxx_hidden_UpstreamAuthentication
	}
	return nil
}

func (x *UpstreamServiceConfig) GetCache() *CacheConfig {
	if x != nil {
		return x.xxx_hidden_Cache
	}
	return nil
}

func (x *UpstreamServiceConfig) GetRateLimit() *RateLimitConfig {
	if x != nil {
		return x.xxx_hidden_RateLimit
	}
	return nil
}

func (x *UpstreamServiceConfig) GetLoadBalancingStrategy() LoadBalancingStrategy {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 6) {
			return x.xxx_hidden_LoadBalancingStrategy
		}
	}
	return LoadBalancingStrategy_ROUND_ROBIN
}

func (x *UpstreamServiceConfig) GetResilience() *ResilienceConfig {
	if x != nil {
		return x.xxx_hidden_Resilience
	}
	return nil
}

func (x *UpstreamServiceConfig) GetMcpService() *McpUpstreamService {
	if x != nil {
		if x, ok := x.xxx_hidden_ServiceConfig.(*upstreamServiceConfig_McpService); ok {
			return x.McpService
		}
	}
	return nil
}

func (x *UpstreamServiceConfig) GetHttpService() *HttpUpstreamService {
	if x != nil {
		if x, ok := x.xxx_hidden_ServiceConfig.(*upstreamServiceConfig_HttpService); ok {
			return x.HttpService
		}
	}
	return nil
}

func (x *UpstreamServiceConfig) GetGrpcService() *GrpcUpstreamService {
	if x != nil {
		if x, ok := x.xxx_hidden_ServiceConfig.(*upstreamServiceConfig_GrpcService); ok {
			return x.GrpcService
		}
	}
	return nil
}

func (x *UpstreamServiceConfig) GetOpenapiService() *OpenapiUpstreamService {
	if x != nil {
		if x, ok := x.xxx_hidden_ServiceConfig.(*upstreamServiceConfig_OpenapiService); ok {
			return x.OpenapiService
		}
	}
	return nil
}

func (x *UpstreamServiceConfig) GetCommandLineService() *CommandLineUpstreamService {
	if x != nil {
		if x, ok := x.xxx_hidden_ServiceConfig.(*upstreamServiceConfig_CommandLineService); ok {
			return x.CommandLineService
		}
	}
	return nil
}

func (x *UpstreamServiceConfig) GetWebsocketService() *WebsocketUpstreamService {
	if x != nil {
		if x, ok := x.xxx_hidden_ServiceConfig.(*upstreamServiceConfig_WebsocketService); ok {
			return x.WebsocketService
		}
	}
	return nil
}

func (x *UpstreamServiceConfig) GetWebrtcService() *WebrtcUpstreamService {
	if x != nil {
		if x, ok := x.xxx_hidden_ServiceConfig.(*upstreamServiceConfig_WebrtcService); ok {
			return x.WebrtcService
		}
	}
	return nil
}

func (x *UpstreamServiceConfig) GetVersion() string {
	if x != nil {
		if x.xxx_hidden_Version != nil {
			return *x.xxx_hidden_Version
		}
		return ""
	}
	return ""
}

func (x *UpstreamServiceConfig) GetAuthentication() *AuthenticationConfig {
	if x != nil {
		return x.xxx_hidden_Authentication
	}
	return nil
}

func (x *UpstreamServiceConfig) SetId(v string) {
	x.xxx_hidden_Id = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 11)
}

func (x *UpstreamServiceConfig) SetName(v string) {
	x.xxx_hidden_Name = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 11)
}

func (x *UpstreamServiceConfig) SetConnectionPool(v *ConnectionPoolConfig) {
	x.xxx_hidden_ConnectionPool = v
}

func (x *UpstreamServiceConfig) SetUpstreamAuthentication(v *UpstreamAuthentication) {
	x.xxx_hidden_UpstreamAuthentication = v
}

func (x *UpstreamServiceConfig) SetCache(v *CacheConfig) {
	x.xxx_hidden_Cache = v
}

func (x *UpstreamServiceConfig) SetRateLimit(v *RateLimitConfig) {
	x.xxx_hidden_RateLimit = v
}

func (x *UpstreamServiceConfig) SetLoadBalancingStrategy(v LoadBalancingStrategy) {
	x.xxx_hidden_LoadBalancingStrategy = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 6, 11)
}

func (x *UpstreamServiceConfig) SetResilience(v *ResilienceConfig) {
	x.xxx_hidden_Resilience = v
}

func (x *UpstreamServiceConfig) SetMcpService(v *McpUpstreamService) {
	if v == nil {
		x.xxx_hidden_ServiceConfig = nil
		return
	}
	x.xxx_hidden_ServiceConfig = &upstreamServiceConfig_McpService{v}
}

func (x *UpstreamServiceConfig) SetHttpService(v *HttpUpstreamService) {
	if v == nil {
		x.xxx_hidden_ServiceConfig = nil
		return
	}
	x.xxx_hidden_ServiceConfig = &upstreamServiceConfig_HttpService{v}
}

func (x *UpstreamServiceConfig) SetGrpcService(v *GrpcUpstreamService) {
	if v == nil {
		x.xxx_hidden_ServiceConfig = nil
		return
	}
	x.xxx_hidden_ServiceConfig = &upstreamServiceConfig_GrpcService{v}
}

func (x *UpstreamServiceConfig) SetOpenapiService(v *OpenapiUpstreamService) {
	if v == nil {
		x.xxx_hidden_ServiceConfig = nil
		return
	}
	x.xxx_hidden_ServiceConfig = &upstreamServiceConfig_OpenapiService{v}
}

func (x *UpstreamServiceConfig) SetCommandLineService(v *CommandLineUpstreamService) {
	if v == nil {
		x.xxx_hidden_ServiceConfig = nil
		return
	}
	x.xxx_hidden_ServiceConfig = &upstreamServiceConfig_CommandLineService{v}
}

func (x *UpstreamServiceConfig) SetWebsocketService(v *WebsocketUpstreamService) {
	if v == nil {
		x.xxx_hidden_ServiceConfig = nil
		return
	}
	x.xxx_hidden_ServiceConfig = &upstreamServiceConfig_WebsocketService{v}
}

func (x *UpstreamServiceConfig) SetWebrtcService(v *WebrtcUpstreamService) {
	if v == nil {
		x.xxx_hidden_ServiceConfig = nil
		return
	}
	x.xxx_hidden_ServiceConfig = &upstreamServiceConfig_WebrtcService{v}
}

func (x *UpstreamServiceConfig) SetVersion(v string) {
	x.xxx_hidden_Version = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 9, 11)
}

func (x *UpstreamServiceConfig) SetAuthentication(v *AuthenticationConfig) {
	x.xxx_hidden_Authentication = v
}

func (x *UpstreamServiceConfig) HasId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *UpstreamServiceConfig) HasName() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *UpstreamServiceConfig) HasConnectionPool() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_ConnectionPool != nil
}

func (x *UpstreamServiceConfig) HasUpstreamAuthentication() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_UpstreamAuthentication != nil
}

func (x *UpstreamServiceConfig) HasCache() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Cache != nil
}

func (x *UpstreamServiceConfig) HasRateLimit() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_RateLimit != nil
}

func (x *UpstreamServiceConfig) HasLoadBalancingStrategy() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 6)
}

func (x *UpstreamServiceConfig) HasResilience() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Resilience != nil
}

func (x *UpstreamServiceConfig) HasServiceConfig() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_ServiceConfig != nil
}

func (x *UpstreamServiceConfig) HasMcpService() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_ServiceConfig.(*upstreamServiceConfig_McpService)
	return ok
}

func (x *UpstreamServiceConfig) HasHttpService() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_ServiceConfig.(*upstreamServiceConfig_HttpService)
	return ok
}

func (x *UpstreamServiceConfig) HasGrpcService() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_ServiceConfig.(*upstreamServiceConfig_GrpcService)
	return ok
}

func (x *UpstreamServiceConfig) HasOpenapiService() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_ServiceConfig.(*upstreamServiceConfig_OpenapiService)
	return ok
}

func (x *UpstreamServiceConfig) HasCommandLineService() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_ServiceConfig.(*upstreamServiceConfig_CommandLineService)
	return ok
}

func (x *UpstreamServiceConfig) HasWebsocketService() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_ServiceConfig.(*upstreamServiceConfig_WebsocketService)
	return ok
}

func (x *UpstreamServiceConfig) HasWebrtcService() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_ServiceConfig.(*upstreamServiceConfig_WebrtcService)
	return ok
}

func (x *UpstreamServiceConfig) HasVersion() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 9)
}

func (x *UpstreamServiceConfig) HasAuthentication() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Authentication != nil
}

func (x *UpstreamServiceConfig) ClearId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Id = nil
}

func (x *UpstreamServiceConfig) ClearName() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Name = nil
}

func (x *UpstreamServiceConfig) ClearConnectionPool() {
	x.xxx_hidden_ConnectionPool = nil
}

func (x *UpstreamServiceConfig) ClearUpstreamAuthentication() {
	x.xxx_hidden_UpstreamAuthentication = nil
}

func (x *UpstreamServiceConfig) ClearCache() {
	x.xxx_hidden_Cache = nil
}

func (x *UpstreamServiceConfig) ClearRateLimit() {
	x.xxx_hidden_RateLimit = nil
}

func (x *UpstreamServiceConfig) ClearLoadBalancingStrategy() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 6)
	x.xxx_hidden_LoadBalancingStrategy = LoadBalancingStrategy_ROUND_ROBIN
}

func (x *UpstreamServiceConfig) ClearResilience() {
	x.xxx_hidden_Resilience = nil
}

func (x *UpstreamServiceConfig) ClearServiceConfig() {
	x.xxx_hidden_ServiceConfig = nil
}

func (x *UpstreamServiceConfig) ClearMcpService() {
	if _, ok := x.xxx_hidden_ServiceConfig.(*upstreamServiceConfig_McpService); ok {
		x.xxx_hidden_ServiceConfig = nil
	}
}

func (x *UpstreamServiceConfig) ClearHttpService() {
	if _, ok := x.xxx_hidden_ServiceConfig.(*upstreamServiceConfig_HttpService); ok {
		x.xxx_hidden_ServiceConfig = nil
	}
}

func (x *UpstreamServiceConfig) ClearGrpcService() {
	if _, ok := x.xxx_hidden_ServiceConfig.(*upstreamServiceConfig_GrpcService); ok {
		x.xxx_hidden_ServiceConfig = nil
	}
}

func (x *UpstreamServiceConfig) ClearOpenapiService() {
	if _, ok := x.xxx_hidden_ServiceConfig.(*upstreamServiceConfig_OpenapiService); ok {
		x.xxx_hidden_ServiceConfig = nil
	}
}

func (x *UpstreamServiceConfig) ClearCommandLineService() {
	if _, ok := x.xxx_hidden_ServiceConfig.(*upstreamServiceConfig_CommandLineService); ok {
		x.xxx_hidden_ServiceConfig = nil
	}
}

func (x *UpstreamServiceConfig) ClearWebsocketService() {
	if _, ok := x.xxx_hidden_ServiceConfig.(*upstreamServiceConfig_WebsocketService); ok {
		x.xxx_hidden_ServiceConfig = nil
	}
}

func (x *UpstreamServiceConfig) ClearWebrtcService() {
	if _, ok := x.xxx_hidden_ServiceConfig.(*upstreamServiceConfig_WebrtcService); ok {
		x.xxx_hidden_ServiceConfig = nil
	}
}

func (x *UpstreamServiceConfig) ClearVersion() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 9)
	x.xxx_hidden_Version = nil
}

func (x *UpstreamServiceConfig) ClearAuthentication() {
	x.xxx_hidden_Authentication = nil
}

const UpstreamServiceConfig_ServiceConfig_not_set_case case_UpstreamServiceConfig_ServiceConfig = 0
const UpstreamServiceConfig_McpService_case case_UpstreamServiceConfig_ServiceConfig = 9
const UpstreamServiceConfig_HttpService_case case_UpstreamServiceConfig_ServiceConfig = 10
const UpstreamServiceConfig_GrpcService_case case_UpstreamServiceConfig_ServiceConfig = 11
const UpstreamServiceConfig_OpenapiService_case case_UpstreamServiceConfig_ServiceConfig = 12
const UpstreamServiceConfig_CommandLineService_case case_UpstreamServiceConfig_ServiceConfig = 13
const UpstreamServiceConfig_WebsocketService_case case_UpstreamServiceConfig_ServiceConfig = 16
const UpstreamServiceConfig_WebrtcService_case case_UpstreamServiceConfig_ServiceConfig = 17

func (x *UpstreamServiceConfig) WhichServiceConfig() case_UpstreamServiceConfig_ServiceConfig {
	if x == nil {
		return UpstreamServiceConfig_ServiceConfig_not_set_case
	}
	switch x.xxx_hidden_ServiceConfig.(type) {
	case *upstreamServiceConfig_McpService:
		return UpstreamServiceConfig_McpService_case
	case *upstreamServiceConfig_HttpService:
		return UpstreamServiceConfig_HttpService_case
	case *upstreamServiceConfig_GrpcService:
		return UpstreamServiceConfig_GrpcService_case
	case *upstreamServiceConfig_OpenapiService:
		return UpstreamServiceConfig_OpenapiService_case
	case *upstreamServiceConfig_CommandLineService:
		return UpstreamServiceConfig_CommandLineService_case
	case *upstreamServiceConfig_WebsocketService:
		return UpstreamServiceConfig_WebsocketService_case
	case *upstreamServiceConfig_WebrtcService:
		return UpstreamServiceConfig_WebrtcService_case
	default:
		return UpstreamServiceConfig_ServiceConfig_not_set_case
	}
}

type UpstreamServiceConfig_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// A UUID to uniquely identify this upstream service configuration, used for bindings.
	Id *string
	// A unique name for the upstream service. Used for identification, logging, and metrics.
	Name *string
	// Configuration for the pool of connections to the upstream service.
	ConnectionPool *ConnectionPoolConfig
	// Authentication configuration for mcpx to use when connecting to the upstream service.
	UpstreamAuthentication *UpstreamAuthentication
	// Caching configuration to improve performance and reduce load on the upstream.
	Cache *CacheConfig
	// Rate limiting to protect the upstream service from being overwhelmed.
	RateLimit *RateLimitConfig
	// Strategy for distributing requests among multiple instances of the service.
	LoadBalancingStrategy *LoadBalancingStrategy
	// Advanced resiliency features to handle failures gracefully.
	Resilience *ResilienceConfig
	// The specific configuration for the type of upstream service.

	// Fields of oneof xxx_hidden_ServiceConfig:
	McpService         *McpUpstreamService
	HttpService        *HttpUpstreamService
	GrpcService        *GrpcUpstreamService
	OpenapiService     *OpenapiUpstreamService
	CommandLineService *CommandLineUpstreamService
	WebsocketService   *WebsocketUpstreamService
	WebrtcService      *WebrtcUpstreamService
	// -- end of xxx_hidden_ServiceConfig
	// The version of the upstream service, if known (e.g., "v1.2.3").
	Version *string
	// Authentication configuration for securing access to the MCPx service (incoming requests).
	Authentication *AuthenticationConfig
}

func (b0 UpstreamServiceConfig_builder) Build() *UpstreamServiceConfig {
	m0 := &UpstreamServiceConfig{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Id != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 11)
		x.xxx_hidden_Id = b.Id
	}
	if b.Name != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 11)
		x.xxx_hidden_Name = b.Name
	}
	x.xxx_hidden_ConnectionPool = b.ConnectionPool
	x.xxx_hidden_UpstreamAuthentication = b.UpstreamAuthentication
	x.xxx_hidden_Cache = b.Cache
	x.xxx_hidden_RateLimit = b.RateLimit
	if b.LoadBalancingStrategy != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 6, 11)
		x.xxx_hidden_LoadBalancingStrategy = *b.LoadBalancingStrategy
	}
	x.xxx_hidden_Resilience = b.Resilience
	if b.McpService != nil {
		x.xxx_hidden_ServiceConfig = &upstreamServiceConfig_McpService{b.McpService}
	}
	if b.HttpService != nil {
		x.xxx_hidden_ServiceConfig = &upstreamServiceConfig_HttpService{b.HttpService}
	}
	if b.GrpcService != nil {
		x.xxx_hidden_ServiceConfig = &upstreamServiceConfig_GrpcService{b.GrpcService}
	}
	if b.OpenapiService != nil {
		x.xxx_hidden_ServiceConfig = &upstreamServiceConfig_OpenapiService{b.OpenapiService}
	}
	if b.CommandLineService != nil {
		x.xxx_hidden_ServiceConfig = &upstreamServiceConfig_CommandLineService{b.CommandLineService}
	}
	if b.WebsocketService != nil {
		x.xxx_hidden_ServiceConfig = &upstreamServiceConfig_WebsocketService{b.WebsocketService}
	}
	if b.WebrtcService != nil {
		x.xxx_hidden_ServiceConfig = &upstreamServiceConfig_WebrtcService{b.WebrtcService}
	}
	if b.Version != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 9, 11)
		x.xxx_hidden_Version = b.Version
	}
	x.xxx_hidden_Authentication = b.Authentication
	return m0
}

type case_UpstreamServiceConfig_ServiceConfig protoreflect.FieldNumber

func (x case_UpstreamServiceConfig_ServiceConfig) String() string {
	md := file_proto_config_v1_config_proto_msgTypes[4].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isUpstreamServiceConfig_ServiceConfig interface {
	isUpstreamServiceConfig_ServiceConfig()
}

type upstreamServiceConfig_McpService struct {
	McpService *McpUpstreamService `protobuf:"bytes,9,opt,name=mcp_service,json=mcpService,oneof"`
}

type upstreamServiceConfig_HttpService struct {
	HttpService *HttpUpstreamService `protobuf:"bytes,10,opt,name=http_service,json=httpService,oneof"`
}

type upstreamServiceConfig_GrpcService struct {
	GrpcService *GrpcUpstreamService `protobuf:"bytes,11,opt,name=grpc_service,json=grpcService,oneof"`
}

type upstreamServiceConfig_OpenapiService struct {
	OpenapiService *OpenapiUpstreamService `protobuf:"bytes,12,opt,name=openapi_service,json=openapiService,oneof"`
}

type upstreamServiceConfig_CommandLineService struct {
	CommandLineService *CommandLineUpstreamService `protobuf:"bytes,13,opt,name=command_line_service,json=commandLineService,oneof"`
}

type upstreamServiceConfig_WebsocketService struct {
	WebsocketService *WebsocketUpstreamService `protobuf:"bytes,16,opt,name=websocket_service,json=websocketService,oneof"`
}

type upstreamServiceConfig_WebrtcService struct {
	WebrtcService *WebrtcUpstreamService `protobuf:"bytes,17,opt,name=webrtc_service,json=webrtcService,oneof"`
}

func (*upstreamServiceConfig_McpService) isUpstreamServiceConfig_ServiceConfig() {}

func (*upstreamServiceConfig_HttpService) isUpstreamServiceConfig_ServiceConfig() {}

func (*upstreamServiceConfig_GrpcService) isUpstreamServiceConfig_ServiceConfig() {}

func (*upstreamServiceConfig_OpenapiService) isUpstreamServiceConfig_ServiceConfig() {}

func (*upstreamServiceConfig_CommandLineService) isUpstreamServiceConfig_ServiceConfig() {}

func (*upstreamServiceConfig_WebsocketService) isUpstreamServiceConfig_ServiceConfig() {}

func (*upstreamServiceConfig_WebrtcService) isUpstreamServiceConfig_ServiceConfig() {}

// GrpcUpstreamService defines an upstream service that speaks gRPC.
type GrpcUpstreamService struct {
	state                    protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Address       *string                `protobuf:"bytes,1,opt,name=address"`
	xxx_hidden_ProtoContent  *string                `protobuf:"bytes,2,opt,name=proto_content,json=protoContent"`
	xxx_hidden_UseReflection bool                   `protobuf:"varint,3,opt,name=use_reflection,json=useReflection"`
	xxx_hidden_TlsConfig     *TLSConfig             `protobuf:"bytes,4,opt,name=tls_config,json=tlsConfig"`
	xxx_hidden_Calls         *[]*GrpcCallDefinition `protobuf:"bytes,5,rep,name=calls"`
	xxx_hidden_HealthCheck   *GrpcHealthCheck       `protobuf:"bytes,6,opt,name=health_check,json=healthCheck"`
	XXX_raceDetectHookData   protoimpl.RaceDetectHookData
	XXX_presence             [1]uint32
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *GrpcUpstreamService) Reset() {
	*x = GrpcUpstreamService{}
	mi := &file_proto_config_v1_config_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GrpcUpstreamService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrpcUpstreamService) ProtoMessage() {}

func (x *GrpcUpstreamService) ProtoReflect() protoreflect.Message {
	mi := &file_proto_config_v1_config_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *GrpcUpstreamService) GetAddress() string {
	if x != nil {
		if x.xxx_hidden_Address != nil {
			return *x.xxx_hidden_Address
		}
		return ""
	}
	return ""
}

func (x *GrpcUpstreamService) GetProtoContent() string {
	if x != nil {
		if x.xxx_hidden_ProtoContent != nil {
			return *x.xxx_hidden_ProtoContent
		}
		return ""
	}
	return ""
}

func (x *GrpcUpstreamService) GetUseReflection() bool {
	if x != nil {
		return x.xxx_hidden_UseReflection
	}
	return false
}

func (x *GrpcUpstreamService) GetTlsConfig() *TLSConfig {
	if x != nil {
		return x.xxx_hidden_TlsConfig
	}
	return nil
}

func (x *GrpcUpstreamService) GetCalls() []*GrpcCallDefinition {
	if x != nil {
		if x.xxx_hidden_Calls != nil {
			return *x.xxx_hidden_Calls
		}
	}
	return nil
}

func (x *GrpcUpstreamService) GetHealthCheck() *GrpcHealthCheck {
	if x != nil {
		return x.xxx_hidden_HealthCheck
	}
	return nil
}

func (x *GrpcUpstreamService) SetAddress(v string) {
	x.xxx_hidden_Address = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 6)
}

func (x *GrpcUpstreamService) SetProtoContent(v string) {
	x.xxx_hidden_ProtoContent = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 6)
}

func (x *GrpcUpstreamService) SetUseReflection(v bool) {
	x.xxx_hidden_UseReflection = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 6)
}

func (x *GrpcUpstreamService) SetTlsConfig(v *TLSConfig) {
	x.xxx_hidden_TlsConfig = v
}

func (x *GrpcUpstreamService) SetCalls(v []*GrpcCallDefinition) {
	x.xxx_hidden_Calls = &v
}

func (x *GrpcUpstreamService) SetHealthCheck(v *GrpcHealthCheck) {
	x.xxx_hidden_HealthCheck = v
}

func (x *GrpcUpstreamService) HasAddress() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *GrpcUpstreamService) HasProtoContent() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *GrpcUpstreamService) HasUseReflection() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *GrpcUpstreamService) HasTlsConfig() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_TlsConfig != nil
}

func (x *GrpcUpstreamService) HasHealthCheck() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_HealthCheck != nil
}

func (x *GrpcUpstreamService) ClearAddress() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Address = nil
}

func (x *GrpcUpstreamService) ClearProtoContent() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_ProtoContent = nil
}

func (x *GrpcUpstreamService) ClearUseReflection() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_UseReflection = false
}

func (x *GrpcUpstreamService) ClearTlsConfig() {
	x.xxx_hidden_TlsConfig = nil
}

func (x *GrpcUpstreamService) ClearHealthCheck() {
	x.xxx_hidden_HealthCheck = nil
}

type GrpcUpstreamService_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The address of the gRPC server (e.g., "localhost:50051").
	Address *string
	// The content of the main .proto file.
	ProtoContent *string
	// If true, mcpx will use gRPC reflection to discover services and methods.
	UseReflection *bool
	// TLS configuration for the gRPC connection.
	TlsConfig *TLSConfig
	// Manually defined mappings from MCP tools to gRPC calls.
	Calls []*GrpcCallDefinition
	// Health check configuration.
	HealthCheck *GrpcHealthCheck
}

func (b0 GrpcUpstreamService_builder) Build() *GrpcUpstreamService {
	m0 := &GrpcUpstreamService{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Address != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 6)
		x.xxx_hidden_Address = b.Address
	}
	if b.ProtoContent != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 6)
		x.xxx_hidden_ProtoContent = b.ProtoContent
	}
	if b.UseReflection != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 6)
		x.xxx_hidden_UseReflection = *b.UseReflection
	}
	x.xxx_hidden_TlsConfig = b.TlsConfig
	x.xxx_hidden_Calls = &b.Calls
	x.xxx_hidden_HealthCheck = b.HealthCheck
	return m0
}

// HttpUpstreamService defines an upstream service that speaks HTTP.
type HttpUpstreamService struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Address     *string                `protobuf:"bytes,1,opt,name=address"`
	xxx_hidden_Calls       *[]*HttpCallDefinition `protobuf:"bytes,2,rep,name=calls"`
	xxx_hidden_HealthCheck *HttpHealthCheck       `protobuf:"bytes,3,opt,name=health_check,json=healthCheck"`
	xxx_hidden_TlsConfig   *TLSConfig             `protobuf:"bytes,4,opt,name=tls_config,json=tlsConfig"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *HttpUpstreamService) Reset() {
	*x = HttpUpstreamService{}
	mi := &file_proto_config_v1_config_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HttpUpstreamService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpUpstreamService) ProtoMessage() {}

func (x *HttpUpstreamService) ProtoReflect() protoreflect.Message {
	mi := &file_proto_config_v1_config_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *HttpUpstreamService) GetAddress() string {
	if x != nil {
		if x.xxx_hidden_Address != nil {
			return *x.xxx_hidden_Address
		}
		return ""
	}
	return ""
}

func (x *HttpUpstreamService) GetCalls() []*HttpCallDefinition {
	if x != nil {
		if x.xxx_hidden_Calls != nil {
			return *x.xxx_hidden_Calls
		}
	}
	return nil
}

func (x *HttpUpstreamService) GetHealthCheck() *HttpHealthCheck {
	if x != nil {
		return x.xxx_hidden_HealthCheck
	}
	return nil
}

func (x *HttpUpstreamService) GetTlsConfig() *TLSConfig {
	if x != nil {
		return x.xxx_hidden_TlsConfig
	}
	return nil
}

func (x *HttpUpstreamService) SetAddress(v string) {
	x.xxx_hidden_Address = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 4)
}

func (x *HttpUpstreamService) SetCalls(v []*HttpCallDefinition) {
	x.xxx_hidden_Calls = &v
}

func (x *HttpUpstreamService) SetHealthCheck(v *HttpHealthCheck) {
	x.xxx_hidden_HealthCheck = v
}

func (x *HttpUpstreamService) SetTlsConfig(v *TLSConfig) {
	x.xxx_hidden_TlsConfig = v
}

func (x *HttpUpstreamService) HasAddress() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *HttpUpstreamService) HasHealthCheck() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_HealthCheck != nil
}

func (x *HttpUpstreamService) HasTlsConfig() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_TlsConfig != nil
}

func (x *HttpUpstreamService) ClearAddress() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Address = nil
}

func (x *HttpUpstreamService) ClearHealthCheck() {
	x.xxx_hidden_HealthCheck = nil
}

func (x *HttpUpstreamService) ClearTlsConfig() {
	x.xxx_hidden_TlsConfig = nil
}

type HttpUpstreamService_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The base URL of the HTTP service (e.g., "https://api.example.com").
	Address *string
	// Manually defined mappings from MCP tools to HTTP calls.
	Calls []*HttpCallDefinition
	// Configuration for checking the health of the HTTP service.
	HealthCheck *HttpHealthCheck
	// TLS configuration for the HTTP connection.
	TlsConfig *TLSConfig
}

func (b0 HttpUpstreamService_builder) Build() *HttpUpstreamService {
	m0 := &HttpUpstreamService{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Address != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 4)
		x.xxx_hidden_Address = b.Address
	}
	x.xxx_hidden_Calls = &b.Calls
	x.xxx_hidden_HealthCheck = b.HealthCheck
	x.xxx_hidden_TlsConfig = b.TlsConfig
	return m0
}

// WebsocketUpstreamService defines an upstream service that communicates over Websocket.
type WebsocketUpstreamService struct {
	state                  protoimpl.MessageState      `protogen:"opaque.v1"`
	xxx_hidden_Address     *string                     `protobuf:"bytes,1,opt,name=address"`
	xxx_hidden_Calls       *[]*WebsocketCallDefinition `protobuf:"bytes,2,rep,name=calls"`
	xxx_hidden_TlsConfig   *TLSConfig                  `protobuf:"bytes,3,opt,name=tls_config,json=tlsConfig"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *WebsocketUpstreamService) Reset() {
	*x = WebsocketUpstreamService{}
	mi := &file_proto_config_v1_config_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WebsocketUpstreamService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebsocketUpstreamService) ProtoMessage() {}

func (x *WebsocketUpstreamService) ProtoReflect() protoreflect.Message {
	mi := &file_proto_config_v1_config_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *WebsocketUpstreamService) GetAddress() string {
	if x != nil {
		if x.xxx_hidden_Address != nil {
			return *x.xxx_hidden_Address
		}
		return ""
	}
	return ""
}

func (x *WebsocketUpstreamService) GetCalls() []*WebsocketCallDefinition {
	if x != nil {
		if x.xxx_hidden_Calls != nil {
			return *x.xxx_hidden_Calls
		}
	}
	return nil
}

func (x *WebsocketUpstreamService) GetTlsConfig() *TLSConfig {
	if x != nil {
		return x.xxx_hidden_TlsConfig
	}
	return nil
}

func (x *WebsocketUpstreamService) SetAddress(v string) {
	x.xxx_hidden_Address = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 3)
}

func (x *WebsocketUpstreamService) SetCalls(v []*WebsocketCallDefinition) {
	x.xxx_hidden_Calls = &v
}

func (x *WebsocketUpstreamService) SetTlsConfig(v *TLSConfig) {
	x.xxx_hidden_TlsConfig = v
}

func (x *WebsocketUpstreamService) HasAddress() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *WebsocketUpstreamService) HasTlsConfig() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_TlsConfig != nil
}

func (x *WebsocketUpstreamService) ClearAddress() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Address = nil
}

func (x *WebsocketUpstreamService) ClearTlsConfig() {
	x.xxx_hidden_TlsConfig = nil
}

type WebsocketUpstreamService_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The URL of the Websocket service (e.g., "ws://api.example.com/ws").
	Address *string
	// Manually defined mappings from MCP tools to websocket calls.
	Calls []*WebsocketCallDefinition
	// TLS configuration for the Websocket connection.
	TlsConfig *TLSConfig
}

func (b0 WebsocketUpstreamService_builder) Build() *WebsocketUpstreamService {
	m0 := &WebsocketUpstreamService{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Address != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 3)
		x.xxx_hidden_Address = b.Address
	}
	x.xxx_hidden_Calls = &b.Calls
	x.xxx_hidden_TlsConfig = b.TlsConfig
	return m0
}

// WebrtcUpstreamService defines an upstream service that communicates over WebRTC data channels.
type WebrtcUpstreamService struct {
	state                  protoimpl.MessageState   `protogen:"opaque.v1"`
	xxx_hidden_Address     *string                  `protobuf:"bytes,1,opt,name=address"`
	xxx_hidden_Calls       *[]*WebrtcCallDefinition `protobuf:"bytes,2,rep,name=calls"`
	xxx_hidden_TlsConfig   *TLSConfig               `protobuf:"bytes,3,opt,name=tls_config,json=tlsConfig"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *WebrtcUpstreamService) Reset() {
	*x = WebrtcUpstreamService{}
	mi := &file_proto_config_v1_config_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WebrtcUpstreamService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebrtcUpstreamService) ProtoMessage() {}

func (x *WebrtcUpstreamService) ProtoReflect() protoreflect.Message {
	mi := &file_proto_config_v1_config_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *WebrtcUpstreamService) GetAddress() string {
	if x != nil {
		if x.xxx_hidden_Address != nil {
			return *x.xxx_hidden_Address
		}
		return ""
	}
	return ""
}

func (x *WebrtcUpstreamService) GetCalls() []*WebrtcCallDefinition {
	if x != nil {
		if x.xxx_hidden_Calls != nil {
			return *x.xxx_hidden_Calls
		}
	}
	return nil
}

func (x *WebrtcUpstreamService) GetTlsConfig() *TLSConfig {
	if x != nil {
		return x.xxx_hidden_TlsConfig
	}
	return nil
}

func (x *WebrtcUpstreamService) SetAddress(v string) {
	x.xxx_hidden_Address = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 3)
}

func (x *WebrtcUpstreamService) SetCalls(v []*WebrtcCallDefinition) {
	x.xxx_hidden_Calls = &v
}

func (x *WebrtcUpstreamService) SetTlsConfig(v *TLSConfig) {
	x.xxx_hidden_TlsConfig = v
}

func (x *WebrtcUpstreamService) HasAddress() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *WebrtcUpstreamService) HasTlsConfig() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_TlsConfig != nil
}

func (x *WebrtcUpstreamService) ClearAddress() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Address = nil
}

func (x *WebrtcUpstreamService) ClearTlsConfig() {
	x.xxx_hidden_TlsConfig = nil
}

type WebrtcUpstreamService_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The URL of the WebRTC signaling service (e.g., "http://api.example.com/signal").
	Address *string
	// Manually defined mappings from MCP tools to webrtc calls.
	Calls []*WebrtcCallDefinition
	// TLS configuration for the signaling connection.
	TlsConfig *TLSConfig
}

func (b0 WebrtcUpstreamService_builder) Build() *WebrtcUpstreamService {
	m0 := &WebrtcUpstreamService{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Address != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 3)
		x.xxx_hidden_Address = b.Address
	}
	x.xxx_hidden_Calls = &b.Calls
	x.xxx_hidden_TlsConfig = b.TlsConfig
	return m0
}

// OpenapiUpstreamService defines a service based on an OpenAPI/Swagger specification.
type OpenapiUpstreamService struct {
	state                  protoimpl.MessageState    `protogen:"opaque.v1"`
	xxx_hidden_Address     *string                   `protobuf:"bytes,1,opt,name=address"`
	xxx_hidden_OpenapiSpec *string                   `protobuf:"bytes,2,opt,name=openapi_spec,json=openapiSpec"`
	xxx_hidden_HealthCheck *HttpHealthCheck          `protobuf:"bytes,3,opt,name=health_check,json=healthCheck"`
	xxx_hidden_TlsConfig   *TLSConfig                `protobuf:"bytes,4,opt,name=tls_config,json=tlsConfig"`
	xxx_hidden_Calls       *[]*OpenAPICallDefinition `protobuf:"bytes,5,rep,name=calls"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *OpenapiUpstreamService) Reset() {
	*x = OpenapiUpstreamService{}
	mi := &file_proto_config_v1_config_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OpenapiUpstreamService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenapiUpstreamService) ProtoMessage() {}

func (x *OpenapiUpstreamService) ProtoReflect() protoreflect.Message {
	mi := &file_proto_config_v1_config_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *OpenapiUpstreamService) GetAddress() string {
	if x != nil {
		if x.xxx_hidden_Address != nil {
			return *x.xxx_hidden_Address
		}
		return ""
	}
	return ""
}

func (x *OpenapiUpstreamService) GetOpenapiSpec() string {
	if x != nil {
		if x.xxx_hidden_OpenapiSpec != nil {
			return *x.xxx_hidden_OpenapiSpec
		}
		return ""
	}
	return ""
}

func (x *OpenapiUpstreamService) GetHealthCheck() *HttpHealthCheck {
	if x != nil {
		return x.xxx_hidden_HealthCheck
	}
	return nil
}

func (x *OpenapiUpstreamService) GetTlsConfig() *TLSConfig {
	if x != nil {
		return x.xxx_hidden_TlsConfig
	}
	return nil
}

func (x *OpenapiUpstreamService) GetCalls() []*OpenAPICallDefinition {
	if x != nil {
		if x.xxx_hidden_Calls != nil {
			return *x.xxx_hidden_Calls
		}
	}
	return nil
}

func (x *OpenapiUpstreamService) SetAddress(v string) {
	x.xxx_hidden_Address = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 5)
}

func (x *OpenapiUpstreamService) SetOpenapiSpec(v string) {
	x.xxx_hidden_OpenapiSpec = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 5)
}

func (x *OpenapiUpstreamService) SetHealthCheck(v *HttpHealthCheck) {
	x.xxx_hidden_HealthCheck = v
}

func (x *OpenapiUpstreamService) SetTlsConfig(v *TLSConfig) {
	x.xxx_hidden_TlsConfig = v
}

func (x *OpenapiUpstreamService) SetCalls(v []*OpenAPICallDefinition) {
	x.xxx_hidden_Calls = &v
}

func (x *OpenapiUpstreamService) HasAddress() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *OpenapiUpstreamService) HasOpenapiSpec() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *OpenapiUpstreamService) HasHealthCheck() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_HealthCheck != nil
}

func (x *OpenapiUpstreamService) HasTlsConfig() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_TlsConfig != nil
}

func (x *OpenapiUpstreamService) ClearAddress() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Address = nil
}

func (x *OpenapiUpstreamService) ClearOpenapiSpec() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_OpenapiSpec = nil
}

func (x *OpenapiUpstreamService) ClearHealthCheck() {
	x.xxx_hidden_HealthCheck = nil
}

func (x *OpenapiUpstreamService) ClearTlsConfig() {
	x.xxx_hidden_TlsConfig = nil
}

type OpenapiUpstreamService_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The base URL of the API.
	Address *string
	// The OpenAPI specification content (JSON or YAML).
	OpenapiSpec *string
	// Health check configuration.
	HealthCheck *HttpHealthCheck
	// TLS configuration for the connection.
	TlsConfig *TLSConfig
	// Optional: Overrides or specific configurations for calls discovered from the spec.
	Calls []*OpenAPICallDefinition
}

func (b0 OpenapiUpstreamService_builder) Build() *OpenapiUpstreamService {
	m0 := &OpenapiUpstreamService{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Address != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 5)
		x.xxx_hidden_Address = b.Address
	}
	if b.OpenapiSpec != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 5)
		x.xxx_hidden_OpenapiSpec = b.OpenapiSpec
	}
	x.xxx_hidden_HealthCheck = b.HealthCheck
	x.xxx_hidden_TlsConfig = b.TlsConfig
	x.xxx_hidden_Calls = &b.Calls
	return m0
}

// CommandLineUpstreamService defines a service that communicates over standard I/O.
type CommandLineUpstreamService struct {
	state                       protoimpl.MessageState  `protogen:"opaque.v1"`
	xxx_hidden_Command          *string                 `protobuf:"bytes,1,opt,name=command"`
	xxx_hidden_Args             []string                `protobuf:"bytes,2,rep,name=args"`
	xxx_hidden_WorkingDirectory *string                 `protobuf:"bytes,3,opt,name=working_directory,json=workingDirectory"`
	xxx_hidden_Calls            *[]*StdioCallDefinition `protobuf:"bytes,4,rep,name=calls"`
	xxx_hidden_HealthCheck      *StdioHealthCheck       `protobuf:"bytes,5,opt,name=health_check,json=healthCheck"`
	xxx_hidden_Cache            *CacheConfig            `protobuf:"bytes,6,opt,name=cache"`
	XXX_raceDetectHookData      protoimpl.RaceDetectHookData
	XXX_presence                [1]uint32
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *CommandLineUpstreamService) Reset() {
	*x = CommandLineUpstreamService{}
	mi := &file_proto_config_v1_config_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommandLineUpstreamService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandLineUpstreamService) ProtoMessage() {}

func (x *CommandLineUpstreamService) ProtoReflect() protoreflect.Message {
	mi := &file_proto_config_v1_config_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *CommandLineUpstreamService) GetCommand() string {
	if x != nil {
		if x.xxx_hidden_Command != nil {
			return *x.xxx_hidden_Command
		}
		return ""
	}
	return ""
}

func (x *CommandLineUpstreamService) GetArgs() []string {
	if x != nil {
		return x.xxx_hidden_Args
	}
	return nil
}

func (x *CommandLineUpstreamService) GetWorkingDirectory() string {
	if x != nil {
		if x.xxx_hidden_WorkingDirectory != nil {
			return *x.xxx_hidden_WorkingDirectory
		}
		return ""
	}
	return ""
}

func (x *CommandLineUpstreamService) GetCalls() []*StdioCallDefinition {
	if x != nil {
		if x.xxx_hidden_Calls != nil {
			return *x.xxx_hidden_Calls
		}
	}
	return nil
}

func (x *CommandLineUpstreamService) GetHealthCheck() *StdioHealthCheck {
	if x != nil {
		return x.xxx_hidden_HealthCheck
	}
	return nil
}

func (x *CommandLineUpstreamService) GetCache() *CacheConfig {
	if x != nil {
		return x.xxx_hidden_Cache
	}
	return nil
}

func (x *CommandLineUpstreamService) SetCommand(v string) {
	x.xxx_hidden_Command = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 6)
}

func (x *CommandLineUpstreamService) SetArgs(v []string) {
	x.xxx_hidden_Args = v
}

func (x *CommandLineUpstreamService) SetWorkingDirectory(v string) {
	x.xxx_hidden_WorkingDirectory = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 6)
}

func (x *CommandLineUpstreamService) SetCalls(v []*StdioCallDefinition) {
	x.xxx_hidden_Calls = &v
}

func (x *CommandLineUpstreamService) SetHealthCheck(v *StdioHealthCheck) {
	x.xxx_hidden_HealthCheck = v
}

func (x *CommandLineUpstreamService) SetCache(v *CacheConfig) {
	x.xxx_hidden_Cache = v
}

func (x *CommandLineUpstreamService) HasCommand() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *CommandLineUpstreamService) HasWorkingDirectory() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *CommandLineUpstreamService) HasHealthCheck() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_HealthCheck != nil
}

func (x *CommandLineUpstreamService) HasCache() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Cache != nil
}

func (x *CommandLineUpstreamService) ClearCommand() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Command = nil
}

func (x *CommandLineUpstreamService) ClearWorkingDirectory() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_WorkingDirectory = nil
}

func (x *CommandLineUpstreamService) ClearHealthCheck() {
	x.xxx_hidden_HealthCheck = nil
}

func (x *CommandLineUpstreamService) ClearCache() {
	x.xxx_hidden_Cache = nil
}

type CommandLineUpstreamService_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The command and arguments to execute the service.
	Command *string
	Args    []string
	// The working directory for the command.
	WorkingDirectory *string
	// Manually defined mappings from MCP tools to stdio commands.
	Calls []*StdioCallDefinition
	// Health check configuration.
	HealthCheck *StdioHealthCheck
	// Caching configuration to improve performance and reduce load on the upstream.
	Cache *CacheConfig
}

func (b0 CommandLineUpstreamService_builder) Build() *CommandLineUpstreamService {
	m0 := &CommandLineUpstreamService{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Command != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 6)
		x.xxx_hidden_Command = b.Command
	}
	x.xxx_hidden_Args = b.Args
	if b.WorkingDirectory != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 6)
		x.xxx_hidden_WorkingDirectory = b.WorkingDirectory
	}
	x.xxx_hidden_Calls = &b.Calls
	x.xxx_hidden_HealthCheck = b.HealthCheck
	x.xxx_hidden_Cache = b.Cache
	return m0
}

// McpUpstreamService defines an upstream that is already an MCP-compliant service.
type McpUpstreamService struct {
	state                        protoimpl.MessageState              `protogen:"opaque.v1"`
	xxx_hidden_ConnectionType    isMcpUpstreamService_ConnectionType `protobuf_oneof:"connection_type"`
	xxx_hidden_ToolAutoDiscovery bool                                `protobuf:"varint,3,opt,name=tool_auto_discovery,json=toolAutoDiscovery"`
	xxx_hidden_Tools             *[]*ToolDefinition                  `protobuf:"bytes,4,rep,name=tools"`
	xxx_hidden_Calls             *[]*MCPCallDefinition               `protobuf:"bytes,6,rep,name=calls"`
	XXX_raceDetectHookData       protoimpl.RaceDetectHookData
	XXX_presence                 [1]uint32
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

func (x *McpUpstreamService) Reset() {
	*x = McpUpstreamService{}
	mi := &file_proto_config_v1_config_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *McpUpstreamService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*McpUpstreamService) ProtoMessage() {}

func (x *McpUpstreamService) ProtoReflect() protoreflect.Message {
	mi := &file_proto_config_v1_config_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *McpUpstreamService) GetHttpConnection() *McpStreamableHttpConnection {
	if x != nil {
		if x, ok := x.xxx_hidden_ConnectionType.(*mcpUpstreamService_HttpConnection); ok {
			return x.HttpConnection
		}
	}
	return nil
}

func (x *McpUpstreamService) GetStdioConnection() *McpStdioConnection {
	if x != nil {
		if x, ok := x.xxx_hidden_ConnectionType.(*mcpUpstreamService_StdioConnection); ok {
			return x.StdioConnection
		}
	}
	return nil
}

func (x *McpUpstreamService) GetToolAutoDiscovery() bool {
	if x != nil {
		return x.xxx_hidden_ToolAutoDiscovery
	}
	return false
}

func (x *McpUpstreamService) GetTools() []*ToolDefinition {
	if x != nil {
		if x.xxx_hidden_Tools != nil {
			return *x.xxx_hidden_Tools
		}
	}
	return nil
}

func (x *McpUpstreamService) GetCalls() []*MCPCallDefinition {
	if x != nil {
		if x.xxx_hidden_Calls != nil {
			return *x.xxx_hidden_Calls
		}
	}
	return nil
}

func (x *McpUpstreamService) SetHttpConnection(v *McpStreamableHttpConnection) {
	if v == nil {
		x.xxx_hidden_ConnectionType = nil
		return
	}
	x.xxx_hidden_ConnectionType = &mcpUpstreamService_HttpConnection{v}
}

func (x *McpUpstreamService) SetStdioConnection(v *McpStdioConnection) {
	if v == nil {
		x.xxx_hidden_ConnectionType = nil
		return
	}
	x.xxx_hidden_ConnectionType = &mcpUpstreamService_StdioConnection{v}
}

func (x *McpUpstreamService) SetToolAutoDiscovery(v bool) {
	x.xxx_hidden_ToolAutoDiscovery = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 4)
}

func (x *McpUpstreamService) SetTools(v []*ToolDefinition) {
	x.xxx_hidden_Tools = &v
}

func (x *McpUpstreamService) SetCalls(v []*MCPCallDefinition) {
	x.xxx_hidden_Calls = &v
}

func (x *McpUpstreamService) HasConnectionType() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_ConnectionType != nil
}

func (x *McpUpstreamService) HasHttpConnection() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_ConnectionType.(*mcpUpstreamService_HttpConnection)
	return ok
}

func (x *McpUpstreamService) HasStdioConnection() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_ConnectionType.(*mcpUpstreamService_StdioConnection)
	return ok
}

func (x *McpUpstreamService) HasToolAutoDiscovery() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *McpUpstreamService) ClearConnectionType() {
	x.xxx_hidden_ConnectionType = nil
}

func (x *McpUpstreamService) ClearHttpConnection() {
	if _, ok := x.xxx_hidden_ConnectionType.(*mcpUpstreamService_HttpConnection); ok {
		x.xxx_hidden_ConnectionType = nil
	}
}

func (x *McpUpstreamService) ClearStdioConnection() {
	if _, ok := x.xxx_hidden_ConnectionType.(*mcpUpstreamService_StdioConnection); ok {
		x.xxx_hidden_ConnectionType = nil
	}
}

func (x *McpUpstreamService) ClearToolAutoDiscovery() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_ToolAutoDiscovery = false
}

const McpUpstreamService_ConnectionType_not_set_case case_McpUpstreamService_ConnectionType = 0
const McpUpstreamService_HttpConnection_case case_McpUpstreamService_ConnectionType = 1
const McpUpstreamService_StdioConnection_case case_McpUpstreamService_ConnectionType = 2

func (x *McpUpstreamService) WhichConnectionType() case_McpUpstreamService_ConnectionType {
	if x == nil {
		return McpUpstreamService_ConnectionType_not_set_case
	}
	switch x.xxx_hidden_ConnectionType.(type) {
	case *mcpUpstreamService_HttpConnection:
		return McpUpstreamService_HttpConnection_case
	case *mcpUpstreamService_StdioConnection:
		return McpUpstreamService_StdioConnection_case
	default:
		return McpUpstreamService_ConnectionType_not_set_case
	}
}

type McpUpstreamService_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The connection details for the upstream MCP service.

	// Fields of oneof xxx_hidden_ConnectionType:
	HttpConnection *McpStreamableHttpConnection
	// Connect via a stdio process.
	StdioConnection *McpStdioConnection
	// -- end of xxx_hidden_ConnectionType
	// If true, mcpx will automatically discover and proxy all tools from the upstream.
	ToolAutoDiscovery *bool
	// Optional: Pre-defined tools to register, can be used to filter or augment discovered tools.
	Tools []*ToolDefinition
	// Optional: Overrides or specific configurations for calls discovered from the service.
	Calls []*MCPCallDefinition
}

func (b0 McpUpstreamService_builder) Build() *McpUpstreamService {
	m0 := &McpUpstreamService{}
	b, x := &b0, m0
	_, _ = b, x
	if b.HttpConnection != nil {
		x.xxx_hidden_ConnectionType = &mcpUpstreamService_HttpConnection{b.HttpConnection}
	}
	if b.StdioConnection != nil {
		x.xxx_hidden_ConnectionType = &mcpUpstreamService_StdioConnection{b.StdioConnection}
	}
	if b.ToolAutoDiscovery != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 4)
		x.xxx_hidden_ToolAutoDiscovery = *b.ToolAutoDiscovery
	}
	x.xxx_hidden_Tools = &b.Tools
	x.xxx_hidden_Calls = &b.Calls
	return m0
}

type case_McpUpstreamService_ConnectionType protoreflect.FieldNumber

func (x case_McpUpstreamService_ConnectionType) String() string {
	md := file_proto_config_v1_config_proto_msgTypes[11].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isMcpUpstreamService_ConnectionType interface {
	isMcpUpstreamService_ConnectionType()
}

type mcpUpstreamService_HttpConnection struct {
	HttpConnection *McpStreamableHttpConnection `protobuf:"bytes,1,opt,name=http_connection,json=httpConnection,oneof"`
}

type mcpUpstreamService_StdioConnection struct {
	// Connect via a stdio process.
	StdioConnection *McpStdioConnection `protobuf:"bytes,2,opt,name=stdio_connection,json=stdioConnection,oneof"`
}

func (*mcpUpstreamService_HttpConnection) isMcpUpstreamService_ConnectionType() {}

func (*mcpUpstreamService_StdioConnection) isMcpUpstreamService_ConnectionType() {}

// McpStdioConnection defines the parameters for a stdio-based connection.
type McpStdioConnection struct {
	state                       protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Command          *string                `protobuf:"bytes,1,opt,name=command"`
	xxx_hidden_Args             []string               `protobuf:"bytes,2,rep,name=args"`
	xxx_hidden_WorkingDirectory *string                `protobuf:"bytes,3,opt,name=working_directory,json=workingDirectory"`
	xxx_hidden_ContainerImage   *string                `protobuf:"bytes,4,opt,name=container_image,json=containerImage"`
	xxx_hidden_SetupCommands    []string               `protobuf:"bytes,5,rep,name=setup_commands,json=setupCommands"`
	XXX_raceDetectHookData      protoimpl.RaceDetectHookData
	XXX_presence                [1]uint32
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *McpStdioConnection) Reset() {
	*x = McpStdioConnection{}
	mi := &file_proto_config_v1_config_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *McpStdioConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*McpStdioConnection) ProtoMessage() {}

func (x *McpStdioConnection) ProtoReflect() protoreflect.Message {
	mi := &file_proto_config_v1_config_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *McpStdioConnection) GetCommand() string {
	if x != nil {
		if x.xxx_hidden_Command != nil {
			return *x.xxx_hidden_Command
		}
		return ""
	}
	return ""
}

func (x *McpStdioConnection) GetArgs() []string {
	if x != nil {
		return x.xxx_hidden_Args
	}
	return nil
}

func (x *McpStdioConnection) GetWorkingDirectory() string {
	if x != nil {
		if x.xxx_hidden_WorkingDirectory != nil {
			return *x.xxx_hidden_WorkingDirectory
		}
		return ""
	}
	return ""
}

func (x *McpStdioConnection) GetContainerImage() string {
	if x != nil {
		if x.xxx_hidden_ContainerImage != nil {
			return *x.xxx_hidden_ContainerImage
		}
		return ""
	}
	return ""
}

func (x *McpStdioConnection) GetSetupCommands() []string {
	if x != nil {
		return x.xxx_hidden_SetupCommands
	}
	return nil
}

func (x *McpStdioConnection) SetCommand(v string) {
	x.xxx_hidden_Command = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 5)
}

func (x *McpStdioConnection) SetArgs(v []string) {
	x.xxx_hidden_Args = v
}

func (x *McpStdioConnection) SetWorkingDirectory(v string) {
	x.xxx_hidden_WorkingDirectory = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 5)
}

func (x *McpStdioConnection) SetContainerImage(v string) {
	x.xxx_hidden_ContainerImage = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 5)
}

func (x *McpStdioConnection) SetSetupCommands(v []string) {
	x.xxx_hidden_SetupCommands = v
}

func (x *McpStdioConnection) HasCommand() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *McpStdioConnection) HasWorkingDirectory() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *McpStdioConnection) HasContainerImage() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *McpStdioConnection) ClearCommand() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Command = nil
}

func (x *McpStdioConnection) ClearWorkingDirectory() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_WorkingDirectory = nil
}

func (x *McpStdioConnection) ClearContainerImage() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_ContainerImage = nil
}

type McpStdioConnection_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The command and arguments to execute the service.
	Command *string
	Args    []string
	// The working directory for the command.
	WorkingDirectory *string
	// Optional: The container image to use. If not provided, an image will be
	// selected based on the command.
	ContainerImage *string
	// Optional: A list of commands to run as setup before the main command.
	SetupCommands []string
}

func (b0 McpStdioConnection_builder) Build() *McpStdioConnection {
	m0 := &McpStdioConnection{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Command != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 5)
		x.xxx_hidden_Command = b.Command
	}
	x.xxx_hidden_Args = b.Args
	if b.WorkingDirectory != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 5)
		x.xxx_hidden_WorkingDirectory = b.WorkingDirectory
	}
	if b.ContainerImage != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 5)
		x.xxx_hidden_ContainerImage = b.ContainerImage
	}
	x.xxx_hidden_SetupCommands = b.SetupCommands
	return m0
}

type McpStreamableHttpConnection struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_HttpAddress *string                `protobuf:"bytes,1,opt,name=http_address,json=httpAddress"`
	xxx_hidden_TlsConfig   *TLSConfig             `protobuf:"bytes,5,opt,name=tls_config,json=tlsConfig"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *McpStreamableHttpConnection) Reset() {
	*x = McpStreamableHttpConnection{}
	mi := &file_proto_config_v1_config_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *McpStreamableHttpConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*McpStreamableHttpConnection) ProtoMessage() {}

func (x *McpStreamableHttpConnection) ProtoReflect() protoreflect.Message {
	mi := &file_proto_config_v1_config_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *McpStreamableHttpConnection) GetHttpAddress() string {
	if x != nil {
		if x.xxx_hidden_HttpAddress != nil {
			return *x.xxx_hidden_HttpAddress
		}
		return ""
	}
	return ""
}

func (x *McpStreamableHttpConnection) GetTlsConfig() *TLSConfig {
	if x != nil {
		return x.xxx_hidden_TlsConfig
	}
	return nil
}

func (x *McpStreamableHttpConnection) SetHttpAddress(v string) {
	x.xxx_hidden_HttpAddress = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 2)
}

func (x *McpStreamableHttpConnection) SetTlsConfig(v *TLSConfig) {
	x.xxx_hidden_TlsConfig = v
}

func (x *McpStreamableHttpConnection) HasHttpAddress() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *McpStreamableHttpConnection) HasTlsConfig() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_TlsConfig != nil
}

func (x *McpStreamableHttpConnection) ClearHttpAddress() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_HttpAddress = nil
}

func (x *McpStreamableHttpConnection) ClearTlsConfig() {
	x.xxx_hidden_TlsConfig = nil
}

type McpStreamableHttpConnection_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Connect via HTTP.
	HttpAddress *string
	// TLS configuration, applicable if using an http_address.
	TlsConfig *TLSConfig
}

func (b0 McpStreamableHttpConnection_builder) Build() *McpStreamableHttpConnection {
	m0 := &McpStreamableHttpConnection{}
	b, x := &b0, m0
	_, _ = b, x
	if b.HttpAddress != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 2)
		x.xxx_hidden_HttpAddress = b.HttpAddress
	}
	x.xxx_hidden_TlsConfig = b.TlsConfig
	return m0
}

// ToolDefinition describes a single capability or "tool" offered by a service.
type ToolDefinition struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Name        *string                `protobuf:"bytes,1,opt,name=name"`
	xxx_hidden_Description *string                `protobuf:"bytes,2,opt,name=description"`
	xxx_hidden_InputSchema *structpb.Struct       `protobuf:"bytes,3,opt,name=input_schema,json=inputSchema"`
	xxx_hidden_IsStream    bool                   `protobuf:"varint,4,opt,name=is_stream,json=isStream"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *ToolDefinition) Reset() {
	*x = ToolDefinition{}
	mi := &file_proto_config_v1_config_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ToolDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToolDefinition) ProtoMessage() {}

func (x *ToolDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_proto_config_v1_config_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ToolDefinition) GetName() string {
	if x != nil {
		if x.xxx_hidden_Name != nil {
			return *x.xxx_hidden_Name
		}
		return ""
	}
	return ""
}

func (x *ToolDefinition) GetDescription() string {
	if x != nil {
		if x.xxx_hidden_Description != nil {
			return *x.xxx_hidden_Description
		}
		return ""
	}
	return ""
}

func (x *ToolDefinition) GetInputSchema() *structpb.Struct {
	if x != nil {
		return x.xxx_hidden_InputSchema
	}
	return nil
}

func (x *ToolDefinition) GetIsStream() bool {
	if x != nil {
		return x.xxx_hidden_IsStream
	}
	return false
}

func (x *ToolDefinition) SetName(v string) {
	x.xxx_hidden_Name = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 4)
}

func (x *ToolDefinition) SetDescription(v string) {
	x.xxx_hidden_Description = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 4)
}

func (x *ToolDefinition) SetInputSchema(v *structpb.Struct) {
	x.xxx_hidden_InputSchema = v
}

func (x *ToolDefinition) SetIsStream(v bool) {
	x.xxx_hidden_IsStream = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 4)
}

func (x *ToolDefinition) HasName() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *ToolDefinition) HasDescription() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *ToolDefinition) HasInputSchema() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_InputSchema != nil
}

func (x *ToolDefinition) HasIsStream() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *ToolDefinition) ClearName() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Name = nil
}

func (x *ToolDefinition) ClearDescription() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Description = nil
}

func (x *ToolDefinition) ClearInputSchema() {
	x.xxx_hidden_InputSchema = nil
}

func (x *ToolDefinition) ClearIsStream() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_IsStream = false
}

type ToolDefinition_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The name of the tool, which will be used to invoke it.
	Name *string
	// A human-readable description of what the tool does.
	Description *string
	// The schema for the input parameters required by the tool.
	InputSchema *structpb.Struct
	// Indicates if the tool produces a continuous stream of responses.
	IsStream *bool
}

func (b0 ToolDefinition_builder) Build() *ToolDefinition {
	m0 := &ToolDefinition{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Name != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 4)
		x.xxx_hidden_Name = b.Name
	}
	if b.Description != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 4)
		x.xxx_hidden_Description = b.Description
	}
	x.xxx_hidden_InputSchema = b.InputSchema
	if b.IsStream != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 4)
		x.xxx_hidden_IsStream = *b.IsStream
	}
	return m0
}

// ToolAnnotation provides metadata about a tool.
type ToolAnnotation struct {
	state                      protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Title           *string                `protobuf:"bytes,1,opt,name=title"`
	xxx_hidden_Description     *string                `protobuf:"bytes,2,opt,name=description"`
	xxx_hidden_DestructiveHint bool                   `protobuf:"varint,3,opt,name=destructive_hint,json=destructiveHint"`
	xxx_hidden_IdempotentHint  bool                   `protobuf:"varint,4,opt,name=idempotent_hint,json=idempotentHint"`
	xxx_hidden_OpenWorldHint   bool                   `protobuf:"varint,5,opt,name=open_world_hint,json=openWorldHint"`
	xxx_hidden_ReadOnlyHint    bool                   `protobuf:"varint,6,opt,name=read_only_hint,json=readOnlyHint"`
	XXX_raceDetectHookData     protoimpl.RaceDetectHookData
	XXX_presence               [1]uint32
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *ToolAnnotation) Reset() {
	*x = ToolAnnotation{}
	mi := &file_proto_config_v1_config_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ToolAnnotation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToolAnnotation) ProtoMessage() {}

func (x *ToolAnnotation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_config_v1_config_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ToolAnnotation) GetTitle() string {
	if x != nil {
		if x.xxx_hidden_Title != nil {
			return *x.xxx_hidden_Title
		}
		return ""
	}
	return ""
}

func (x *ToolAnnotation) GetDescription() string {
	if x != nil {
		if x.xxx_hidden_Description != nil {
			return *x.xxx_hidden_Description
		}
		return ""
	}
	return ""
}

func (x *ToolAnnotation) GetDestructiveHint() bool {
	if x != nil {
		return x.xxx_hidden_DestructiveHint
	}
	return false
}

func (x *ToolAnnotation) GetIdempotentHint() bool {
	if x != nil {
		return x.xxx_hidden_IdempotentHint
	}
	return false
}

func (x *ToolAnnotation) GetOpenWorldHint() bool {
	if x != nil {
		return x.xxx_hidden_OpenWorldHint
	}
	return false
}

func (x *ToolAnnotation) GetReadOnlyHint() bool {
	if x != nil {
		return x.xxx_hidden_ReadOnlyHint
	}
	return false
}

func (x *ToolAnnotation) SetTitle(v string) {
	x.xxx_hidden_Title = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 6)
}

func (x *ToolAnnotation) SetDescription(v string) {
	x.xxx_hidden_Description = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 6)
}

func (x *ToolAnnotation) SetDestructiveHint(v bool) {
	x.xxx_hidden_DestructiveHint = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 6)
}

func (x *ToolAnnotation) SetIdempotentHint(v bool) {
	x.xxx_hidden_IdempotentHint = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 6)
}

func (x *ToolAnnotation) SetOpenWorldHint(v bool) {
	x.xxx_hidden_OpenWorldHint = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 6)
}

func (x *ToolAnnotation) SetReadOnlyHint(v bool) {
	x.xxx_hidden_ReadOnlyHint = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 5, 6)
}

func (x *ToolAnnotation) HasTitle() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *ToolAnnotation) HasDescription() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *ToolAnnotation) HasDestructiveHint() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *ToolAnnotation) HasIdempotentHint() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *ToolAnnotation) HasOpenWorldHint() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *ToolAnnotation) HasReadOnlyHint() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 5)
}

func (x *ToolAnnotation) ClearTitle() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Title = nil
}

func (x *ToolAnnotation) ClearDescription() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Description = nil
}

func (x *ToolAnnotation) ClearDestructiveHint() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_DestructiveHint = false
}

func (x *ToolAnnotation) ClearIdempotentHint() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_IdempotentHint = false
}

func (x *ToolAnnotation) ClearOpenWorldHint() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_OpenWorldHint = false
}

func (x *ToolAnnotation) ClearReadOnlyHint() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 5)
	x.xxx_hidden_ReadOnlyHint = false
}

type ToolAnnotation_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// A human-readable title for the tool.
	Title *string
	// A human-readable description of what the tool does.
	Description *string
	// If true, the tool may perform destructive updates to its environment.
	DestructiveHint *bool
	// If true, calling the tool repeatedly with the same arguments will have no additional effect.
	IdempotentHint *bool
	// If true, this tool may interact with an "open world" of external entities.
	OpenWorldHint *bool
	// If true, the tool does not modify its environment.
	ReadOnlyHint *bool
}

func (b0 ToolAnnotation_builder) Build() *ToolAnnotation {
	m0 := &ToolAnnotation{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Title != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 6)
		x.xxx_hidden_Title = b.Title
	}
	if b.Description != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 6)
		x.xxx_hidden_Description = b.Description
	}
	if b.DestructiveHint != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 6)
		x.xxx_hidden_DestructiveHint = *b.DestructiveHint
	}
	if b.IdempotentHint != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 6)
		x.xxx_hidden_IdempotentHint = *b.IdempotentHint
	}
	if b.OpenWorldHint != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 6)
		x.xxx_hidden_OpenWorldHint = *b.OpenWorldHint
	}
	if b.ReadOnlyHint != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 5, 6)
		x.xxx_hidden_ReadOnlyHint = *b.ReadOnlyHint
	}
	return m0
}

// ParameterSchema defines the schema for a single parameter.
type ParameterSchema struct {
	state                   protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Description  *string                `protobuf:"bytes,1,opt,name=description"`
	xxx_hidden_Type         ParameterType          `protobuf:"varint,2,opt,name=type,enum=mcpx.config.v1.ParameterType"`
	xxx_hidden_DefaultValue *structpb.Value        `protobuf:"bytes,3,opt,name=default_value,json=defaultValue"`
	xxx_hidden_IsRequired   bool                   `protobuf:"varint,4,opt,name=is_required,json=isRequired"`
	XXX_raceDetectHookData  protoimpl.RaceDetectHookData
	XXX_presence            [1]uint32
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *ParameterSchema) Reset() {
	*x = ParameterSchema{}
	mi := &file_proto_config_v1_config_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParameterSchema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParameterSchema) ProtoMessage() {}

func (x *ParameterSchema) ProtoReflect() protoreflect.Message {
	mi := &file_proto_config_v1_config_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ParameterSchema) GetDescription() string {
	if x != nil {
		if x.xxx_hidden_Description != nil {
			return *x.xxx_hidden_Description
		}
		return ""
	}
	return ""
}

func (x *ParameterSchema) GetType() ParameterType {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 1) {
			return x.xxx_hidden_Type
		}
	}
	return ParameterType_STRING
}

func (x *ParameterSchema) GetDefaultValue() *structpb.Value {
	if x != nil {
		return x.xxx_hidden_DefaultValue
	}
	return nil
}

func (x *ParameterSchema) GetIsRequired() bool {
	if x != nil {
		return x.xxx_hidden_IsRequired
	}
	return false
}

func (x *ParameterSchema) SetDescription(v string) {
	x.xxx_hidden_Description = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 4)
}

func (x *ParameterSchema) SetType(v ParameterType) {
	x.xxx_hidden_Type = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 4)
}

func (x *ParameterSchema) SetDefaultValue(v *structpb.Value) {
	x.xxx_hidden_DefaultValue = v
}

func (x *ParameterSchema) SetIsRequired(v bool) {
	x.xxx_hidden_IsRequired = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 4)
}

func (x *ParameterSchema) HasDescription() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *ParameterSchema) HasType() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *ParameterSchema) HasDefaultValue() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_DefaultValue != nil
}

func (x *ParameterSchema) HasIsRequired() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *ParameterSchema) ClearDescription() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Description = nil
}

func (x *ParameterSchema) ClearType() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Type = ParameterType_STRING
}

func (x *ParameterSchema) ClearDefaultValue() {
	x.xxx_hidden_DefaultValue = nil
}

func (x *ParameterSchema) ClearIsRequired() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_IsRequired = false
}

type ParameterSchema_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// A human-readable description of the parameter.
	Description *string
	// The data type of the parameter.
	Type *ParameterType
	// The default value of the parameter.
	DefaultValue *structpb.Value
	// Whether the parameter is required.
	IsRequired *bool
}

func (b0 ParameterSchema_builder) Build() *ParameterSchema {
	m0 := &ParameterSchema{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Description != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 4)
		x.xxx_hidden_Description = b.Description
	}
	if b.Type != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 4)
		x.xxx_hidden_Type = *b.Type
	}
	x.xxx_hidden_DefaultValue = b.DefaultValue
	if b.IsRequired != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 4)
		x.xxx_hidden_IsRequired = *b.IsRequired
	}
	return m0
}

// HttpCallDefinition describes how to map an MCP call to a specific HTTP request.
type HttpCallDefinition struct {
	state                        protoimpl.MessageState        `protogen:"opaque.v1"`
	xxx_hidden_Schema            *ToolAnnotation               `protobuf:"bytes,1,opt,name=schema"`
	xxx_hidden_EndpointPath      *string                       `protobuf:"bytes,2,opt,name=endpoint_path,json=endpointPath"`
	xxx_hidden_Method            HttpCallDefinition_HttpMethod `protobuf:"varint,3,opt,name=method,enum=mcpx.config.v1.HttpCallDefinition_HttpMethod"`
	xxx_hidden_Parameters        *[]*HttpParameterMapping      `protobuf:"bytes,5,rep,name=parameters"`
	xxx_hidden_InputTransformer  *InputTransformer             `protobuf:"bytes,6,opt,name=input_transformer,json=inputTransformer"`
	xxx_hidden_OutputTransformer *OutputTransformer            `protobuf:"bytes,7,opt,name=output_transformer,json=outputTransformer"`
	xxx_hidden_Cache             *CacheConfig                  `protobuf:"bytes,8,opt,name=cache"`
	XXX_raceDetectHookData       protoimpl.RaceDetectHookData
	XXX_presence                 [1]uint32
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

func (x *HttpCallDefinition) Reset() {
	*x = HttpCallDefinition{}
	mi := &file_proto_config_v1_config_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HttpCallDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpCallDefinition) ProtoMessage() {}

func (x *HttpCallDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_proto_config_v1_config_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *HttpCallDefinition) GetSchema() *ToolAnnotation {
	if x != nil {
		return x.xxx_hidden_Schema
	}
	return nil
}

func (x *HttpCallDefinition) GetEndpointPath() string {
	if x != nil {
		if x.xxx_hidden_EndpointPath != nil {
			return *x.xxx_hidden_EndpointPath
		}
		return ""
	}
	return ""
}

func (x *HttpCallDefinition) GetMethod() HttpCallDefinition_HttpMethod {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 2) {
			return x.xxx_hidden_Method
		}
	}
	return HttpCallDefinition_HTTP_METHOD_UNSPECIFIED
}

func (x *HttpCallDefinition) GetParameters() []*HttpParameterMapping {
	if x != nil {
		if x.xxx_hidden_Parameters != nil {
			return *x.xxx_hidden_Parameters
		}
	}
	return nil
}

func (x *HttpCallDefinition) GetInputTransformer() *InputTransformer {
	if x != nil {
		return x.xxx_hidden_InputTransformer
	}
	return nil
}

func (x *HttpCallDefinition) GetOutputTransformer() *OutputTransformer {
	if x != nil {
		return x.xxx_hidden_OutputTransformer
	}
	return nil
}

func (x *HttpCallDefinition) GetCache() *CacheConfig {
	if x != nil {
		return x.xxx_hidden_Cache
	}
	return nil
}

func (x *HttpCallDefinition) SetSchema(v *ToolAnnotation) {
	x.xxx_hidden_Schema = v
}

func (x *HttpCallDefinition) SetEndpointPath(v string) {
	x.xxx_hidden_EndpointPath = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 7)
}

func (x *HttpCallDefinition) SetMethod(v HttpCallDefinition_HttpMethod) {
	x.xxx_hidden_Method = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 7)
}

func (x *HttpCallDefinition) SetParameters(v []*HttpParameterMapping) {
	x.xxx_hidden_Parameters = &v
}

func (x *HttpCallDefinition) SetInputTransformer(v *InputTransformer) {
	x.xxx_hidden_InputTransformer = v
}

func (x *HttpCallDefinition) SetOutputTransformer(v *OutputTransformer) {
	x.xxx_hidden_OutputTransformer = v
}

func (x *HttpCallDefinition) SetCache(v *CacheConfig) {
	x.xxx_hidden_Cache = v
}

func (x *HttpCallDefinition) HasSchema() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Schema != nil
}

func (x *HttpCallDefinition) HasEndpointPath() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *HttpCallDefinition) HasMethod() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *HttpCallDefinition) HasInputTransformer() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_InputTransformer != nil
}

func (x *HttpCallDefinition) HasOutputTransformer() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_OutputTransformer != nil
}

func (x *HttpCallDefinition) HasCache() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Cache != nil
}

func (x *HttpCallDefinition) ClearSchema() {
	x.xxx_hidden_Schema = nil
}

func (x *HttpCallDefinition) ClearEndpointPath() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_EndpointPath = nil
}

func (x *HttpCallDefinition) ClearMethod() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_Method = HttpCallDefinition_HTTP_METHOD_UNSPECIFIED
}

func (x *HttpCallDefinition) ClearInputTransformer() {
	x.xxx_hidden_InputTransformer = nil
}

func (x *HttpCallDefinition) ClearOutputTransformer() {
	x.xxx_hidden_OutputTransformer = nil
}

func (x *HttpCallDefinition) ClearCache() {
	x.xxx_hidden_Cache = nil
}

type HttpCallDefinition_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Schema for the tool.
	Schema *ToolAnnotation
	// The path of the HTTP endpoint (e.g., "/users/{userId}").
	EndpointPath *string
	// The HTTP method to use for the request.
	Method *HttpCallDefinition_HttpMethod
	// Defines the parameters for the HTTP request.
	Parameters []*HttpParameterMapping
	// An optional input transformer to generate the request body.
	InputTransformer *InputTransformer
	// An optional output transformer to parse the response body.
	OutputTransformer *OutputTransformer
	// Caching configuration to improve performance and reduce load on the upstream.
	Cache *CacheConfig
}

func (b0 HttpCallDefinition_builder) Build() *HttpCallDefinition {
	m0 := &HttpCallDefinition{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Schema = b.Schema
	if b.EndpointPath != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 7)
		x.xxx_hidden_EndpointPath = b.EndpointPath
	}
	if b.Method != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 7)
		x.xxx_hidden_Method = *b.Method
	}
	x.xxx_hidden_Parameters = &b.Parameters
	x.xxx_hidden_InputTransformer = b.InputTransformer
	x.xxx_hidden_OutputTransformer = b.OutputTransformer
	x.xxx_hidden_Cache = b.Cache
	return m0
}

// WebsocketCallDefinition describes how to map an MCP call to a specific websocket message.
type WebsocketCallDefinition struct {
	state                        protoimpl.MessageState        `protogen:"opaque.v1"`
	xxx_hidden_Schema            *ToolAnnotation               `protobuf:"bytes,1,opt,name=schema"`
	xxx_hidden_Parameters        *[]*WebsocketParameterMapping `protobuf:"bytes,3,rep,name=parameters"`
	xxx_hidden_InputTransformer  *InputTransformer             `protobuf:"bytes,4,opt,name=input_transformer,json=inputTransformer"`
	xxx_hidden_OutputTransformer *OutputTransformer            `protobuf:"bytes,5,opt,name=output_transformer,json=outputTransformer"`
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

func (x *WebsocketCallDefinition) Reset() {
	*x = WebsocketCallDefinition{}
	mi := &file_proto_config_v1_config_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WebsocketCallDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebsocketCallDefinition) ProtoMessage() {}

func (x *WebsocketCallDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_proto_config_v1_config_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *WebsocketCallDefinition) GetSchema() *ToolAnnotation {
	if x != nil {
		return x.xxx_hidden_Schema
	}
	return nil
}

func (x *WebsocketCallDefinition) GetParameters() []*WebsocketParameterMapping {
	if x != nil {
		if x.xxx_hidden_Parameters != nil {
			return *x.xxx_hidden_Parameters
		}
	}
	return nil
}

func (x *WebsocketCallDefinition) GetInputTransformer() *InputTransformer {
	if x != nil {
		return x.xxx_hidden_InputTransformer
	}
	return nil
}

func (x *WebsocketCallDefinition) GetOutputTransformer() *OutputTransformer {
	if x != nil {
		return x.xxx_hidden_OutputTransformer
	}
	return nil
}

func (x *WebsocketCallDefinition) SetSchema(v *ToolAnnotation) {
	x.xxx_hidden_Schema = v
}

func (x *WebsocketCallDefinition) SetParameters(v []*WebsocketParameterMapping) {
	x.xxx_hidden_Parameters = &v
}

func (x *WebsocketCallDefinition) SetInputTransformer(v *InputTransformer) {
	x.xxx_hidden_InputTransformer = v
}

func (x *WebsocketCallDefinition) SetOutputTransformer(v *OutputTransformer) {
	x.xxx_hidden_OutputTransformer = v
}

func (x *WebsocketCallDefinition) HasSchema() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Schema != nil
}

func (x *WebsocketCallDefinition) HasInputTransformer() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_InputTransformer != nil
}

func (x *WebsocketCallDefinition) HasOutputTransformer() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_OutputTransformer != nil
}

func (x *WebsocketCallDefinition) ClearSchema() {
	x.xxx_hidden_Schema = nil
}

func (x *WebsocketCallDefinition) ClearInputTransformer() {
	x.xxx_hidden_InputTransformer = nil
}

func (x *WebsocketCallDefinition) ClearOutputTransformer() {
	x.xxx_hidden_OutputTransformer = nil
}

type WebsocketCallDefinition_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Schema for the tool.
	Schema *ToolAnnotation
	// Defines the parameters for the websocket message.
	Parameters []*WebsocketParameterMapping
	// An optional input transformer to generate the request body.
	InputTransformer *InputTransformer
	// An optional output transformer to parse the response body.
	OutputTransformer *OutputTransformer
}

func (b0 WebsocketCallDefinition_builder) Build() *WebsocketCallDefinition {
	m0 := &WebsocketCallDefinition{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Schema = b.Schema
	x.xxx_hidden_Parameters = &b.Parameters
	x.xxx_hidden_InputTransformer = b.InputTransformer
	x.xxx_hidden_OutputTransformer = b.OutputTransformer
	return m0
}

// WebrtcCallDefinition describes how to map an MCP call to a specific webrtc message.
type WebrtcCallDefinition struct {
	state                        protoimpl.MessageState     `protogen:"opaque.v1"`
	xxx_hidden_Schema            *ToolAnnotation            `protobuf:"bytes,1,opt,name=schema"`
	xxx_hidden_Parameters        *[]*WebrtcParameterMapping `protobuf:"bytes,3,rep,name=parameters"`
	xxx_hidden_InputTransformer  *InputTransformer          `protobuf:"bytes,4,opt,name=input_transformer,json=inputTransformer"`
	xxx_hidden_OutputTransformer *OutputTransformer         `protobuf:"bytes,5,opt,name=output_transformer,json=outputTransformer"`
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

func (x *WebrtcCallDefinition) Reset() {
	*x = WebrtcCallDefinition{}
	mi := &file_proto_config_v1_config_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WebrtcCallDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebrtcCallDefinition) ProtoMessage() {}

func (x *WebrtcCallDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_proto_config_v1_config_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *WebrtcCallDefinition) GetSchema() *ToolAnnotation {
	if x != nil {
		return x.xxx_hidden_Schema
	}
	return nil
}

func (x *WebrtcCallDefinition) GetParameters() []*WebrtcParameterMapping {
	if x != nil {
		if x.xxx_hidden_Parameters != nil {
			return *x.xxx_hidden_Parameters
		}
	}
	return nil
}

func (x *WebrtcCallDefinition) GetInputTransformer() *InputTransformer {
	if x != nil {
		return x.xxx_hidden_InputTransformer
	}
	return nil
}

func (x *WebrtcCallDefinition) GetOutputTransformer() *OutputTransformer {
	if x != nil {
		return x.xxx_hidden_OutputTransformer
	}
	return nil
}

func (x *WebrtcCallDefinition) SetSchema(v *ToolAnnotation) {
	x.xxx_hidden_Schema = v
}

func (x *WebrtcCallDefinition) SetParameters(v []*WebrtcParameterMapping) {
	x.xxx_hidden_Parameters = &v
}

func (x *WebrtcCallDefinition) SetInputTransformer(v *InputTransformer) {
	x.xxx_hidden_InputTransformer = v
}

func (x *WebrtcCallDefinition) SetOutputTransformer(v *OutputTransformer) {
	x.xxx_hidden_OutputTransformer = v
}

func (x *WebrtcCallDefinition) HasSchema() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Schema != nil
}

func (x *WebrtcCallDefinition) HasInputTransformer() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_InputTransformer != nil
}

func (x *WebrtcCallDefinition) HasOutputTransformer() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_OutputTransformer != nil
}

func (x *WebrtcCallDefinition) ClearSchema() {
	x.xxx_hidden_Schema = nil
}

func (x *WebrtcCallDefinition) ClearInputTransformer() {
	x.xxx_hidden_InputTransformer = nil
}

func (x *WebrtcCallDefinition) ClearOutputTransformer() {
	x.xxx_hidden_OutputTransformer = nil
}

type WebrtcCallDefinition_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Schema for the tool.
	Schema *ToolAnnotation
	// Defines the parameters for the webrtc message.
	Parameters []*WebrtcParameterMapping
	// An optional input transformer to generate the request body.
	InputTransformer *InputTransformer
	// An optional output transformer to parse the response body.
	OutputTransformer *OutputTransformer
}

func (b0 WebrtcCallDefinition_builder) Build() *WebrtcCallDefinition {
	m0 := &WebrtcCallDefinition{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Schema = b.Schema
	x.xxx_hidden_Parameters = &b.Parameters
	x.xxx_hidden_InputTransformer = b.InputTransformer
	x.xxx_hidden_OutputTransformer = b.OutputTransformer
	return m0
}

// StdioCallDefinition describes how to map an MCP call to a stdio command.
type StdioCallDefinition struct {
	state                 protoimpl.MessageState    `protogen:"opaque.v1"`
	xxx_hidden_Schema     *ToolAnnotation           `protobuf:"bytes,1,opt,name=schema"`
	xxx_hidden_Parameters *[]*StdioParameterMapping `protobuf:"bytes,2,rep,name=parameters"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *StdioCallDefinition) Reset() {
	*x = StdioCallDefinition{}
	mi := &file_proto_config_v1_config_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StdioCallDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StdioCallDefinition) ProtoMessage() {}

func (x *StdioCallDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_proto_config_v1_config_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *StdioCallDefinition) GetSchema() *ToolAnnotation {
	if x != nil {
		return x.xxx_hidden_Schema
	}
	return nil
}

func (x *StdioCallDefinition) GetParameters() []*StdioParameterMapping {
	if x != nil {
		if x.xxx_hidden_Parameters != nil {
			return *x.xxx_hidden_Parameters
		}
	}
	return nil
}

func (x *StdioCallDefinition) SetSchema(v *ToolAnnotation) {
	x.xxx_hidden_Schema = v
}

func (x *StdioCallDefinition) SetParameters(v []*StdioParameterMapping) {
	x.xxx_hidden_Parameters = &v
}

func (x *StdioCallDefinition) HasSchema() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Schema != nil
}

func (x *StdioCallDefinition) ClearSchema() {
	x.xxx_hidden_Schema = nil
}

type StdioCallDefinition_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Schema for the tool.
	Schema *ToolAnnotation
	// Defines the parameters for the stdio command.
	Parameters []*StdioParameterMapping
}

func (b0 StdioCallDefinition_builder) Build() *StdioCallDefinition {
	m0 := &StdioCallDefinition{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Schema = b.Schema
	x.xxx_hidden_Parameters = &b.Parameters
	return m0
}

// InputTransformer defines how to render a template from input parameters.
type InputTransformer struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Template    *string                `protobuf:"bytes,1,opt,name=template"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *InputTransformer) Reset() {
	*x = InputTransformer{}
	mi := &file_proto_config_v1_config_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InputTransformer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputTransformer) ProtoMessage() {}

func (x *InputTransformer) ProtoReflect() protoreflect.Message {
	mi := &file_proto_config_v1_config_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *InputTransformer) GetTemplate() string {
	if x != nil {
		if x.xxx_hidden_Template != nil {
			return *x.xxx_hidden_Template
		}
		return ""
	}
	return ""
}

func (x *InputTransformer) SetTemplate(v string) {
	x.xxx_hidden_Template = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 1)
}

func (x *InputTransformer) HasTemplate() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *InputTransformer) ClearTemplate() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Template = nil
}

type InputTransformer_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// A text template to be rendered.
	// This is used for generating the request body for POST/PUT requests.
	// The template engine is compatible with Jinja2.
	Template *string
}

func (b0 InputTransformer_builder) Build() *InputTransformer {
	m0 := &InputTransformer{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Template != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 1)
		x.xxx_hidden_Template = b.Template
	}
	return m0
}

// OutputTransformer defines how to parse an output text into structured data.
type OutputTransformer struct {
	state                      protoimpl.MessageState         `protogen:"opaque.v1"`
	xxx_hidden_Format          OutputTransformer_OutputFormat `protobuf:"varint,1,opt,name=format,enum=mcpx.config.v1.OutputTransformer_OutputFormat"`
	xxx_hidden_ExtractionRules map[string]string              `protobuf:"bytes,2,rep,name=extraction_rules,json=extractionRules" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	xxx_hidden_Template        *string                        `protobuf:"bytes,3,opt,name=template"`
	XXX_raceDetectHookData     protoimpl.RaceDetectHookData
	XXX_presence               [1]uint32
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *OutputTransformer) Reset() {
	*x = OutputTransformer{}
	mi := &file_proto_config_v1_config_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OutputTransformer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutputTransformer) ProtoMessage() {}

func (x *OutputTransformer) ProtoReflect() protoreflect.Message {
	mi := &file_proto_config_v1_config_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *OutputTransformer) GetFormat() OutputTransformer_OutputFormat {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 0) {
			return x.xxx_hidden_Format
		}
	}
	return OutputTransformer_JSON
}

func (x *OutputTransformer) GetExtractionRules() map[string]string {
	if x != nil {
		return x.xxx_hidden_ExtractionRules
	}
	return nil
}

func (x *OutputTransformer) GetTemplate() string {
	if x != nil {
		if x.xxx_hidden_Template != nil {
			return *x.xxx_hidden_Template
		}
		return ""
	}
	return ""
}

func (x *OutputTransformer) SetFormat(v OutputTransformer_OutputFormat) {
	x.xxx_hidden_Format = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 3)
}

func (x *OutputTransformer) SetExtractionRules(v map[string]string) {
	x.xxx_hidden_ExtractionRules = v
}

func (x *OutputTransformer) SetTemplate(v string) {
	x.xxx_hidden_Template = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 3)
}

func (x *OutputTransformer) HasFormat() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *OutputTransformer) HasTemplate() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *OutputTransformer) ClearFormat() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Format = OutputTransformer_JSON
}

func (x *OutputTransformer) ClearTemplate() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_Template = nil
}

type OutputTransformer_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The format of the upstream service's output.
	Format *OutputTransformer_OutputFormat
	// A map of field names to the extraction expressions.
	// The interpretation of the expression depends on the 'format':
	// - JSON: JSONPath expressions.
	// - XML: XPath expressions.
	// - TEXT: Regular expressions (first capture group is used).
	ExtractionRules map[string]string
	// An optional template to render the extracted data into a final string.
	// If this is not provided, the raw extracted data will be returned.
	Template *string
}

func (b0 OutputTransformer_builder) Build() *OutputTransformer {
	m0 := &OutputTransformer{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Format != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 3)
		x.xxx_hidden_Format = *b.Format
	}
	x.xxx_hidden_ExtractionRules = b.ExtractionRules
	if b.Template != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 3)
		x.xxx_hidden_Template = b.Template
	}
	return m0
}

// GrpcCallDefinition describes how to map an MCP call to a specific gRPC method.
type GrpcCallDefinition struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Service     *string                `protobuf:"bytes,1,opt,name=service"`
	xxx_hidden_Method      *string                `protobuf:"bytes,2,opt,name=method"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *GrpcCallDefinition) Reset() {
	*x = GrpcCallDefinition{}
	mi := &file_proto_config_v1_config_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GrpcCallDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrpcCallDefinition) ProtoMessage() {}

func (x *GrpcCallDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_proto_config_v1_config_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *GrpcCallDefinition) GetService() string {
	if x != nil {
		if x.xxx_hidden_Service != nil {
			return *x.xxx_hidden_Service
		}
		return ""
	}
	return ""
}

func (x *GrpcCallDefinition) GetMethod() string {
	if x != nil {
		if x.xxx_hidden_Method != nil {
			return *x.xxx_hidden_Method
		}
		return ""
	}
	return ""
}

func (x *GrpcCallDefinition) SetService(v string) {
	x.xxx_hidden_Service = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 2)
}

func (x *GrpcCallDefinition) SetMethod(v string) {
	x.xxx_hidden_Method = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 2)
}

func (x *GrpcCallDefinition) HasService() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *GrpcCallDefinition) HasMethod() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *GrpcCallDefinition) ClearService() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Service = nil
}

func (x *GrpcCallDefinition) ClearMethod() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Method = nil
}

type GrpcCallDefinition_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The fully-qualified gRPC service name.
	Service *string
	// The name of the gRPC method to call.
	Method *string
}

func (b0 GrpcCallDefinition_builder) Build() *GrpcCallDefinition {
	m0 := &GrpcCallDefinition{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Service != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 2)
		x.xxx_hidden_Service = b.Service
	}
	if b.Method != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 2)
		x.xxx_hidden_Method = b.Method
	}
	return m0
}

// OpenAPICallDefinition describes a call derived from an OpenAPI specification.
// This is often used for discovery rather than manual configuration.
type OpenAPICallDefinition struct {
	state                        protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_OperationId       *string                `protobuf:"bytes,1,opt,name=operation_id,json=operationId"`
	xxx_hidden_InputTransformer  *InputTransformer      `protobuf:"bytes,2,opt,name=input_transformer,json=inputTransformer"`
	xxx_hidden_OutputTransformer *OutputTransformer     `protobuf:"bytes,3,opt,name=output_transformer,json=outputTransformer"`
	XXX_raceDetectHookData       protoimpl.RaceDetectHookData
	XXX_presence                 [1]uint32
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

func (x *OpenAPICallDefinition) Reset() {
	*x = OpenAPICallDefinition{}
	mi := &file_proto_config_v1_config_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OpenAPICallDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenAPICallDefinition) ProtoMessage() {}

func (x *OpenAPICallDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_proto_config_v1_config_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *OpenAPICallDefinition) GetOperationId() string {
	if x != nil {
		if x.xxx_hidden_OperationId != nil {
			return *x.xxx_hidden_OperationId
		}
		return ""
	}
	return ""
}

func (x *OpenAPICallDefinition) GetInputTransformer() *InputTransformer {
	if x != nil {
		return x.xxx_hidden_InputTransformer
	}
	return nil
}

func (x *OpenAPICallDefinition) GetOutputTransformer() *OutputTransformer {
	if x != nil {
		return x.xxx_hidden_OutputTransformer
	}
	return nil
}

func (x *OpenAPICallDefinition) SetOperationId(v string) {
	x.xxx_hidden_OperationId = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 3)
}

func (x *OpenAPICallDefinition) SetInputTransformer(v *InputTransformer) {
	x.xxx_hidden_InputTransformer = v
}

func (x *OpenAPICallDefinition) SetOutputTransformer(v *OutputTransformer) {
	x.xxx_hidden_OutputTransformer = v
}

func (x *OpenAPICallDefinition) HasOperationId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *OpenAPICallDefinition) HasInputTransformer() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_InputTransformer != nil
}

func (x *OpenAPICallDefinition) HasOutputTransformer() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_OutputTransformer != nil
}

func (x *OpenAPICallDefinition) ClearOperationId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_OperationId = nil
}

func (x *OpenAPICallDefinition) ClearInputTransformer() {
	x.xxx_hidden_InputTransformer = nil
}

func (x *OpenAPICallDefinition) ClearOutputTransformer() {
	x.xxx_hidden_OutputTransformer = nil
}

type OpenAPICallDefinition_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// A unique identifier for this call, mapping to a tool name.
	OperationId *string
	// An optional input transformer to generate the request body.
	InputTransformer *InputTransformer
	// An optional output transformer to parse the response body.
	OutputTransformer *OutputTransformer
}

func (b0 OpenAPICallDefinition_builder) Build() *OpenAPICallDefinition {
	m0 := &OpenAPICallDefinition{}
	b, x := &b0, m0
	_, _ = b, x
	if b.OperationId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 3)
		x.xxx_hidden_OperationId = b.OperationId
	}
	x.xxx_hidden_InputTransformer = b.InputTransformer
	x.xxx_hidden_OutputTransformer = b.OutputTransformer
	return m0
}

// MCPCallDefinition describes how to map an MCP call to a specific MCP tool.
type MCPCallDefinition struct {
	state                        protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_ToolName          *string                `protobuf:"bytes,1,opt,name=tool_name,json=toolName"`
	xxx_hidden_InputTransformer  *InputTransformer      `protobuf:"bytes,2,opt,name=input_transformer,json=inputTransformer"`
	xxx_hidden_OutputTransformer *OutputTransformer     `protobuf:"bytes,3,opt,name=output_transformer,json=outputTransformer"`
	XXX_raceDetectHookData       protoimpl.RaceDetectHookData
	XXX_presence                 [1]uint32
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

func (x *MCPCallDefinition) Reset() {
	*x = MCPCallDefinition{}
	mi := &file_proto_config_v1_config_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MCPCallDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MCPCallDefinition) ProtoMessage() {}

func (x *MCPCallDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_proto_config_v1_config_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *MCPCallDefinition) GetToolName() string {
	if x != nil {
		if x.xxx_hidden_ToolName != nil {
			return *x.xxx_hidden_ToolName
		}
		return ""
	}
	return ""
}

func (x *MCPCallDefinition) GetInputTransformer() *InputTransformer {
	if x != nil {
		return x.xxx_hidden_InputTransformer
	}
	return nil
}

func (x *MCPCallDefinition) GetOutputTransformer() *OutputTransformer {
	if x != nil {
		return x.xxx_hidden_OutputTransformer
	}
	return nil
}

func (x *MCPCallDefinition) SetToolName(v string) {
	x.xxx_hidden_ToolName = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 3)
}

func (x *MCPCallDefinition) SetInputTransformer(v *InputTransformer) {
	x.xxx_hidden_InputTransformer = v
}

func (x *MCPCallDefinition) SetOutputTransformer(v *OutputTransformer) {
	x.xxx_hidden_OutputTransformer = v
}

func (x *MCPCallDefinition) HasToolName() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *MCPCallDefinition) HasInputTransformer() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_InputTransformer != nil
}

func (x *MCPCallDefinition) HasOutputTransformer() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_OutputTransformer != nil
}

func (x *MCPCallDefinition) ClearToolName() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_ToolName = nil
}

func (x *MCPCallDefinition) ClearInputTransformer() {
	x.xxx_hidden_InputTransformer = nil
}

func (x *MCPCallDefinition) ClearOutputTransformer() {
	x.xxx_hidden_OutputTransformer = nil
}

type MCPCallDefinition_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The name of the tool to apply the transformers to.
	ToolName *string
	// An optional input transformer to generate the request body.
	InputTransformer *InputTransformer
	// An optional output transformer to parse the response body.
	OutputTransformer *OutputTransformer
}

func (b0 MCPCallDefinition_builder) Build() *MCPCallDefinition {
	m0 := &MCPCallDefinition{}
	b, x := &b0, m0
	_, _ = b, x
	if b.ToolName != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 3)
		x.xxx_hidden_ToolName = b.ToolName
	}
	x.xxx_hidden_InputTransformer = b.InputTransformer
	x.xxx_hidden_OutputTransformer = b.OutputTransformer
	return m0
}

// HttpParameterMapping defines how to place an input parameter into an HTTP request.
type HttpParameterMapping struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Name        *string                `protobuf:"bytes,1,opt,name=name"`
	xxx_hidden_Schema      *ParameterSchema       `protobuf:"bytes,2,opt,name=schema"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *HttpParameterMapping) Reset() {
	*x = HttpParameterMapping{}
	mi := &file_proto_config_v1_config_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HttpParameterMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpParameterMapping) ProtoMessage() {}

func (x *HttpParameterMapping) ProtoReflect() protoreflect.Message {
	mi := &file_proto_config_v1_config_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *HttpParameterMapping) GetName() string {
	if x != nil {
		if x.xxx_hidden_Name != nil {
			return *x.xxx_hidden_Name
		}
		return ""
	}
	return ""
}

func (x *HttpParameterMapping) GetSchema() *ParameterSchema {
	if x != nil {
		return x.xxx_hidden_Schema
	}
	return nil
}

func (x *HttpParameterMapping) SetName(v string) {
	x.xxx_hidden_Name = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 2)
}

func (x *HttpParameterMapping) SetSchema(v *ParameterSchema) {
	x.xxx_hidden_Schema = v
}

func (x *HttpParameterMapping) HasName() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *HttpParameterMapping) HasSchema() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Schema != nil
}

func (x *HttpParameterMapping) ClearName() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Name = nil
}

func (x *HttpParameterMapping) ClearSchema() {
	x.xxx_hidden_Schema = nil
}

type HttpParameterMapping_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The name of the input parameter from the MCP call.
	Name *string
	// The schema for the parameter.
	Schema *ParameterSchema
}

func (b0 HttpParameterMapping_builder) Build() *HttpParameterMapping {
	m0 := &HttpParameterMapping{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Name != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 2)
		x.xxx_hidden_Name = b.Name
	}
	x.xxx_hidden_Schema = b.Schema
	return m0
}

// WebsocketParameterMapping defines how to place an input parameter into a websocket message.
type WebsocketParameterMapping struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Name        *string                `protobuf:"bytes,1,opt,name=name"`
	xxx_hidden_Schema      *ParameterSchema       `protobuf:"bytes,2,opt,name=schema"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *WebsocketParameterMapping) Reset() {
	*x = WebsocketParameterMapping{}
	mi := &file_proto_config_v1_config_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WebsocketParameterMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebsocketParameterMapping) ProtoMessage() {}

func (x *WebsocketParameterMapping) ProtoReflect() protoreflect.Message {
	mi := &file_proto_config_v1_config_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *WebsocketParameterMapping) GetName() string {
	if x != nil {
		if x.xxx_hidden_Name != nil {
			return *x.xxx_hidden_Name
		}
		return ""
	}
	return ""
}

func (x *WebsocketParameterMapping) GetSchema() *ParameterSchema {
	if x != nil {
		return x.xxx_hidden_Schema
	}
	return nil
}

func (x *WebsocketParameterMapping) SetName(v string) {
	x.xxx_hidden_Name = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 2)
}

func (x *WebsocketParameterMapping) SetSchema(v *ParameterSchema) {
	x.xxx_hidden_Schema = v
}

func (x *WebsocketParameterMapping) HasName() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *WebsocketParameterMapping) HasSchema() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Schema != nil
}

func (x *WebsocketParameterMapping) ClearName() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Name = nil
}

func (x *WebsocketParameterMapping) ClearSchema() {
	x.xxx_hidden_Schema = nil
}

type WebsocketParameterMapping_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The name of the input parameter from the MCP call.
	Name *string
	// The schema for the parameter.
	Schema *ParameterSchema
}

func (b0 WebsocketParameterMapping_builder) Build() *WebsocketParameterMapping {
	m0 := &WebsocketParameterMapping{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Name != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 2)
		x.xxx_hidden_Name = b.Name
	}
	x.xxx_hidden_Schema = b.Schema
	return m0
}

// WebrtcParameterMapping defines how to place an input parameter into a webrtc message.
type WebrtcParameterMapping struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Name        *string                `protobuf:"bytes,1,opt,name=name"`
	xxx_hidden_Schema      *ParameterSchema       `protobuf:"bytes,2,opt,name=schema"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *WebrtcParameterMapping) Reset() {
	*x = WebrtcParameterMapping{}
	mi := &file_proto_config_v1_config_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WebrtcParameterMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebrtcParameterMapping) ProtoMessage() {}

func (x *WebrtcParameterMapping) ProtoReflect() protoreflect.Message {
	mi := &file_proto_config_v1_config_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *WebrtcParameterMapping) GetName() string {
	if x != nil {
		if x.xxx_hidden_Name != nil {
			return *x.xxx_hidden_Name
		}
		return ""
	}
	return ""
}

func (x *WebrtcParameterMapping) GetSchema() *ParameterSchema {
	if x != nil {
		return x.xxx_hidden_Schema
	}
	return nil
}

func (x *WebrtcParameterMapping) SetName(v string) {
	x.xxx_hidden_Name = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 2)
}

func (x *WebrtcParameterMapping) SetSchema(v *ParameterSchema) {
	x.xxx_hidden_Schema = v
}

func (x *WebrtcParameterMapping) HasName() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *WebrtcParameterMapping) HasSchema() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Schema != nil
}

func (x *WebrtcParameterMapping) ClearName() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Name = nil
}

func (x *WebrtcParameterMapping) ClearSchema() {
	x.xxx_hidden_Schema = nil
}

type WebrtcParameterMapping_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The name of the input parameter from the MCP call.
	Name *string
	// The schema for the parameter.
	Schema *ParameterSchema
}

func (b0 WebrtcParameterMapping_builder) Build() *WebrtcParameterMapping {
	m0 := &WebrtcParameterMapping{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Name != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 2)
		x.xxx_hidden_Name = b.Name
	}
	x.xxx_hidden_Schema = b.Schema
	return m0
}

// StdioParameterMapping defines how to pass an input parameter to a stdio process.
type StdioParameterMapping struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Name        *string                `protobuf:"bytes,1,opt,name=name"`
	xxx_hidden_Schema      *ParameterSchema       `protobuf:"bytes,2,opt,name=schema"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *StdioParameterMapping) Reset() {
	*x = StdioParameterMapping{}
	mi := &file_proto_config_v1_config_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StdioParameterMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StdioParameterMapping) ProtoMessage() {}

func (x *StdioParameterMapping) ProtoReflect() protoreflect.Message {
	mi := &file_proto_config_v1_config_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *StdioParameterMapping) GetName() string {
	if x != nil {
		if x.xxx_hidden_Name != nil {
			return *x.xxx_hidden_Name
		}
		return ""
	}
	return ""
}

func (x *StdioParameterMapping) GetSchema() *ParameterSchema {
	if x != nil {
		return x.xxx_hidden_Schema
	}
	return nil
}

func (x *StdioParameterMapping) SetName(v string) {
	x.xxx_hidden_Name = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 2)
}

func (x *StdioParameterMapping) SetSchema(v *ParameterSchema) {
	x.xxx_hidden_Schema = v
}

func (x *StdioParameterMapping) HasName() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *StdioParameterMapping) HasSchema() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Schema != nil
}

func (x *StdioParameterMapping) ClearName() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Name = nil
}

func (x *StdioParameterMapping) ClearSchema() {
	x.xxx_hidden_Schema = nil
}

type StdioParameterMapping_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The name of the input parameter from the MCP call.
	Name *string
	// The schema for the parameter.
	Schema *ParameterSchema
}

func (b0 StdioParameterMapping_builder) Build() *StdioParameterMapping {
	m0 := &StdioParameterMapping{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Name != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 2)
		x.xxx_hidden_Name = b.Name
	}
	x.xxx_hidden_Schema = b.Schema
	return m0
}

// ConnectionPoolConfig defines settings for managing a pool of connections to an upstream service.
type ConnectionPoolConfig struct {
	state                         protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_MaxConnections     int32                  `protobuf:"varint,1,opt,name=max_connections,json=maxConnections"`
	xxx_hidden_MaxIdleConnections int32                  `protobuf:"varint,2,opt,name=max_idle_connections,json=maxIdleConnections"`
	xxx_hidden_IdleTimeout        *durationpb.Duration   `protobuf:"bytes,3,opt,name=idle_timeout,json=idleTimeout"`
	XXX_raceDetectHookData        protoimpl.RaceDetectHookData
	XXX_presence                  [1]uint32
	unknownFields                 protoimpl.UnknownFields
	sizeCache                     protoimpl.SizeCache
}

func (x *ConnectionPoolConfig) Reset() {
	*x = ConnectionPoolConfig{}
	mi := &file_proto_config_v1_config_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectionPoolConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionPoolConfig) ProtoMessage() {}

func (x *ConnectionPoolConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_config_v1_config_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ConnectionPoolConfig) GetMaxConnections() int32 {
	if x != nil {
		return x.xxx_hidden_MaxConnections
	}
	return 0
}

func (x *ConnectionPoolConfig) GetMaxIdleConnections() int32 {
	if x != nil {
		return x.xxx_hidden_MaxIdleConnections
	}
	return 0
}

func (x *ConnectionPoolConfig) GetIdleTimeout() *durationpb.Duration {
	if x != nil {
		return x.xxx_hidden_IdleTimeout
	}
	return nil
}

func (x *ConnectionPoolConfig) SetMaxConnections(v int32) {
	x.xxx_hidden_MaxConnections = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 3)
}

func (x *ConnectionPoolConfig) SetMaxIdleConnections(v int32) {
	x.xxx_hidden_MaxIdleConnections = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 3)
}

func (x *ConnectionPoolConfig) SetIdleTimeout(v *durationpb.Duration) {
	x.xxx_hidden_IdleTimeout = v
}

func (x *ConnectionPoolConfig) HasMaxConnections() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *ConnectionPoolConfig) HasMaxIdleConnections() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *ConnectionPoolConfig) HasIdleTimeout() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_IdleTimeout != nil
}

func (x *ConnectionPoolConfig) ClearMaxConnections() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_MaxConnections = 0
}

func (x *ConnectionPoolConfig) ClearMaxIdleConnections() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_MaxIdleConnections = 0
}

func (x *ConnectionPoolConfig) ClearIdleTimeout() {
	x.xxx_hidden_IdleTimeout = nil
}

type ConnectionPoolConfig_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The maximum number of simultaneous connections to allow to the upstream service.
	MaxConnections *int32
	// The maximum number of idle connections to keep in the pool.
	MaxIdleConnections *int32
	// The duration a connection can remain idle in the pool before being closed.
	IdleTimeout *durationpb.Duration
}

func (b0 ConnectionPoolConfig_builder) Build() *ConnectionPoolConfig {
	m0 := &ConnectionPoolConfig{}
	b, x := &b0, m0
	_, _ = b, x
	if b.MaxConnections != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 3)
		x.xxx_hidden_MaxConnections = *b.MaxConnections
	}
	if b.MaxIdleConnections != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 3)
		x.xxx_hidden_MaxIdleConnections = *b.MaxIdleConnections
	}
	x.xxx_hidden_IdleTimeout = b.IdleTimeout
	return m0
}

// Defines a health check for an HTTP-based service.
type HttpHealthCheck struct {
	state                                   protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Url                          *string                `protobuf:"bytes,1,opt,name=url"`
	xxx_hidden_ExpectedCode                 int32                  `protobuf:"varint,2,opt,name=expected_code,json=expectedCode"`
	xxx_hidden_ExpectedResponseBodyContains *string                `protobuf:"bytes,3,opt,name=expected_response_body_contains,json=expectedResponseBodyContains"`
	xxx_hidden_Interval                     *durationpb.Duration   `protobuf:"bytes,4,opt,name=interval"`
	xxx_hidden_Timeout                      *durationpb.Duration   `protobuf:"bytes,5,opt,name=timeout"`
	XXX_raceDetectHookData                  protoimpl.RaceDetectHookData
	XXX_presence                            [1]uint32
	unknownFields                           protoimpl.UnknownFields
	sizeCache                               protoimpl.SizeCache
}

func (x *HttpHealthCheck) Reset() {
	*x = HttpHealthCheck{}
	mi := &file_proto_config_v1_config_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HttpHealthCheck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpHealthCheck) ProtoMessage() {}

func (x *HttpHealthCheck) ProtoReflect() protoreflect.Message {
	mi := &file_proto_config_v1_config_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *HttpHealthCheck) GetUrl() string {
	if x != nil {
		if x.xxx_hidden_Url != nil {
			return *x.xxx_hidden_Url
		}
		return ""
	}
	return ""
}

func (x *HttpHealthCheck) GetExpectedCode() int32 {
	if x != nil {
		return x.xxx_hidden_ExpectedCode
	}
	return 0
}

func (x *HttpHealthCheck) GetExpectedResponseBodyContains() string {
	if x != nil {
		if x.xxx_hidden_ExpectedResponseBodyContains != nil {
			return *x.xxx_hidden_ExpectedResponseBodyContains
		}
		return ""
	}
	return ""
}

func (x *HttpHealthCheck) GetInterval() *durationpb.Duration {
	if x != nil {
		return x.xxx_hidden_Interval
	}
	return nil
}

func (x *HttpHealthCheck) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.xxx_hidden_Timeout
	}
	return nil
}

func (x *HttpHealthCheck) SetUrl(v string) {
	x.xxx_hidden_Url = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 5)
}

func (x *HttpHealthCheck) SetExpectedCode(v int32) {
	x.xxx_hidden_ExpectedCode = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 5)
}

func (x *HttpHealthCheck) SetExpectedResponseBodyContains(v string) {
	x.xxx_hidden_ExpectedResponseBodyContains = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 5)
}

func (x *HttpHealthCheck) SetInterval(v *durationpb.Duration) {
	x.xxx_hidden_Interval = v
}

func (x *HttpHealthCheck) SetTimeout(v *durationpb.Duration) {
	x.xxx_hidden_Timeout = v
}

func (x *HttpHealthCheck) HasUrl() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *HttpHealthCheck) HasExpectedCode() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *HttpHealthCheck) HasExpectedResponseBodyContains() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *HttpHealthCheck) HasInterval() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Interval != nil
}

func (x *HttpHealthCheck) HasTimeout() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Timeout != nil
}

func (x *HttpHealthCheck) ClearUrl() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Url = nil
}

func (x *HttpHealthCheck) ClearExpectedCode() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_ExpectedCode = 0
}

func (x *HttpHealthCheck) ClearExpectedResponseBodyContains() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_ExpectedResponseBodyContains = nil
}

func (x *HttpHealthCheck) ClearInterval() {
	x.xxx_hidden_Interval = nil
}

func (x *HttpHealthCheck) ClearTimeout() {
	x.xxx_hidden_Timeout = nil
}

type HttpHealthCheck_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The full URL to send the health check request to.
	Url *string
	// The expected HTTP status code for a successful health check. Defaults to 200.
	ExpectedCode *int32
	// Optional: A substring that must be present in the response body for the check to pass.
	ExpectedResponseBodyContains *string
	// How often to perform the health check.
	Interval *durationpb.Duration
	// The timeout for each health check attempt.
	Timeout *durationpb.Duration
}

func (b0 HttpHealthCheck_builder) Build() *HttpHealthCheck {
	m0 := &HttpHealthCheck{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Url != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 5)
		x.xxx_hidden_Url = b.Url
	}
	if b.ExpectedCode != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 5)
		x.xxx_hidden_ExpectedCode = *b.ExpectedCode
	}
	if b.ExpectedResponseBodyContains != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 5)
		x.xxx_hidden_ExpectedResponseBodyContains = b.ExpectedResponseBodyContains
	}
	x.xxx_hidden_Interval = b.Interval
	x.xxx_hidden_Timeout = b.Timeout
	return m0
}

// Defines a health check for a gRPC-based service.
type GrpcHealthCheck struct {
	state                       protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Service          *string                `protobuf:"bytes,1,opt,name=service"`
	xxx_hidden_Method           *string                `protobuf:"bytes,2,opt,name=method"`
	xxx_hidden_Request          *string                `protobuf:"bytes,3,opt,name=request"`
	xxx_hidden_ExpectedResponse *string                `protobuf:"bytes,4,opt,name=expected_response,json=expectedResponse"`
	xxx_hidden_Insecure         bool                   `protobuf:"varint,5,opt,name=insecure"`
	xxx_hidden_Interval         *durationpb.Duration   `protobuf:"bytes,6,opt,name=interval"`
	xxx_hidden_Timeout          *durationpb.Duration   `protobuf:"bytes,7,opt,name=timeout"`
	XXX_raceDetectHookData      protoimpl.RaceDetectHookData
	XXX_presence                [1]uint32
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *GrpcHealthCheck) Reset() {
	*x = GrpcHealthCheck{}
	mi := &file_proto_config_v1_config_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GrpcHealthCheck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrpcHealthCheck) ProtoMessage() {}

func (x *GrpcHealthCheck) ProtoReflect() protoreflect.Message {
	mi := &file_proto_config_v1_config_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *GrpcHealthCheck) GetService() string {
	if x != nil {
		if x.xxx_hidden_Service != nil {
			return *x.xxx_hidden_Service
		}
		return ""
	}
	return ""
}

func (x *GrpcHealthCheck) GetMethod() string {
	if x != nil {
		if x.xxx_hidden_Method != nil {
			return *x.xxx_hidden_Method
		}
		return ""
	}
	return ""
}

func (x *GrpcHealthCheck) GetRequest() string {
	if x != nil {
		if x.xxx_hidden_Request != nil {
			return *x.xxx_hidden_Request
		}
		return ""
	}
	return ""
}

func (x *GrpcHealthCheck) GetExpectedResponse() string {
	if x != nil {
		if x.xxx_hidden_ExpectedResponse != nil {
			return *x.xxx_hidden_ExpectedResponse
		}
		return ""
	}
	return ""
}

func (x *GrpcHealthCheck) GetInsecure() bool {
	if x != nil {
		return x.xxx_hidden_Insecure
	}
	return false
}

func (x *GrpcHealthCheck) GetInterval() *durationpb.Duration {
	if x != nil {
		return x.xxx_hidden_Interval
	}
	return nil
}

func (x *GrpcHealthCheck) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.xxx_hidden_Timeout
	}
	return nil
}

func (x *GrpcHealthCheck) SetService(v string) {
	x.xxx_hidden_Service = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 7)
}

func (x *GrpcHealthCheck) SetMethod(v string) {
	x.xxx_hidden_Method = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 7)
}

func (x *GrpcHealthCheck) SetRequest(v string) {
	x.xxx_hidden_Request = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 7)
}

func (x *GrpcHealthCheck) SetExpectedResponse(v string) {
	x.xxx_hidden_ExpectedResponse = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 7)
}

func (x *GrpcHealthCheck) SetInsecure(v bool) {
	x.xxx_hidden_Insecure = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 7)
}

func (x *GrpcHealthCheck) SetInterval(v *durationpb.Duration) {
	x.xxx_hidden_Interval = v
}

func (x *GrpcHealthCheck) SetTimeout(v *durationpb.Duration) {
	x.xxx_hidden_Timeout = v
}

func (x *GrpcHealthCheck) HasService() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *GrpcHealthCheck) HasMethod() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *GrpcHealthCheck) HasRequest() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *GrpcHealthCheck) HasExpectedResponse() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *GrpcHealthCheck) HasInsecure() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *GrpcHealthCheck) HasInterval() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Interval != nil
}

func (x *GrpcHealthCheck) HasTimeout() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Timeout != nil
}

func (x *GrpcHealthCheck) ClearService() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Service = nil
}

func (x *GrpcHealthCheck) ClearMethod() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Method = nil
}

func (x *GrpcHealthCheck) ClearRequest() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_Request = nil
}

func (x *GrpcHealthCheck) ClearExpectedResponse() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_ExpectedResponse = nil
}

func (x *GrpcHealthCheck) ClearInsecure() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_Insecure = false
}

func (x *GrpcHealthCheck) ClearInterval() {
	x.xxx_hidden_Interval = nil
}

func (x *GrpcHealthCheck) ClearTimeout() {
	x.xxx_hidden_Timeout = nil
}

type GrpcHealthCheck_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The gRPC service name to check (e.g., "grpc.health.v1.Health").
	Service *string
	// The gRPC method to call.
	Method *string
	// A JSON string representing the request message.
	Request *string
	// A JSON string representing the expected response message.
	ExpectedResponse *string
	// Set to true if connecting to the gRPC service without TLS.
	Insecure *bool
	// How often to perform the health check.
	Interval *durationpb.Duration
	// The timeout for each health check attempt.
	Timeout *durationpb.Duration
}

func (b0 GrpcHealthCheck_builder) Build() *GrpcHealthCheck {
	m0 := &GrpcHealthCheck{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Service != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 7)
		x.xxx_hidden_Service = b.Service
	}
	if b.Method != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 7)
		x.xxx_hidden_Method = b.Method
	}
	if b.Request != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 7)
		x.xxx_hidden_Request = b.Request
	}
	if b.ExpectedResponse != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 7)
		x.xxx_hidden_ExpectedResponse = b.ExpectedResponse
	}
	if b.Insecure != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 7)
		x.xxx_hidden_Insecure = *b.Insecure
	}
	x.xxx_hidden_Interval = b.Interval
	x.xxx_hidden_Timeout = b.Timeout
	return m0
}

// Defines a health check for a stdio-based service.
type StdioHealthCheck struct {
	state                               protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Method                   *string                `protobuf:"bytes,1,opt,name=method"`
	xxx_hidden_Prompt                   *string                `protobuf:"bytes,2,opt,name=prompt"`
	xxx_hidden_ExpectedResponseContains *string                `protobuf:"bytes,3,opt,name=expected_response_contains,json=expectedResponseContains"`
	xxx_hidden_Interval                 *durationpb.Duration   `protobuf:"bytes,4,opt,name=interval"`
	xxx_hidden_Timeout                  *durationpb.Duration   `protobuf:"bytes,5,opt,name=timeout"`
	XXX_raceDetectHookData              protoimpl.RaceDetectHookData
	XXX_presence                        [1]uint32
	unknownFields                       protoimpl.UnknownFields
	sizeCache                           protoimpl.SizeCache
}

func (x *StdioHealthCheck) Reset() {
	*x = StdioHealthCheck{}
	mi := &file_proto_config_v1_config_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StdioHealthCheck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StdioHealthCheck) ProtoMessage() {}

func (x *StdioHealthCheck) ProtoReflect() protoreflect.Message {
	mi := &file_proto_config_v1_config_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *StdioHealthCheck) GetMethod() string {
	if x != nil {
		if x.xxx_hidden_Method != nil {
			return *x.xxx_hidden_Method
		}
		return ""
	}
	return ""
}

func (x *StdioHealthCheck) GetPrompt() string {
	if x != nil {
		if x.xxx_hidden_Prompt != nil {
			return *x.xxx_hidden_Prompt
		}
		return ""
	}
	return ""
}

func (x *StdioHealthCheck) GetExpectedResponseContains() string {
	if x != nil {
		if x.xxx_hidden_ExpectedResponseContains != nil {
			return *x.xxx_hidden_ExpectedResponseContains
		}
		return ""
	}
	return ""
}

func (x *StdioHealthCheck) GetInterval() *durationpb.Duration {
	if x != nil {
		return x.xxx_hidden_Interval
	}
	return nil
}

func (x *StdioHealthCheck) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.xxx_hidden_Timeout
	}
	return nil
}

func (x *StdioHealthCheck) SetMethod(v string) {
	x.xxx_hidden_Method = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 5)
}

func (x *StdioHealthCheck) SetPrompt(v string) {
	x.xxx_hidden_Prompt = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 5)
}

func (x *StdioHealthCheck) SetExpectedResponseContains(v string) {
	x.xxx_hidden_ExpectedResponseContains = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 5)
}

func (x *StdioHealthCheck) SetInterval(v *durationpb.Duration) {
	x.xxx_hidden_Interval = v
}

func (x *StdioHealthCheck) SetTimeout(v *durationpb.Duration) {
	x.xxx_hidden_Timeout = v
}

func (x *StdioHealthCheck) HasMethod() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *StdioHealthCheck) HasPrompt() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *StdioHealthCheck) HasExpectedResponseContains() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *StdioHealthCheck) HasInterval() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Interval != nil
}

func (x *StdioHealthCheck) HasTimeout() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Timeout != nil
}

func (x *StdioHealthCheck) ClearMethod() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Method = nil
}

func (x *StdioHealthCheck) ClearPrompt() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Prompt = nil
}

func (x *StdioHealthCheck) ClearExpectedResponseContains() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_ExpectedResponseContains = nil
}

func (x *StdioHealthCheck) ClearInterval() {
	x.xxx_hidden_Interval = nil
}

func (x *StdioHealthCheck) ClearTimeout() {
	x.xxx_hidden_Timeout = nil
}

type StdioHealthCheck_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The method or command to send to the stdio service for the health check.
	Method *string
	// The input/prompt to send to the service.
	Prompt *string
	// A substring expected in the service's output for the check to pass.
	ExpectedResponseContains *string
	// How often to perform the health check.
	Interval *durationpb.Duration
	// The timeout for each health check attempt.
	Timeout *durationpb.Duration
}

func (b0 StdioHealthCheck_builder) Build() *StdioHealthCheck {
	m0 := &StdioHealthCheck{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Method != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 5)
		x.xxx_hidden_Method = b.Method
	}
	if b.Prompt != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 5)
		x.xxx_hidden_Prompt = b.Prompt
	}
	if b.ExpectedResponseContains != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 5)
		x.xxx_hidden_ExpectedResponseContains = b.ExpectedResponseContains
	}
	x.xxx_hidden_Interval = b.Interval
	x.xxx_hidden_Timeout = b.Timeout
	return m0
}

// Configuration for rate limiting requests to the upstream service.
type RateLimitConfig struct {
	state                        protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_IsEnabled         bool                   `protobuf:"varint,1,opt,name=is_enabled,json=isEnabled"`
	xxx_hidden_RequestsPerSecond float64                `protobuf:"fixed64,2,opt,name=requests_per_second,json=requestsPerSecond"`
	xxx_hidden_Burst             int64                  `protobuf:"varint,3,opt,name=burst"`
	XXX_raceDetectHookData       protoimpl.RaceDetectHookData
	XXX_presence                 [1]uint32
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

func (x *RateLimitConfig) Reset() {
	*x = RateLimitConfig{}
	mi := &file_proto_config_v1_config_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RateLimitConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateLimitConfig) ProtoMessage() {}

func (x *RateLimitConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_config_v1_config_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *RateLimitConfig) GetIsEnabled() bool {
	if x != nil {
		return x.xxx_hidden_IsEnabled
	}
	return false
}

func (x *RateLimitConfig) GetRequestsPerSecond() float64 {
	if x != nil {
		return x.xxx_hidden_RequestsPerSecond
	}
	return 0
}

func (x *RateLimitConfig) GetBurst() int64 {
	if x != nil {
		return x.xxx_hidden_Burst
	}
	return 0
}

func (x *RateLimitConfig) SetIsEnabled(v bool) {
	x.xxx_hidden_IsEnabled = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 3)
}

func (x *RateLimitConfig) SetRequestsPerSecond(v float64) {
	x.xxx_hidden_RequestsPerSecond = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 3)
}

func (x *RateLimitConfig) SetBurst(v int64) {
	x.xxx_hidden_Burst = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 3)
}

func (x *RateLimitConfig) HasIsEnabled() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *RateLimitConfig) HasRequestsPerSecond() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *RateLimitConfig) HasBurst() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *RateLimitConfig) ClearIsEnabled() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_IsEnabled = false
}

func (x *RateLimitConfig) ClearRequestsPerSecond() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_RequestsPerSecond = 0
}

func (x *RateLimitConfig) ClearBurst() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_Burst = 0
}

type RateLimitConfig_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Whether rate limiting is enabled.
	IsEnabled *bool
	// The maximum number of requests allowed per second.
	RequestsPerSecond *float64
	// The number of requests that can be allowed in a short burst.
	Burst *int64
}

func (b0 RateLimitConfig_builder) Build() *RateLimitConfig {
	m0 := &RateLimitConfig{}
	b, x := &b0, m0
	_, _ = b, x
	if b.IsEnabled != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 3)
		x.xxx_hidden_IsEnabled = *b.IsEnabled
	}
	if b.RequestsPerSecond != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 3)
		x.xxx_hidden_RequestsPerSecond = *b.RequestsPerSecond
	}
	if b.Burst != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 3)
		x.xxx_hidden_Burst = *b.Burst
	}
	return m0
}

// Configuration for caching responses from the upstream service.
type CacheConfig struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_IsEnabled   bool                   `protobuf:"varint,1,opt,name=is_enabled,json=isEnabled"`
	xxx_hidden_Ttl         *durationpb.Duration   `protobuf:"bytes,2,opt,name=ttl"`
	xxx_hidden_Strategy    *string                `protobuf:"bytes,3,opt,name=strategy"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *CacheConfig) Reset() {
	*x = CacheConfig{}
	mi := &file_proto_config_v1_config_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CacheConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CacheConfig) ProtoMessage() {}

func (x *CacheConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_config_v1_config_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *CacheConfig) GetIsEnabled() bool {
	if x != nil {
		return x.xxx_hidden_IsEnabled
	}
	return false
}

func (x *CacheConfig) GetTtl() *durationpb.Duration {
	if x != nil {
		return x.xxx_hidden_Ttl
	}
	return nil
}

func (x *CacheConfig) GetStrategy() string {
	if x != nil {
		if x.xxx_hidden_Strategy != nil {
			return *x.xxx_hidden_Strategy
		}
		return ""
	}
	return ""
}

func (x *CacheConfig) SetIsEnabled(v bool) {
	x.xxx_hidden_IsEnabled = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 3)
}

func (x *CacheConfig) SetTtl(v *durationpb.Duration) {
	x.xxx_hidden_Ttl = v
}

func (x *CacheConfig) SetStrategy(v string) {
	x.xxx_hidden_Strategy = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 3)
}

func (x *CacheConfig) HasIsEnabled() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *CacheConfig) HasTtl() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Ttl != nil
}

func (x *CacheConfig) HasStrategy() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *CacheConfig) ClearIsEnabled() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_IsEnabled = false
}

func (x *CacheConfig) ClearTtl() {
	x.xxx_hidden_Ttl = nil
}

func (x *CacheConfig) ClearStrategy() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_Strategy = nil
}

type CacheConfig_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Whether caching is enabled.
	IsEnabled *bool
	// The duration for which a cached response is considered valid.
	Ttl *durationpb.Duration
	// Caching strategy (e.g., "lru", "lfu"). This allows for future expansion.
	Strategy *string
}

func (b0 CacheConfig_builder) Build() *CacheConfig {
	m0 := &CacheConfig{}
	b, x := &b0, m0
	_, _ = b, x
	if b.IsEnabled != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 3)
		x.xxx_hidden_IsEnabled = *b.IsEnabled
	}
	x.xxx_hidden_Ttl = b.Ttl
	if b.Strategy != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 3)
		x.xxx_hidden_Strategy = b.Strategy
	}
	return m0
}

// Configuration for service resilience features like circuit breakers and retries.
type ResilienceConfig struct {
	state                     protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_CircuitBreaker *CircuitBreakerConfig  `protobuf:"bytes,1,opt,name=circuit_breaker,json=circuitBreaker"`
	xxx_hidden_RetryPolicy    *RetryConfig           `protobuf:"bytes,2,opt,name=retry_policy,json=retryPolicy"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *ResilienceConfig) Reset() {
	*x = ResilienceConfig{}
	mi := &file_proto_config_v1_config_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResilienceConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResilienceConfig) ProtoMessage() {}

func (x *ResilienceConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_config_v1_config_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ResilienceConfig) GetCircuitBreaker() *CircuitBreakerConfig {
	if x != nil {
		return x.xxx_hidden_CircuitBreaker
	}
	return nil
}

func (x *ResilienceConfig) GetRetryPolicy() *RetryConfig {
	if x != nil {
		return x.xxx_hidden_RetryPolicy
	}
	return nil
}

func (x *ResilienceConfig) SetCircuitBreaker(v *CircuitBreakerConfig) {
	x.xxx_hidden_CircuitBreaker = v
}

func (x *ResilienceConfig) SetRetryPolicy(v *RetryConfig) {
	x.xxx_hidden_RetryPolicy = v
}

func (x *ResilienceConfig) HasCircuitBreaker() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_CircuitBreaker != nil
}

func (x *ResilienceConfig) HasRetryPolicy() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_RetryPolicy != nil
}

func (x *ResilienceConfig) ClearCircuitBreaker() {
	x.xxx_hidden_CircuitBreaker = nil
}

func (x *ResilienceConfig) ClearRetryPolicy() {
	x.xxx_hidden_RetryPolicy = nil
}

type ResilienceConfig_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Circuit breaker configuration to prevent repeated calls to a failing service.
	CircuitBreaker *CircuitBreakerConfig
	// Retry policy for failed requests.
	RetryPolicy *RetryConfig
}

func (b0 ResilienceConfig_builder) Build() *ResilienceConfig {
	m0 := &ResilienceConfig{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_CircuitBreaker = b.CircuitBreaker
	x.xxx_hidden_RetryPolicy = b.RetryPolicy
	return m0
}

// CircuitBreakerConfig defines the parameters for the circuit breaker pattern.
type CircuitBreakerConfig struct {
	state                           protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_FailureRateThreshold float64                `protobuf:"fixed64,1,opt,name=failure_rate_threshold,json=failureRateThreshold"`
	xxx_hidden_ConsecutiveFailures  int32                  `protobuf:"varint,2,opt,name=consecutive_failures,json=consecutiveFailures"`
	xxx_hidden_OpenDuration         *durationpb.Duration   `protobuf:"bytes,3,opt,name=open_duration,json=openDuration"`
	xxx_hidden_HalfOpenRequests     int32                  `protobuf:"varint,4,opt,name=half_open_requests,json=halfOpenRequests"`
	XXX_raceDetectHookData          protoimpl.RaceDetectHookData
	XXX_presence                    [1]uint32
	unknownFields                   protoimpl.UnknownFields
	sizeCache                       protoimpl.SizeCache
}

func (x *CircuitBreakerConfig) Reset() {
	*x = CircuitBreakerConfig{}
	mi := &file_proto_config_v1_config_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CircuitBreakerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CircuitBreakerConfig) ProtoMessage() {}

func (x *CircuitBreakerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_config_v1_config_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *CircuitBreakerConfig) GetFailureRateThreshold() float64 {
	if x != nil {
		return x.xxx_hidden_FailureRateThreshold
	}
	return 0
}

func (x *CircuitBreakerConfig) GetConsecutiveFailures() int32 {
	if x != nil {
		return x.xxx_hidden_ConsecutiveFailures
	}
	return 0
}

func (x *CircuitBreakerConfig) GetOpenDuration() *durationpb.Duration {
	if x != nil {
		return x.xxx_hidden_OpenDuration
	}
	return nil
}

func (x *CircuitBreakerConfig) GetHalfOpenRequests() int32 {
	if x != nil {
		return x.xxx_hidden_HalfOpenRequests
	}
	return 0
}

func (x *CircuitBreakerConfig) SetFailureRateThreshold(v float64) {
	x.xxx_hidden_FailureRateThreshold = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 4)
}

func (x *CircuitBreakerConfig) SetConsecutiveFailures(v int32) {
	x.xxx_hidden_ConsecutiveFailures = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 4)
}

func (x *CircuitBreakerConfig) SetOpenDuration(v *durationpb.Duration) {
	x.xxx_hidden_OpenDuration = v
}

func (x *CircuitBreakerConfig) SetHalfOpenRequests(v int32) {
	x.xxx_hidden_HalfOpenRequests = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 4)
}

func (x *CircuitBreakerConfig) HasFailureRateThreshold() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *CircuitBreakerConfig) HasConsecutiveFailures() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *CircuitBreakerConfig) HasOpenDuration() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_OpenDuration != nil
}

func (x *CircuitBreakerConfig) HasHalfOpenRequests() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *CircuitBreakerConfig) ClearFailureRateThreshold() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_FailureRateThreshold = 0
}

func (x *CircuitBreakerConfig) ClearConsecutiveFailures() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_ConsecutiveFailures = 0
}

func (x *CircuitBreakerConfig) ClearOpenDuration() {
	x.xxx_hidden_OpenDuration = nil
}

func (x *CircuitBreakerConfig) ClearHalfOpenRequests() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_HalfOpenRequests = 0
}

type CircuitBreakerConfig_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// If the failure rate exceeds this threshold, the circuit opens. (e.g., 0.5 for 50%)
	FailureRateThreshold *float64
	// The number of consecutive failures required to open the circuit.
	ConsecutiveFailures *int32
	// The duration the circuit remains open before transitioning to half-open.
	OpenDuration *durationpb.Duration
	// The number of requests to allow in the half-open state to test for recovery.
	HalfOpenRequests *int32
}

func (b0 CircuitBreakerConfig_builder) Build() *CircuitBreakerConfig {
	m0 := &CircuitBreakerConfig{}
	b, x := &b0, m0
	_, _ = b, x
	if b.FailureRateThreshold != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 4)
		x.xxx_hidden_FailureRateThreshold = *b.FailureRateThreshold
	}
	if b.ConsecutiveFailures != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 4)
		x.xxx_hidden_ConsecutiveFailures = *b.ConsecutiveFailures
	}
	x.xxx_hidden_OpenDuration = b.OpenDuration
	if b.HalfOpenRequests != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 4)
		x.xxx_hidden_HalfOpenRequests = *b.HalfOpenRequests
	}
	return m0
}

// RetryConfig defines the parameters for retrying failed requests.
type RetryConfig struct {
	state                      protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_NumberOfRetries int32                  `protobuf:"varint,1,opt,name=number_of_retries,json=numberOfRetries"`
	xxx_hidden_BaseBackoff     *durationpb.Duration   `protobuf:"bytes,2,opt,name=base_backoff,json=baseBackoff"`
	xxx_hidden_MaxBackoff      *durationpb.Duration   `protobuf:"bytes,3,opt,name=max_backoff,json=maxBackoff"`
	XXX_raceDetectHookData     protoimpl.RaceDetectHookData
	XXX_presence               [1]uint32
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *RetryConfig) Reset() {
	*x = RetryConfig{}
	mi := &file_proto_config_v1_config_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RetryConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetryConfig) ProtoMessage() {}

func (x *RetryConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_config_v1_config_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *RetryConfig) GetNumberOfRetries() int32 {
	if x != nil {
		return x.xxx_hidden_NumberOfRetries
	}
	return 0
}

func (x *RetryConfig) GetBaseBackoff() *durationpb.Duration {
	if x != nil {
		return x.xxx_hidden_BaseBackoff
	}
	return nil
}

func (x *RetryConfig) GetMaxBackoff() *durationpb.Duration {
	if x != nil {
		return x.xxx_hidden_MaxBackoff
	}
	return nil
}

func (x *RetryConfig) SetNumberOfRetries(v int32) {
	x.xxx_hidden_NumberOfRetries = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 3)
}

func (x *RetryConfig) SetBaseBackoff(v *durationpb.Duration) {
	x.xxx_hidden_BaseBackoff = v
}

func (x *RetryConfig) SetMaxBackoff(v *durationpb.Duration) {
	x.xxx_hidden_MaxBackoff = v
}

func (x *RetryConfig) HasNumberOfRetries() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *RetryConfig) HasBaseBackoff() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_BaseBackoff != nil
}

func (x *RetryConfig) HasMaxBackoff() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_MaxBackoff != nil
}

func (x *RetryConfig) ClearNumberOfRetries() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_NumberOfRetries = 0
}

func (x *RetryConfig) ClearBaseBackoff() {
	x.xxx_hidden_BaseBackoff = nil
}

func (x *RetryConfig) ClearMaxBackoff() {
	x.xxx_hidden_MaxBackoff = nil
}

type RetryConfig_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The number of times to retry a failed request.
	NumberOfRetries *int32
	// The base duration for the backoff between retries.
	BaseBackoff *durationpb.Duration
	// The maximum duration for the backoff.
	MaxBackoff *durationpb.Duration
}

func (b0 RetryConfig_builder) Build() *RetryConfig {
	m0 := &RetryConfig{}
	b, x := &b0, m0
	_, _ = b, x
	if b.NumberOfRetries != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 3)
		x.xxx_hidden_NumberOfRetries = *b.NumberOfRetries
	}
	x.xxx_hidden_BaseBackoff = b.BaseBackoff
	x.xxx_hidden_MaxBackoff = b.MaxBackoff
	return m0
}

// AuthenticationConfig specifies the authentication method to use.
type AuthenticationConfig struct {
	state                 protoimpl.MessageState            `protogen:"opaque.v1"`
	xxx_hidden_AuthMethod isAuthenticationConfig_AuthMethod `protobuf_oneof:"auth_method"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *AuthenticationConfig) Reset() {
	*x = AuthenticationConfig{}
	mi := &file_proto_config_v1_config_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthenticationConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticationConfig) ProtoMessage() {}

func (x *AuthenticationConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_config_v1_config_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *AuthenticationConfig) GetApiKey() *APIKeyAuth {
	if x != nil {
		if x, ok := x.xxx_hidden_AuthMethod.(*authenticationConfig_ApiKey); ok {
			return x.ApiKey
		}
	}
	return nil
}

func (x *AuthenticationConfig) GetOauth2() *OAuth2Auth {
	if x != nil {
		if x, ok := x.xxx_hidden_AuthMethod.(*authenticationConfig_Oauth2); ok {
			return x.Oauth2
		}
	}
	return nil
}

func (x *AuthenticationConfig) SetApiKey(v *APIKeyAuth) {
	if v == nil {
		x.xxx_hidden_AuthMethod = nil
		return
	}
	x.xxx_hidden_AuthMethod = &authenticationConfig_ApiKey{v}
}

func (x *AuthenticationConfig) SetOauth2(v *OAuth2Auth) {
	if v == nil {
		x.xxx_hidden_AuthMethod = nil
		return
	}
	x.xxx_hidden_AuthMethod = &authenticationConfig_Oauth2{v}
}

func (x *AuthenticationConfig) HasAuthMethod() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_AuthMethod != nil
}

func (x *AuthenticationConfig) HasApiKey() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_AuthMethod.(*authenticationConfig_ApiKey)
	return ok
}

func (x *AuthenticationConfig) HasOauth2() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_AuthMethod.(*authenticationConfig_Oauth2)
	return ok
}

func (x *AuthenticationConfig) ClearAuthMethod() {
	x.xxx_hidden_AuthMethod = nil
}

func (x *AuthenticationConfig) ClearApiKey() {
	if _, ok := x.xxx_hidden_AuthMethod.(*authenticationConfig_ApiKey); ok {
		x.xxx_hidden_AuthMethod = nil
	}
}

func (x *AuthenticationConfig) ClearOauth2() {
	if _, ok := x.xxx_hidden_AuthMethod.(*authenticationConfig_Oauth2); ok {
		x.xxx_hidden_AuthMethod = nil
	}
}

const AuthenticationConfig_AuthMethod_not_set_case case_AuthenticationConfig_AuthMethod = 0
const AuthenticationConfig_ApiKey_case case_AuthenticationConfig_AuthMethod = 1
const AuthenticationConfig_Oauth2_case case_AuthenticationConfig_AuthMethod = 2

func (x *AuthenticationConfig) WhichAuthMethod() case_AuthenticationConfig_AuthMethod {
	if x == nil {
		return AuthenticationConfig_AuthMethod_not_set_case
	}
	switch x.xxx_hidden_AuthMethod.(type) {
	case *authenticationConfig_ApiKey:
		return AuthenticationConfig_ApiKey_case
	case *authenticationConfig_Oauth2:
		return AuthenticationConfig_Oauth2_case
	default:
		return AuthenticationConfig_AuthMethod_not_set_case
	}
}

type AuthenticationConfig_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Fields of oneof xxx_hidden_AuthMethod:
	ApiKey *APIKeyAuth
	Oauth2 *OAuth2Auth
	// -- end of xxx_hidden_AuthMethod
}

func (b0 AuthenticationConfig_builder) Build() *AuthenticationConfig {
	m0 := &AuthenticationConfig{}
	b, x := &b0, m0
	_, _ = b, x
	if b.ApiKey != nil {
		x.xxx_hidden_AuthMethod = &authenticationConfig_ApiKey{b.ApiKey}
	}
	if b.Oauth2 != nil {
		x.xxx_hidden_AuthMethod = &authenticationConfig_Oauth2{b.Oauth2}
	}
	return m0
}

type case_AuthenticationConfig_AuthMethod protoreflect.FieldNumber

func (x case_AuthenticationConfig_AuthMethod) String() string {
	md := file_proto_config_v1_config_proto_msgTypes[39].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isAuthenticationConfig_AuthMethod interface {
	isAuthenticationConfig_AuthMethod()
}

type authenticationConfig_ApiKey struct {
	ApiKey *APIKeyAuth `protobuf:"bytes,1,opt,name=api_key,json=apiKey,oneof"`
}

type authenticationConfig_Oauth2 struct {
	Oauth2 *OAuth2Auth `protobuf:"bytes,2,opt,name=oauth2,oneof"` // Can be extended with other auth types like JWT, mTLS etc.
}

func (*authenticationConfig_ApiKey) isAuthenticationConfig_AuthMethod() {}

func (*authenticationConfig_Oauth2) isAuthenticationConfig_AuthMethod() {}

// APIKeyAuth defines authentication using an API key.
type APIKeyAuth struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_ParamName   *string                `protobuf:"bytes,1,opt,name=param_name,json=paramName"`
	xxx_hidden_In          APIKeyAuth_Location    `protobuf:"varint,2,opt,name=in,enum=mcpx.config.v1.APIKeyAuth_Location"`
	xxx_hidden_KeyValue    *string                `protobuf:"bytes,3,opt,name=key_value,json=keyValue"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *APIKeyAuth) Reset() {
	*x = APIKeyAuth{}
	mi := &file_proto_config_v1_config_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *APIKeyAuth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIKeyAuth) ProtoMessage() {}

func (x *APIKeyAuth) ProtoReflect() protoreflect.Message {
	mi := &file_proto_config_v1_config_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *APIKeyAuth) GetParamName() string {
	if x != nil {
		if x.xxx_hidden_ParamName != nil {
			return *x.xxx_hidden_ParamName
		}
		return ""
	}
	return ""
}

func (x *APIKeyAuth) GetIn() APIKeyAuth_Location {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 1) {
			return x.xxx_hidden_In
		}
	}
	return APIKeyAuth_HEADER
}

func (x *APIKeyAuth) GetKeyValue() string {
	if x != nil {
		if x.xxx_hidden_KeyValue != nil {
			return *x.xxx_hidden_KeyValue
		}
		return ""
	}
	return ""
}

func (x *APIKeyAuth) SetParamName(v string) {
	x.xxx_hidden_ParamName = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 3)
}

func (x *APIKeyAuth) SetIn(v APIKeyAuth_Location) {
	x.xxx_hidden_In = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 3)
}

func (x *APIKeyAuth) SetKeyValue(v string) {
	x.xxx_hidden_KeyValue = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 3)
}

func (x *APIKeyAuth) HasParamName() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *APIKeyAuth) HasIn() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *APIKeyAuth) HasKeyValue() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *APIKeyAuth) ClearParamName() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_ParamName = nil
}

func (x *APIKeyAuth) ClearIn() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_In = APIKeyAuth_HEADER
}

func (x *APIKeyAuth) ClearKeyValue() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_KeyValue = nil
}

type APIKeyAuth_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The name of the parameter carrying the key (e.g., "X-API-Key", "api_key").
	ParamName *string
	In        *APIKeyAuth_Location
	// The actual API key value. It's recommended to use a secret management system.
	KeyValue *string
}

func (b0 APIKeyAuth_builder) Build() *APIKeyAuth {
	m0 := &APIKeyAuth{}
	b, x := &b0, m0
	_, _ = b, x
	if b.ParamName != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 3)
		x.xxx_hidden_ParamName = b.ParamName
	}
	if b.In != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 3)
		x.xxx_hidden_In = *b.In
	}
	if b.KeyValue != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 3)
		x.xxx_hidden_KeyValue = b.KeyValue
	}
	return m0
}

// OAuth2Auth defines authentication using the OAuth 2.0 client credentials flow.
type OAuth2Auth struct {
	state                       protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_ClientId         *string                `protobuf:"bytes,1,opt,name=client_id,json=clientId"`
	xxx_hidden_ClientSecret     *string                `protobuf:"bytes,2,opt,name=client_secret,json=clientSecret"`
	xxx_hidden_TokenUrl         *string                `protobuf:"bytes,3,opt,name=token_url,json=tokenUrl"`
	xxx_hidden_AuthorizationUrl *string                `protobuf:"bytes,4,opt,name=authorization_url,json=authorizationUrl"`
	xxx_hidden_Scopes           *string                `protobuf:"bytes,5,opt,name=scopes"`
	XXX_raceDetectHookData      protoimpl.RaceDetectHookData
	XXX_presence                [1]uint32
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *OAuth2Auth) Reset() {
	*x = OAuth2Auth{}
	mi := &file_proto_config_v1_config_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OAuth2Auth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OAuth2Auth) ProtoMessage() {}

func (x *OAuth2Auth) ProtoReflect() protoreflect.Message {
	mi := &file_proto_config_v1_config_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *OAuth2Auth) GetClientId() string {
	if x != nil {
		if x.xxx_hidden_ClientId != nil {
			return *x.xxx_hidden_ClientId
		}
		return ""
	}
	return ""
}

func (x *OAuth2Auth) GetClientSecret() string {
	if x != nil {
		if x.xxx_hidden_ClientSecret != nil {
			return *x.xxx_hidden_ClientSecret
		}
		return ""
	}
	return ""
}

func (x *OAuth2Auth) GetTokenUrl() string {
	if x != nil {
		if x.xxx_hidden_TokenUrl != nil {
			return *x.xxx_hidden_TokenUrl
		}
		return ""
	}
	return ""
}

func (x *OAuth2Auth) GetAuthorizationUrl() string {
	if x != nil {
		if x.xxx_hidden_AuthorizationUrl != nil {
			return *x.xxx_hidden_AuthorizationUrl
		}
		return ""
	}
	return ""
}

func (x *OAuth2Auth) GetScopes() string {
	if x != nil {
		if x.xxx_hidden_Scopes != nil {
			return *x.xxx_hidden_Scopes
		}
		return ""
	}
	return ""
}

func (x *OAuth2Auth) SetClientId(v string) {
	x.xxx_hidden_ClientId = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 5)
}

func (x *OAuth2Auth) SetClientSecret(v string) {
	x.xxx_hidden_ClientSecret = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 5)
}

func (x *OAuth2Auth) SetTokenUrl(v string) {
	x.xxx_hidden_TokenUrl = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 5)
}

func (x *OAuth2Auth) SetAuthorizationUrl(v string) {
	x.xxx_hidden_AuthorizationUrl = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 5)
}

func (x *OAuth2Auth) SetScopes(v string) {
	x.xxx_hidden_Scopes = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 5)
}

func (x *OAuth2Auth) HasClientId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *OAuth2Auth) HasClientSecret() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *OAuth2Auth) HasTokenUrl() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *OAuth2Auth) HasAuthorizationUrl() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *OAuth2Auth) HasScopes() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *OAuth2Auth) ClearClientId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_ClientId = nil
}

func (x *OAuth2Auth) ClearClientSecret() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_ClientSecret = nil
}

func (x *OAuth2Auth) ClearTokenUrl() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_TokenUrl = nil
}

func (x *OAuth2Auth) ClearAuthorizationUrl() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_AuthorizationUrl = nil
}

func (x *OAuth2Auth) ClearScopes() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_Scopes = nil
}

type OAuth2Auth_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	ClientId         *string
	ClientSecret     *string
	TokenUrl         *string
	AuthorizationUrl *string
	// Space-delimited list of scopes.
	Scopes *string
}

func (b0 OAuth2Auth_builder) Build() *OAuth2Auth {
	m0 := &OAuth2Auth{}
	b, x := &b0, m0
	_, _ = b, x
	if b.ClientId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 5)
		x.xxx_hidden_ClientId = b.ClientId
	}
	if b.ClientSecret != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 5)
		x.xxx_hidden_ClientSecret = b.ClientSecret
	}
	if b.TokenUrl != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 5)
		x.xxx_hidden_TokenUrl = b.TokenUrl
	}
	if b.AuthorizationUrl != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 5)
		x.xxx_hidden_AuthorizationUrl = b.AuthorizationUrl
	}
	if b.Scopes != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 5)
		x.xxx_hidden_Scopes = b.Scopes
	}
	return m0
}

// UpstreamAuthentication defines the authentication method to use when mcpx communicates
// with an upstream service.
type UpstreamAuthentication struct {
	state                 protoimpl.MessageState              `protogen:"opaque.v1"`
	xxx_hidden_AuthMethod isUpstreamAuthentication_AuthMethod `protobuf_oneof:"auth_method"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *UpstreamAuthentication) Reset() {
	*x = UpstreamAuthentication{}
	mi := &file_proto_config_v1_config_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpstreamAuthentication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpstreamAuthentication) ProtoMessage() {}

func (x *UpstreamAuthentication) ProtoReflect() protoreflect.Message {
	mi := &file_proto_config_v1_config_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *UpstreamAuthentication) GetApiKey() *UpstreamAPIKeyAuth {
	if x != nil {
		if x, ok := x.xxx_hidden_AuthMethod.(*upstreamAuthentication_ApiKey); ok {
			return x.ApiKey
		}
	}
	return nil
}

func (x *UpstreamAuthentication) GetBearerToken() *UpstreamBearerTokenAuth {
	if x != nil {
		if x, ok := x.xxx_hidden_AuthMethod.(*upstreamAuthentication_BearerToken); ok {
			return x.BearerToken
		}
	}
	return nil
}

func (x *UpstreamAuthentication) GetBasicAuth() *UpstreamBasicAuth {
	if x != nil {
		if x, ok := x.xxx_hidden_AuthMethod.(*upstreamAuthentication_BasicAuth); ok {
			return x.BasicAuth
		}
	}
	return nil
}

func (x *UpstreamAuthentication) SetApiKey(v *UpstreamAPIKeyAuth) {
	if v == nil {
		x.xxx_hidden_AuthMethod = nil
		return
	}
	x.xxx_hidden_AuthMethod = &upstreamAuthentication_ApiKey{v}
}

func (x *UpstreamAuthentication) SetBearerToken(v *UpstreamBearerTokenAuth) {
	if v == nil {
		x.xxx_hidden_AuthMethod = nil
		return
	}
	x.xxx_hidden_AuthMethod = &upstreamAuthentication_BearerToken{v}
}

func (x *UpstreamAuthentication) SetBasicAuth(v *UpstreamBasicAuth) {
	if v == nil {
		x.xxx_hidden_AuthMethod = nil
		return
	}
	x.xxx_hidden_AuthMethod = &upstreamAuthentication_BasicAuth{v}
}

func (x *UpstreamAuthentication) HasAuthMethod() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_AuthMethod != nil
}

func (x *UpstreamAuthentication) HasApiKey() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_AuthMethod.(*upstreamAuthentication_ApiKey)
	return ok
}

func (x *UpstreamAuthentication) HasBearerToken() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_AuthMethod.(*upstreamAuthentication_BearerToken)
	return ok
}

func (x *UpstreamAuthentication) HasBasicAuth() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_AuthMethod.(*upstreamAuthentication_BasicAuth)
	return ok
}

func (x *UpstreamAuthentication) ClearAuthMethod() {
	x.xxx_hidden_AuthMethod = nil
}

func (x *UpstreamAuthentication) ClearApiKey() {
	if _, ok := x.xxx_hidden_AuthMethod.(*upstreamAuthentication_ApiKey); ok {
		x.xxx_hidden_AuthMethod = nil
	}
}

func (x *UpstreamAuthentication) ClearBearerToken() {
	if _, ok := x.xxx_hidden_AuthMethod.(*upstreamAuthentication_BearerToken); ok {
		x.xxx_hidden_AuthMethod = nil
	}
}

func (x *UpstreamAuthentication) ClearBasicAuth() {
	if _, ok := x.xxx_hidden_AuthMethod.(*upstreamAuthentication_BasicAuth); ok {
		x.xxx_hidden_AuthMethod = nil
	}
}

const UpstreamAuthentication_AuthMethod_not_set_case case_UpstreamAuthentication_AuthMethod = 0
const UpstreamAuthentication_ApiKey_case case_UpstreamAuthentication_AuthMethod = 1
const UpstreamAuthentication_BearerToken_case case_UpstreamAuthentication_AuthMethod = 2
const UpstreamAuthentication_BasicAuth_case case_UpstreamAuthentication_AuthMethod = 3

func (x *UpstreamAuthentication) WhichAuthMethod() case_UpstreamAuthentication_AuthMethod {
	if x == nil {
		return UpstreamAuthentication_AuthMethod_not_set_case
	}
	switch x.xxx_hidden_AuthMethod.(type) {
	case *upstreamAuthentication_ApiKey:
		return UpstreamAuthentication_ApiKey_case
	case *upstreamAuthentication_BearerToken:
		return UpstreamAuthentication_BearerToken_case
	case *upstreamAuthentication_BasicAuth:
		return UpstreamAuthentication_BasicAuth_case
	default:
		return UpstreamAuthentication_AuthMethod_not_set_case
	}
}

type UpstreamAuthentication_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Fields of oneof xxx_hidden_AuthMethod:
	ApiKey      *UpstreamAPIKeyAuth
	BearerToken *UpstreamBearerTokenAuth
	BasicAuth   *UpstreamBasicAuth
	// -- end of xxx_hidden_AuthMethod
}

func (b0 UpstreamAuthentication_builder) Build() *UpstreamAuthentication {
	m0 := &UpstreamAuthentication{}
	b, x := &b0, m0
	_, _ = b, x
	if b.ApiKey != nil {
		x.xxx_hidden_AuthMethod = &upstreamAuthentication_ApiKey{b.ApiKey}
	}
	if b.BearerToken != nil {
		x.xxx_hidden_AuthMethod = &upstreamAuthentication_BearerToken{b.BearerToken}
	}
	if b.BasicAuth != nil {
		x.xxx_hidden_AuthMethod = &upstreamAuthentication_BasicAuth{b.BasicAuth}
	}
	return m0
}

type case_UpstreamAuthentication_AuthMethod protoreflect.FieldNumber

func (x case_UpstreamAuthentication_AuthMethod) String() string {
	md := file_proto_config_v1_config_proto_msgTypes[42].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isUpstreamAuthentication_AuthMethod interface {
	isUpstreamAuthentication_AuthMethod()
}

type upstreamAuthentication_ApiKey struct {
	ApiKey *UpstreamAPIKeyAuth `protobuf:"bytes,1,opt,name=api_key,json=apiKey,oneof"`
}

type upstreamAuthentication_BearerToken struct {
	BearerToken *UpstreamBearerTokenAuth `protobuf:"bytes,2,opt,name=bearer_token,json=bearerToken,oneof"`
}

type upstreamAuthentication_BasicAuth struct {
	BasicAuth *UpstreamBasicAuth `protobuf:"bytes,3,opt,name=basic_auth,json=basicAuth,oneof"`
}

func (*upstreamAuthentication_ApiKey) isUpstreamAuthentication_AuthMethod() {}

func (*upstreamAuthentication_BearerToken) isUpstreamAuthentication_AuthMethod() {}

func (*upstreamAuthentication_BasicAuth) isUpstreamAuthentication_AuthMethod() {}

// UpstreamAPIKeyAuth defines authentication using an API key sent to an upstream.
type UpstreamAPIKeyAuth struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_HeaderName  *string                `protobuf:"bytes,1,opt,name=header_name,json=headerName"`
	xxx_hidden_ApiKey      *string                `protobuf:"bytes,2,opt,name=api_key,json=apiKey"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *UpstreamAPIKeyAuth) Reset() {
	*x = UpstreamAPIKeyAuth{}
	mi := &file_proto_config_v1_config_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpstreamAPIKeyAuth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpstreamAPIKeyAuth) ProtoMessage() {}

func (x *UpstreamAPIKeyAuth) ProtoReflect() protoreflect.Message {
	mi := &file_proto_config_v1_config_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *UpstreamAPIKeyAuth) GetHeaderName() string {
	if x != nil {
		if x.xxx_hidden_HeaderName != nil {
			return *x.xxx_hidden_HeaderName
		}
		return ""
	}
	return ""
}

func (x *UpstreamAPIKeyAuth) GetApiKey() string {
	if x != nil {
		if x.xxx_hidden_ApiKey != nil {
			return *x.xxx_hidden_ApiKey
		}
		return ""
	}
	return ""
}

func (x *UpstreamAPIKeyAuth) SetHeaderName(v string) {
	x.xxx_hidden_HeaderName = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 2)
}

func (x *UpstreamAPIKeyAuth) SetApiKey(v string) {
	x.xxx_hidden_ApiKey = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 2)
}

func (x *UpstreamAPIKeyAuth) HasHeaderName() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *UpstreamAPIKeyAuth) HasApiKey() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *UpstreamAPIKeyAuth) ClearHeaderName() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_HeaderName = nil
}

func (x *UpstreamAPIKeyAuth) ClearApiKey() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_ApiKey = nil
}

type UpstreamAPIKeyAuth_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The name of the header to carry the API key (e.g., "X-API-Key").
	HeaderName *string
	// The API key value.
	ApiKey *string
}

func (b0 UpstreamAPIKeyAuth_builder) Build() *UpstreamAPIKeyAuth {
	m0 := &UpstreamAPIKeyAuth{}
	b, x := &b0, m0
	_, _ = b, x
	if b.HeaderName != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 2)
		x.xxx_hidden_HeaderName = b.HeaderName
	}
	if b.ApiKey != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 2)
		x.xxx_hidden_ApiKey = b.ApiKey
	}
	return m0
}

// UpstreamBearerTokenAuth defines authentication using a bearer token.
type UpstreamBearerTokenAuth struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Token       *string                `protobuf:"bytes,1,opt,name=token"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *UpstreamBearerTokenAuth) Reset() {
	*x = UpstreamBearerTokenAuth{}
	mi := &file_proto_config_v1_config_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpstreamBearerTokenAuth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpstreamBearerTokenAuth) ProtoMessage() {}

func (x *UpstreamBearerTokenAuth) ProtoReflect() protoreflect.Message {
	mi := &file_proto_config_v1_config_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *UpstreamBearerTokenAuth) GetToken() string {
	if x != nil {
		if x.xxx_hidden_Token != nil {
			return *x.xxx_hidden_Token
		}
		return ""
	}
	return ""
}

func (x *UpstreamBearerTokenAuth) SetToken(v string) {
	x.xxx_hidden_Token = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 1)
}

func (x *UpstreamBearerTokenAuth) HasToken() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *UpstreamBearerTokenAuth) ClearToken() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Token = nil
}

type UpstreamBearerTokenAuth_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The bearer token.
	Token *string
}

func (b0 UpstreamBearerTokenAuth_builder) Build() *UpstreamBearerTokenAuth {
	m0 := &UpstreamBearerTokenAuth{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Token != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 1)
		x.xxx_hidden_Token = b.Token
	}
	return m0
}

// UpstreamBasicAuth defines authentication using a username and password.
type UpstreamBasicAuth struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Username    *string                `protobuf:"bytes,1,opt,name=username"`
	xxx_hidden_Password    *string                `protobuf:"bytes,2,opt,name=password"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *UpstreamBasicAuth) Reset() {
	*x = UpstreamBasicAuth{}
	mi := &file_proto_config_v1_config_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpstreamBasicAuth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpstreamBasicAuth) ProtoMessage() {}

func (x *UpstreamBasicAuth) ProtoReflect() protoreflect.Message {
	mi := &file_proto_config_v1_config_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *UpstreamBasicAuth) GetUsername() string {
	if x != nil {
		if x.xxx_hidden_Username != nil {
			return *x.xxx_hidden_Username
		}
		return ""
	}
	return ""
}

func (x *UpstreamBasicAuth) GetPassword() string {
	if x != nil {
		if x.xxx_hidden_Password != nil {
			return *x.xxx_hidden_Password
		}
		return ""
	}
	return ""
}

func (x *UpstreamBasicAuth) SetUsername(v string) {
	x.xxx_hidden_Username = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 2)
}

func (x *UpstreamBasicAuth) SetPassword(v string) {
	x.xxx_hidden_Password = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 2)
}

func (x *UpstreamBasicAuth) HasUsername() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *UpstreamBasicAuth) HasPassword() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *UpstreamBasicAuth) ClearUsername() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Username = nil
}

func (x *UpstreamBasicAuth) ClearPassword() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Password = nil
}

type UpstreamBasicAuth_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Username *string
	Password *string
}

func (b0 UpstreamBasicAuth_builder) Build() *UpstreamBasicAuth {
	m0 := &UpstreamBasicAuth{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Username != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 2)
		x.xxx_hidden_Username = b.Username
	}
	if b.Password != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 2)
		x.xxx_hidden_Password = b.Password
	}
	return m0
}

// TLSConfig defines the TLS settings for connecting to an upstream service.
type TLSConfig struct {
	state                         protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_ServerName         *string                `protobuf:"bytes,1,opt,name=server_name,json=serverName"`
	xxx_hidden_CaCertPath         *string                `protobuf:"bytes,2,opt,name=ca_cert_path,json=caCertPath"`
	xxx_hidden_ClientCertPath     *string                `protobuf:"bytes,3,opt,name=client_cert_path,json=clientCertPath"`
	xxx_hidden_ClientKeyPath      *string                `protobuf:"bytes,4,opt,name=client_key_path,json=clientKeyPath"`
	xxx_hidden_InsecureSkipVerify bool                   `protobuf:"varint,5,opt,name=insecure_skip_verify,json=insecureSkipVerify"`
	XXX_raceDetectHookData        protoimpl.RaceDetectHookData
	XXX_presence                  [1]uint32
	unknownFields                 protoimpl.UnknownFields
	sizeCache                     protoimpl.SizeCache
}

func (x *TLSConfig) Reset() {
	*x = TLSConfig{}
	mi := &file_proto_config_v1_config_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLSConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLSConfig) ProtoMessage() {}

func (x *TLSConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_config_v1_config_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TLSConfig) GetServerName() string {
	if x != nil {
		if x.xxx_hidden_ServerName != nil {
			return *x.xxx_hidden_ServerName
		}
		return ""
	}
	return ""
}

func (x *TLSConfig) GetCaCertPath() string {
	if x != nil {
		if x.xxx_hidden_CaCertPath != nil {
			return *x.xxx_hidden_CaCertPath
		}
		return ""
	}
	return ""
}

func (x *TLSConfig) GetClientCertPath() string {
	if x != nil {
		if x.xxx_hidden_ClientCertPath != nil {
			return *x.xxx_hidden_ClientCertPath
		}
		return ""
	}
	return ""
}

func (x *TLSConfig) GetClientKeyPath() string {
	if x != nil {
		if x.xxx_hidden_ClientKeyPath != nil {
			return *x.xxx_hidden_ClientKeyPath
		}
		return ""
	}
	return ""
}

func (x *TLSConfig) GetInsecureSkipVerify() bool {
	if x != nil {
		return x.xxx_hidden_InsecureSkipVerify
	}
	return false
}

func (x *TLSConfig) SetServerName(v string) {
	x.xxx_hidden_ServerName = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 5)
}

func (x *TLSConfig) SetCaCertPath(v string) {
	x.xxx_hidden_CaCertPath = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 5)
}

func (x *TLSConfig) SetClientCertPath(v string) {
	x.xxx_hidden_ClientCertPath = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 5)
}

func (x *TLSConfig) SetClientKeyPath(v string) {
	x.xxx_hidden_ClientKeyPath = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 5)
}

func (x *TLSConfig) SetInsecureSkipVerify(v bool) {
	x.xxx_hidden_InsecureSkipVerify = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 5)
}

func (x *TLSConfig) HasServerName() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *TLSConfig) HasCaCertPath() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *TLSConfig) HasClientCertPath() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *TLSConfig) HasClientKeyPath() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *TLSConfig) HasInsecureSkipVerify() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *TLSConfig) ClearServerName() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_ServerName = nil
}

func (x *TLSConfig) ClearCaCertPath() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_CaCertPath = nil
}

func (x *TLSConfig) ClearClientCertPath() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_ClientCertPath = nil
}

func (x *TLSConfig) ClearClientKeyPath() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_ClientKeyPath = nil
}

func (x *TLSConfig) ClearInsecureSkipVerify() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_InsecureSkipVerify = false
}

type TLSConfig_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The server name to use for SNI.
	ServerName *string
	// Path to the CA certificate file for verifying the server's certificate.
	CaCertPath *string
	// Path to the client certificate file for mTLS.
	ClientCertPath *string
	// Path to the client private key file for mTLS.
	ClientKeyPath *string
	// If true, the client will not verify the server's certificate chain. Use with caution.
	InsecureSkipVerify *bool
}

func (b0 TLSConfig_builder) Build() *TLSConfig {
	m0 := &TLSConfig{}
	b, x := &b0, m0
	_, _ = b, x
	if b.ServerName != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 5)
		x.xxx_hidden_ServerName = b.ServerName
	}
	if b.CaCertPath != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 5)
		x.xxx_hidden_CaCertPath = b.CaCertPath
	}
	if b.ClientCertPath != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 5)
		x.xxx_hidden_ClientCertPath = b.ClientCertPath
	}
	if b.ClientKeyPath != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 5)
		x.xxx_hidden_ClientKeyPath = b.ClientKeyPath
	}
	if b.InsecureSkipVerify != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 5)
		x.xxx_hidden_InsecureSkipVerify = *b.InsecureSkipVerify
	}
	return m0
}

var File_proto_config_v1_config_proto protoreflect.FileDescriptor

const file_proto_config_v1_config_proto_rawDesc = "" +
	"\n" +
	"\x1cproto/config/v1/config.proto\x12\x0emcpx.config.v1\x1a\x1cgoogle/protobuf/struct.proto\x1a\x1egoogle/protobuf/duration.proto\"\xc8\x02\n" +
	"\x10McpxServerConfig\x12G\n" +
	"\x0fglobal_settings\x18\x01 \x01(\v2\x1e.mcpx.config.v1.GlobalSettingsR\x0eglobalSettings\x12R\n" +
	"\x11upstream_services\x18\x02 \x03(\v2%.mcpx.config.v1.UpstreamServiceConfigR\x10upstreamServices\x12L\n" +
	"\x11frontend_services\x18\x03 \x03(\v2\x1f.mcpx.config.v1.FrontendServiceR\x10frontendServices\x12I\n" +
	"\x10service_bindings\x18\x04 \x03(\v2\x1e.mcpx.config.v1.ServiceBindingR\x0fserviceBindings\"\xf9\x01\n" +
	"\x0eGlobalSettings\x12!\n" +
	"\fbind_address\x18\x01 \x01(\tR\vbindAddress\x12!\n" +
	"\fmcp_basepath\x18\x02 \x01(\tR\vmcpBasepath\x12D\n" +
	"\tlog_level\x18\x03 \x01(\x0e2'.mcpx.config.v1.GlobalSettings.LogLevelR\blogLevel\x12%\n" +
	"\x0eprotoc_version\x18\x04 \x01(\tR\rprotocVersion\"4\n" +
	"\bLogLevel\x12\b\n" +
	"\x04INFO\x10\x00\x12\b\n" +
	"\x04WARN\x10\x01\x12\t\n" +
	"\x05ERROR\x10\x02\x12\t\n" +
	"\x05DEBUG\x10\x03\"5\n" +
	"\x0fFrontendService\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\"p\n" +
	"\x0eServiceBinding\x12.\n" +
	"\x13frontend_service_id\x18\x01 \x01(\tR\x11frontendServiceId\x12.\n" +
	"\x13upstream_service_id\x18\x02 \x01(\tR\x11upstreamServiceId\"\xb0\t\n" +
	"\x15UpstreamServiceConfig\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12M\n" +
	"\x0fconnection_pool\x18\x03 \x01(\v2$.mcpx.config.v1.ConnectionPoolConfigR\x0econnectionPool\x12_\n" +
	"\x17upstream_authentication\x18\x04 \x01(\v2&.mcpx.config.v1.UpstreamAuthenticationR\x16upstreamAuthentication\x121\n" +
	"\x05cache\x18\x05 \x01(\v2\x1b.mcpx.config.v1.CacheConfigR\x05cache\x12>\n" +
	"\n" +
	"rate_limit\x18\x06 \x01(\v2\x1f.mcpx.config.v1.RateLimitConfigR\trateLimit\x12]\n" +
	"\x17load_balancing_strategy\x18\a \x01(\x0e2%.mcpx.config.v1.LoadBalancingStrategyR\x15loadBalancingStrategy\x12@\n" +
	"\n" +
	"resilience\x18\b \x01(\v2 .mcpx.config.v1.ResilienceConfigR\n" +
	"resilience\x12E\n" +
	"\vmcp_service\x18\t \x01(\v2\".mcpx.config.v1.McpUpstreamServiceH\x00R\n" +
	"mcpService\x12H\n" +
	"\fhttp_service\x18\n" +
	" \x01(\v2#.mcpx.config.v1.HttpUpstreamServiceH\x00R\vhttpService\x12H\n" +
	"\fgrpc_service\x18\v \x01(\v2#.mcpx.config.v1.GrpcUpstreamServiceH\x00R\vgrpcService\x12Q\n" +
	"\x0fopenapi_service\x18\f \x01(\v2&.mcpx.config.v1.OpenapiUpstreamServiceH\x00R\x0eopenapiService\x12^\n" +
	"\x14command_line_service\x18\r \x01(\v2*.mcpx.config.v1.CommandLineUpstreamServiceH\x00R\x12commandLineService\x12W\n" +
	"\x11websocket_service\x18\x10 \x01(\v2(.mcpx.config.v1.WebsocketUpstreamServiceH\x00R\x10websocketService\x12N\n" +
	"\x0ewebrtc_service\x18\x11 \x01(\v2%.mcpx.config.v1.WebrtcUpstreamServiceH\x00R\rwebrtcService\x12\x18\n" +
	"\aversion\x18\x0e \x01(\tR\aversion\x12L\n" +
	"\x0eauthentication\x18\x0f \x01(\v2$.mcpx.config.v1.AuthenticationConfigR\x0eauthenticationB\x10\n" +
	"\x0eservice_config\"\xb3\x02\n" +
	"\x13GrpcUpstreamService\x12\x18\n" +
	"\aaddress\x18\x01 \x01(\tR\aaddress\x12#\n" +
	"\rproto_content\x18\x02 \x01(\tR\fprotoContent\x12%\n" +
	"\x0euse_reflection\x18\x03 \x01(\bR\ruseReflection\x128\n" +
	"\n" +
	"tls_config\x18\x04 \x01(\v2\x19.mcpx.config.v1.TLSConfigR\ttlsConfig\x128\n" +
	"\x05calls\x18\x05 \x03(\v2\".mcpx.config.v1.GrpcCallDefinitionR\x05calls\x12B\n" +
	"\fhealth_check\x18\x06 \x01(\v2\x1f.mcpx.config.v1.GrpcHealthCheckR\vhealthCheck\"\xe7\x01\n" +
	"\x13HttpUpstreamService\x12\x18\n" +
	"\aaddress\x18\x01 \x01(\tR\aaddress\x128\n" +
	"\x05calls\x18\x02 \x03(\v2\".mcpx.config.v1.HttpCallDefinitionR\x05calls\x12B\n" +
	"\fhealth_check\x18\x03 \x01(\v2\x1f.mcpx.config.v1.HttpHealthCheckR\vhealthCheck\x128\n" +
	"\n" +
	"tls_config\x18\x04 \x01(\v2\x19.mcpx.config.v1.TLSConfigR\ttlsConfig\"\xad\x01\n" +
	"\x18WebsocketUpstreamService\x12\x18\n" +
	"\aaddress\x18\x01 \x01(\tR\aaddress\x12=\n" +
	"\x05calls\x18\x02 \x03(\v2'.mcpx.config.v1.WebsocketCallDefinitionR\x05calls\x128\n" +
	"\n" +
	"tls_config\x18\x03 \x01(\v2\x19.mcpx.config.v1.TLSConfigR\ttlsConfig\"\xa7\x01\n" +
	"\x15WebrtcUpstreamService\x12\x18\n" +
	"\aaddress\x18\x01 \x01(\tR\aaddress\x12:\n" +
	"\x05calls\x18\x02 \x03(\v2$.mcpx.config.v1.WebrtcCallDefinitionR\x05calls\x128\n" +
	"\n" +
	"tls_config\x18\x03 \x01(\v2\x19.mcpx.config.v1.TLSConfigR\ttlsConfig\"\x90\x02\n" +
	"\x16OpenapiUpstreamService\x12\x18\n" +
	"\aaddress\x18\x01 \x01(\tR\aaddress\x12!\n" +
	"\fopenapi_spec\x18\x02 \x01(\tR\vopenapiSpec\x12B\n" +
	"\fhealth_check\x18\x03 \x01(\v2\x1f.mcpx.config.v1.HttpHealthCheckR\vhealthCheck\x128\n" +
	"\n" +
	"tls_config\x18\x04 \x01(\v2\x19.mcpx.config.v1.TLSConfigR\ttlsConfig\x12;\n" +
	"\x05calls\x18\x05 \x03(\v2%.mcpx.config.v1.OpenAPICallDefinitionR\x05calls\"\xaa\x02\n" +
	"\x1aCommandLineUpstreamService\x12\x18\n" +
	"\acommand\x18\x01 \x01(\tR\acommand\x12\x12\n" +
	"\x04args\x18\x02 \x03(\tR\x04args\x12+\n" +
	"\x11working_directory\x18\x03 \x01(\tR\x10workingDirectory\x129\n" +
	"\x05calls\x18\x04 \x03(\v2#.mcpx.config.v1.StdioCallDefinitionR\x05calls\x12C\n" +
	"\fhealth_check\x18\x05 \x01(\v2 .mcpx.config.v1.StdioHealthCheckR\vhealthCheck\x121\n" +
	"\x05cache\x18\x06 \x01(\v2\x1b.mcpx.config.v1.CacheConfigR\x05cache\"\xef\x02\n" +
	"\x12McpUpstreamService\x12V\n" +
	"\x0fhttp_connection\x18\x01 \x01(\v2+.mcpx.config.v1.McpStreamableHttpConnectionH\x00R\x0ehttpConnection\x12O\n" +
	"\x10stdio_connection\x18\x02 \x01(\v2\".mcpx.config.v1.McpStdioConnectionH\x00R\x0fstdioConnection\x12.\n" +
	"\x13tool_auto_discovery\x18\x03 \x01(\bR\x11toolAutoDiscovery\x124\n" +
	"\x05tools\x18\x04 \x03(\v2\x1e.mcpx.config.v1.ToolDefinitionR\x05tools\x127\n" +
	"\x05calls\x18\x06 \x03(\v2!.mcpx.config.v1.MCPCallDefinitionR\x05callsB\x11\n" +
	"\x0fconnection_type\"\xbf\x01\n" +
	"\x12McpStdioConnection\x12\x18\n" +
	"\acommand\x18\x01 \x01(\tR\acommand\x12\x12\n" +
	"\x04args\x18\x02 \x03(\tR\x04args\x12+\n" +
	"\x11working_directory\x18\x03 \x01(\tR\x10workingDirectory\x12'\n" +
	"\x0fcontainer_image\x18\x04 \x01(\tR\x0econtainerImage\x12%\n" +
	"\x0esetup_commands\x18\x05 \x03(\tR\rsetupCommands\"z\n" +
	"\x1bMcpStreamableHttpConnection\x12!\n" +
	"\fhttp_address\x18\x01 \x01(\tR\vhttpAddress\x128\n" +
	"\n" +
	"tls_config\x18\x05 \x01(\v2\x19.mcpx.config.v1.TLSConfigR\ttlsConfig\"\x9f\x01\n" +
	"\x0eToolDefinition\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12 \n" +
	"\vdescription\x18\x02 \x01(\tR\vdescription\x12:\n" +
	"\finput_schema\x18\x03 \x01(\v2\x17.google.protobuf.StructR\vinputSchema\x12\x1b\n" +
	"\tis_stream\x18\x04 \x01(\bR\bisStream\"\xea\x01\n" +
	"\x0eToolAnnotation\x12\x14\n" +
	"\x05title\x18\x01 \x01(\tR\x05title\x12 \n" +
	"\vdescription\x18\x02 \x01(\tR\vdescription\x12)\n" +
	"\x10destructive_hint\x18\x03 \x01(\bR\x0fdestructiveHint\x12'\n" +
	"\x0fidempotent_hint\x18\x04 \x01(\bR\x0eidempotentHint\x12&\n" +
	"\x0fopen_world_hint\x18\x05 \x01(\bR\ropenWorldHint\x12$\n" +
	"\x0eread_only_hint\x18\x06 \x01(\bR\freadOnlyHint\"\xc4\x01\n" +
	"\x0fParameterSchema\x12 \n" +
	"\vdescription\x18\x01 \x01(\tR\vdescription\x121\n" +
	"\x04type\x18\x02 \x01(\x0e2\x1d.mcpx.config.v1.ParameterTypeR\x04type\x12;\n" +
	"\rdefault_value\x18\x03 \x01(\v2\x16.google.protobuf.ValueR\fdefaultValue\x12\x1f\n" +
	"\vis_required\x18\x04 \x01(\bR\n" +
	"isRequired\"\xed\x04\n" +
	"\x12HttpCallDefinition\x126\n" +
	"\x06schema\x18\x01 \x01(\v2\x1e.mcpx.config.v1.ToolAnnotationR\x06schema\x12#\n" +
	"\rendpoint_path\x18\x02 \x01(\tR\fendpointPath\x12E\n" +
	"\x06method\x18\x03 \x01(\x0e2-.mcpx.config.v1.HttpCallDefinition.HttpMethodR\x06method\x12D\n" +
	"\n" +
	"parameters\x18\x05 \x03(\v2$.mcpx.config.v1.HttpParameterMappingR\n" +
	"parameters\x12M\n" +
	"\x11input_transformer\x18\x06 \x01(\v2 .mcpx.config.v1.InputTransformerR\x10inputTransformer\x12P\n" +
	"\x12output_transformer\x18\a \x01(\v2!.mcpx.config.v1.OutputTransformerR\x11outputTransformer\x121\n" +
	"\x05cache\x18\b \x01(\v2\x1b.mcpx.config.v1.CacheConfigR\x05cache\"\x98\x01\n" +
	"\n" +
	"HttpMethod\x12\x1b\n" +
	"\x17HTTP_METHOD_UNSPECIFIED\x10\x00\x12\x13\n" +
	"\x0fHTTP_METHOD_GET\x10\x01\x12\x14\n" +
	"\x10HTTP_METHOD_POST\x10\x02\x12\x13\n" +
	"\x0fHTTP_METHOD_PUT\x10\x03\x12\x16\n" +
	"\x12HTTP_METHOD_DELETE\x10\x04\x12\x15\n" +
	"\x11HTTP_METHOD_PATCH\x10\x05\"\xbd\x02\n" +
	"\x17WebsocketCallDefinition\x126\n" +
	"\x06schema\x18\x01 \x01(\v2\x1e.mcpx.config.v1.ToolAnnotationR\x06schema\x12I\n" +
	"\n" +
	"parameters\x18\x03 \x03(\v2).mcpx.config.v1.WebsocketParameterMappingR\n" +
	"parameters\x12M\n" +
	"\x11input_transformer\x18\x04 \x01(\v2 .mcpx.config.v1.InputTransformerR\x10inputTransformer\x12P\n" +
	"\x12output_transformer\x18\x05 \x01(\v2!.mcpx.config.v1.OutputTransformerR\x11outputTransformer\"\xb7\x02\n" +
	"\x14WebrtcCallDefinition\x126\n" +
	"\x06schema\x18\x01 \x01(\v2\x1e.mcpx.config.v1.ToolAnnotationR\x06schema\x12F\n" +
	"\n" +
	"parameters\x18\x03 \x03(\v2&.mcpx.config.v1.WebrtcParameterMappingR\n" +
	"parameters\x12M\n" +
	"\x11input_transformer\x18\x04 \x01(\v2 .mcpx.config.v1.InputTransformerR\x10inputTransformer\x12P\n" +
	"\x12output_transformer\x18\x05 \x01(\v2!.mcpx.config.v1.OutputTransformerR\x11outputTransformer\"\x94\x01\n" +
	"\x13StdioCallDefinition\x126\n" +
	"\x06schema\x18\x01 \x01(\v2\x1e.mcpx.config.v1.ToolAnnotationR\x06schema\x12E\n" +
	"\n" +
	"parameters\x18\x02 \x03(\v2%.mcpx.config.v1.StdioParameterMappingR\n" +
	"parameters\".\n" +
	"\x10InputTransformer\x12\x1a\n" +
	"\btemplate\x18\x01 \x01(\tR\btemplate\"\xcb\x02\n" +
	"\x11OutputTransformer\x12F\n" +
	"\x06format\x18\x01 \x01(\x0e2..mcpx.config.v1.OutputTransformer.OutputFormatR\x06format\x12a\n" +
	"\x10extraction_rules\x18\x02 \x03(\v26.mcpx.config.v1.OutputTransformer.ExtractionRulesEntryR\x0fextractionRules\x12\x1a\n" +
	"\btemplate\x18\x03 \x01(\tR\btemplate\x1aB\n" +
	"\x14ExtractionRulesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"+\n" +
	"\fOutputFormat\x12\b\n" +
	"\x04JSON\x10\x00\x12\a\n" +
	"\x03XML\x10\x01\x12\b\n" +
	"\x04TEXT\x10\x02\"F\n" +
	"\x12GrpcCallDefinition\x12\x18\n" +
	"\aservice\x18\x01 \x01(\tR\aservice\x12\x16\n" +
	"\x06method\x18\x02 \x01(\tR\x06method\"\xdb\x01\n" +
	"\x15OpenAPICallDefinition\x12!\n" +
	"\foperation_id\x18\x01 \x01(\tR\voperationId\x12M\n" +
	"\x11input_transformer\x18\x02 \x01(\v2 .mcpx.config.v1.InputTransformerR\x10inputTransformer\x12P\n" +
	"\x12output_transformer\x18\x03 \x01(\v2!.mcpx.config.v1.OutputTransformerR\x11outputTransformer\"\xd1\x01\n" +
	"\x11MCPCallDefinition\x12\x1b\n" +
	"\ttool_name\x18\x01 \x01(\tR\btoolName\x12M\n" +
	"\x11input_transformer\x18\x02 \x01(\v2 .mcpx.config.v1.InputTransformerR\x10inputTransformer\x12P\n" +
	"\x12output_transformer\x18\x03 \x01(\v2!.mcpx.config.v1.OutputTransformerR\x11outputTransformer\"c\n" +
	"\x14HttpParameterMapping\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x127\n" +
	"\x06schema\x18\x02 \x01(\v2\x1f.mcpx.config.v1.ParameterSchemaR\x06schema\"h\n" +
	"\x19WebsocketParameterMapping\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x127\n" +
	"\x06schema\x18\x02 \x01(\v2\x1f.mcpx.config.v1.ParameterSchemaR\x06schema\"e\n" +
	"\x16WebrtcParameterMapping\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x127\n" +
	"\x06schema\x18\x02 \x01(\v2\x1f.mcpx.config.v1.ParameterSchemaR\x06schema\"d\n" +
	"\x15StdioParameterMapping\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x127\n" +
	"\x06schema\x18\x02 \x01(\v2\x1f.mcpx.config.v1.ParameterSchemaR\x06schema\"\xaf\x01\n" +
	"\x14ConnectionPoolConfig\x12'\n" +
	"\x0fmax_connections\x18\x01 \x01(\x05R\x0emaxConnections\x120\n" +
	"\x14max_idle_connections\x18\x02 \x01(\x05R\x12maxIdleConnections\x12<\n" +
	"\fidle_timeout\x18\x03 \x01(\v2\x19.google.protobuf.DurationR\vidleTimeout\"\xfb\x01\n" +
	"\x0fHttpHealthCheck\x12\x10\n" +
	"\x03url\x18\x01 \x01(\tR\x03url\x12#\n" +
	"\rexpected_code\x18\x02 \x01(\x05R\fexpectedCode\x12E\n" +
	"\x1fexpected_response_body_contains\x18\x03 \x01(\tR\x1cexpectedResponseBodyContains\x125\n" +
	"\binterval\x18\x04 \x01(\v2\x19.google.protobuf.DurationR\binterval\x123\n" +
	"\atimeout\x18\x05 \x01(\v2\x19.google.protobuf.DurationR\atimeout\"\x92\x02\n" +
	"\x0fGrpcHealthCheck\x12\x18\n" +
	"\aservice\x18\x01 \x01(\tR\aservice\x12\x16\n" +
	"\x06method\x18\x02 \x01(\tR\x06method\x12\x18\n" +
	"\arequest\x18\x03 \x01(\tR\arequest\x12+\n" +
	"\x11expected_response\x18\x04 \x01(\tR\x10expectedResponse\x12\x1a\n" +
	"\binsecure\x18\x05 \x01(\bR\binsecure\x125\n" +
	"\binterval\x18\x06 \x01(\v2\x19.google.protobuf.DurationR\binterval\x123\n" +
	"\atimeout\x18\a \x01(\v2\x19.google.protobuf.DurationR\atimeout\"\xec\x01\n" +
	"\x10StdioHealthCheck\x12\x16\n" +
	"\x06method\x18\x01 \x01(\tR\x06method\x12\x16\n" +
	"\x06prompt\x18\x02 \x01(\tR\x06prompt\x12<\n" +
	"\x1aexpected_response_contains\x18\x03 \x01(\tR\x18expectedResponseContains\x125\n" +
	"\binterval\x18\x04 \x01(\v2\x19.google.protobuf.DurationR\binterval\x123\n" +
	"\atimeout\x18\x05 \x01(\v2\x19.google.protobuf.DurationR\atimeout\"v\n" +
	"\x0fRateLimitConfig\x12\x1d\n" +
	"\n" +
	"is_enabled\x18\x01 \x01(\bR\tisEnabled\x12.\n" +
	"\x13requests_per_second\x18\x02 \x01(\x01R\x11requestsPerSecond\x12\x14\n" +
	"\x05burst\x18\x03 \x01(\x03R\x05burst\"u\n" +
	"\vCacheConfig\x12\x1d\n" +
	"\n" +
	"is_enabled\x18\x01 \x01(\bR\tisEnabled\x12+\n" +
	"\x03ttl\x18\x02 \x01(\v2\x19.google.protobuf.DurationR\x03ttl\x12\x1a\n" +
	"\bstrategy\x18\x03 \x01(\tR\bstrategy\"\xa1\x01\n" +
	"\x10ResilienceConfig\x12M\n" +
	"\x0fcircuit_breaker\x18\x01 \x01(\v2$.mcpx.config.v1.CircuitBreakerConfigR\x0ecircuitBreaker\x12>\n" +
	"\fretry_policy\x18\x02 \x01(\v2\x1b.mcpx.config.v1.RetryConfigR\vretryPolicy\"\xed\x01\n" +
	"\x14CircuitBreakerConfig\x124\n" +
	"\x16failure_rate_threshold\x18\x01 \x01(\x01R\x14failureRateThreshold\x121\n" +
	"\x14consecutive_failures\x18\x02 \x01(\x05R\x13consecutiveFailures\x12>\n" +
	"\ropen_duration\x18\x03 \x01(\v2\x19.google.protobuf.DurationR\fopenDuration\x12,\n" +
	"\x12half_open_requests\x18\x04 \x01(\x05R\x10halfOpenRequests\"\xb3\x01\n" +
	"\vRetryConfig\x12*\n" +
	"\x11number_of_retries\x18\x01 \x01(\x05R\x0fnumberOfRetries\x12<\n" +
	"\fbase_backoff\x18\x02 \x01(\v2\x19.google.protobuf.DurationR\vbaseBackoff\x12:\n" +
	"\vmax_backoff\x18\x03 \x01(\v2\x19.google.protobuf.DurationR\n" +
	"maxBackoff\"\x92\x01\n" +
	"\x14AuthenticationConfig\x125\n" +
	"\aapi_key\x18\x01 \x01(\v2\x1a.mcpx.config.v1.APIKeyAuthH\x00R\x06apiKey\x124\n" +
	"\x06oauth2\x18\x02 \x01(\v2\x1a.mcpx.config.v1.OAuth2AuthH\x00R\x06oauth2B\r\n" +
	"\vauth_method\"\xa0\x01\n" +
	"\n" +
	"APIKeyAuth\x12\x1d\n" +
	"\n" +
	"param_name\x18\x01 \x01(\tR\tparamName\x123\n" +
	"\x02in\x18\x02 \x01(\x0e2#.mcpx.config.v1.APIKeyAuth.LocationR\x02in\x12\x1b\n" +
	"\tkey_value\x18\x03 \x01(\tR\bkeyValue\"!\n" +
	"\bLocation\x12\n" +
	"\n" +
	"\x06HEADER\x10\x00\x12\t\n" +
	"\x05QUERY\x10\x01\"\xb0\x01\n" +
	"\n" +
	"OAuth2Auth\x12\x1b\n" +
	"\tclient_id\x18\x01 \x01(\tR\bclientId\x12#\n" +
	"\rclient_secret\x18\x02 \x01(\tR\fclientSecret\x12\x1b\n" +
	"\ttoken_url\x18\x03 \x01(\tR\btokenUrl\x12+\n" +
	"\x11authorization_url\x18\x04 \x01(\tR\x10authorizationUrl\x12\x16\n" +
	"\x06scopes\x18\x05 \x01(\tR\x06scopes\"\xf8\x01\n" +
	"\x16UpstreamAuthentication\x12=\n" +
	"\aapi_key\x18\x01 \x01(\v2\".mcpx.config.v1.UpstreamAPIKeyAuthH\x00R\x06apiKey\x12L\n" +
	"\fbearer_token\x18\x02 \x01(\v2'.mcpx.config.v1.UpstreamBearerTokenAuthH\x00R\vbearerToken\x12B\n" +
	"\n" +
	"basic_auth\x18\x03 \x01(\v2!.mcpx.config.v1.UpstreamBasicAuthH\x00R\tbasicAuthB\r\n" +
	"\vauth_method\"N\n" +
	"\x12UpstreamAPIKeyAuth\x12\x1f\n" +
	"\vheader_name\x18\x01 \x01(\tR\n" +
	"headerName\x12\x17\n" +
	"\aapi_key\x18\x02 \x01(\tR\x06apiKey\"/\n" +
	"\x17UpstreamBearerTokenAuth\x12\x14\n" +
	"\x05token\x18\x01 \x01(\tR\x05token\"K\n" +
	"\x11UpstreamBasicAuth\x12\x1a\n" +
	"\busername\x18\x01 \x01(\tR\busername\x12\x1a\n" +
	"\bpassword\x18\x02 \x01(\tR\bpassword\"\xd2\x01\n" +
	"\tTLSConfig\x12\x1f\n" +
	"\vserver_name\x18\x01 \x01(\tR\n" +
	"serverName\x12 \n" +
	"\fca_cert_path\x18\x02 \x01(\tR\n" +
	"caCertPath\x12(\n" +
	"\x10client_cert_path\x18\x03 \x01(\tR\x0eclientCertPath\x12&\n" +
	"\x0fclient_key_path\x18\x04 \x01(\tR\rclientKeyPath\x120\n" +
	"\x14insecure_skip_verify\x18\x05 \x01(\bR\x12insecureSkipVerify*X\n" +
	"\rParameterType\x12\n" +
	"\n" +
	"\x06STRING\x10\x00\x12\n" +
	"\n" +
	"\x06NUMBER\x10\x01\x12\v\n" +
	"\aINTEGER\x10\x02\x12\v\n" +
	"\aBOOLEAN\x10\x03\x12\t\n" +
	"\x05ARRAY\x10\x04\x12\n" +
	"\n" +
	"\x06OBJECT\x10\x05*K\n" +
	"\x15LoadBalancingStrategy\x12\x0f\n" +
	"\vROUND_ROBIN\x10\x00\x12\x15\n" +
	"\x11LEAST_CONNECTIONS\x10\x01\x12\n" +
	"\n" +
	"\x06RANDOM\x10\x02B'Z%github.com/mcpxy/core/proto/config/v1b\beditionsp\xe8\a"

var file_proto_config_v1_config_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_proto_config_v1_config_proto_msgTypes = make([]protoimpl.MessageInfo, 48)
var file_proto_config_v1_config_proto_goTypes = []any{
	(ParameterType)(0),                  // 0: mcpx.config.v1.ParameterType
	(LoadBalancingStrategy)(0),          // 1: mcpx.config.v1.LoadBalancingStrategy
	(GlobalSettings_LogLevel)(0),        // 2: mcpx.config.v1.GlobalSettings.LogLevel
	(HttpCallDefinition_HttpMethod)(0),  // 3: mcpx.config.v1.HttpCallDefinition.HttpMethod
	(OutputTransformer_OutputFormat)(0), // 4: mcpx.config.v1.OutputTransformer.OutputFormat
	(APIKeyAuth_Location)(0),            // 5: mcpx.config.v1.APIKeyAuth.Location
	(*McpxServerConfig)(nil),            // 6: mcpx.config.v1.McpxServerConfig
	(*GlobalSettings)(nil),              // 7: mcpx.config.v1.GlobalSettings
	(*FrontendService)(nil),             // 8: mcpx.config.v1.FrontendService
	(*ServiceBinding)(nil),              // 9: mcpx.config.v1.ServiceBinding
	(*UpstreamServiceConfig)(nil),       // 10: mcpx.config.v1.UpstreamServiceConfig
	(*GrpcUpstreamService)(nil),         // 11: mcpx.config.v1.GrpcUpstreamService
	(*HttpUpstreamService)(nil),         // 12: mcpx.config.v1.HttpUpstreamService
	(*WebsocketUpstreamService)(nil),    // 13: mcpx.config.v1.WebsocketUpstreamService
	(*WebrtcUpstreamService)(nil),       // 14: mcpx.config.v1.WebrtcUpstreamService
	(*OpenapiUpstreamService)(nil),      // 15: mcpx.config.v1.OpenapiUpstreamService
	(*CommandLineUpstreamService)(nil),  // 16: mcpx.config.v1.CommandLineUpstreamService
	(*McpUpstreamService)(nil),          // 17: mcpx.config.v1.McpUpstreamService
	(*McpStdioConnection)(nil),          // 18: mcpx.config.v1.McpStdioConnection
	(*McpStreamableHttpConnection)(nil), // 19: mcpx.config.v1.McpStreamableHttpConnection
	(*ToolDefinition)(nil),              // 20: mcpx.config.v1.ToolDefinition
	(*ToolAnnotation)(nil),              // 21: mcpx.config.v1.ToolAnnotation
	(*ParameterSchema)(nil),             // 22: mcpx.config.v1.ParameterSchema
	(*HttpCallDefinition)(nil),          // 23: mcpx.config.v1.HttpCallDefinition
	(*WebsocketCallDefinition)(nil),     // 24: mcpx.config.v1.WebsocketCallDefinition
	(*WebrtcCallDefinition)(nil),        // 25: mcpx.config.v1.WebrtcCallDefinition
	(*StdioCallDefinition)(nil),         // 26: mcpx.config.v1.StdioCallDefinition
	(*InputTransformer)(nil),            // 27: mcpx.config.v1.InputTransformer
	(*OutputTransformer)(nil),           // 28: mcpx.config.v1.OutputTransformer
	(*GrpcCallDefinition)(nil),          // 29: mcpx.config.v1.GrpcCallDefinition
	(*OpenAPICallDefinition)(nil),       // 30: mcpx.config.v1.OpenAPICallDefinition
	(*MCPCallDefinition)(nil),           // 31: mcpx.config.v1.MCPCallDefinition
	(*HttpParameterMapping)(nil),        // 32: mcpx.config.v1.HttpParameterMapping
	(*WebsocketParameterMapping)(nil),   // 33: mcpx.config.v1.WebsocketParameterMapping
	(*WebrtcParameterMapping)(nil),      // 34: mcpx.config.v1.WebrtcParameterMapping
	(*StdioParameterMapping)(nil),       // 35: mcpx.config.v1.StdioParameterMapping
	(*ConnectionPoolConfig)(nil),        // 36: mcpx.config.v1.ConnectionPoolConfig
	(*HttpHealthCheck)(nil),             // 37: mcpx.config.v1.HttpHealthCheck
	(*GrpcHealthCheck)(nil),             // 38: mcpx.config.v1.GrpcHealthCheck
	(*StdioHealthCheck)(nil),            // 39: mcpx.config.v1.StdioHealthCheck
	(*RateLimitConfig)(nil),             // 40: mcpx.config.v1.RateLimitConfig
	(*CacheConfig)(nil),                 // 41: mcpx.config.v1.CacheConfig
	(*ResilienceConfig)(nil),            // 42: mcpx.config.v1.ResilienceConfig
	(*CircuitBreakerConfig)(nil),        // 43: mcpx.config.v1.CircuitBreakerConfig
	(*RetryConfig)(nil),                 // 44: mcpx.config.v1.RetryConfig
	(*AuthenticationConfig)(nil),        // 45: mcpx.config.v1.AuthenticationConfig
	(*APIKeyAuth)(nil),                  // 46: mcpx.config.v1.APIKeyAuth
	(*OAuth2Auth)(nil),                  // 47: mcpx.config.v1.OAuth2Auth
	(*UpstreamAuthentication)(nil),      // 48: mcpx.config.v1.UpstreamAuthentication
	(*UpstreamAPIKeyAuth)(nil),          // 49: mcpx.config.v1.UpstreamAPIKeyAuth
	(*UpstreamBearerTokenAuth)(nil),     // 50: mcpx.config.v1.UpstreamBearerTokenAuth
	(*UpstreamBasicAuth)(nil),           // 51: mcpx.config.v1.UpstreamBasicAuth
	(*TLSConfig)(nil),                   // 52: mcpx.config.v1.TLSConfig
	nil,                                 // 53: mcpx.config.v1.OutputTransformer.ExtractionRulesEntry
	(*structpb.Struct)(nil),             // 54: google.protobuf.Struct
	(*structpb.Value)(nil),              // 55: google.protobuf.Value
	(*durationpb.Duration)(nil),         // 56: google.protobuf.Duration
}
var file_proto_config_v1_config_proto_depIdxs = []int32{
	7,  // 0: mcpx.config.v1.McpxServerConfig.global_settings:type_name -> mcpx.config.v1.GlobalSettings
	10, // 1: mcpx.config.v1.McpxServerConfig.upstream_services:type_name -> mcpx.config.v1.UpstreamServiceConfig
	8,  // 2: mcpx.config.v1.McpxServerConfig.frontend_services:type_name -> mcpx.config.v1.FrontendService
	9,  // 3: mcpx.config.v1.McpxServerConfig.service_bindings:type_name -> mcpx.config.v1.ServiceBinding
	2,  // 4: mcpx.config.v1.GlobalSettings.log_level:type_name -> mcpx.config.v1.GlobalSettings.LogLevel
	36, // 5: mcpx.config.v1.UpstreamServiceConfig.connection_pool:type_name -> mcpx.config.v1.ConnectionPoolConfig
	48, // 6: mcpx.config.v1.UpstreamServiceConfig.upstream_authentication:type_name -> mcpx.config.v1.UpstreamAuthentication
	41, // 7: mcpx.config.v1.UpstreamServiceConfig.cache:type_name -> mcpx.config.v1.CacheConfig
	40, // 8: mcpx.config.v1.UpstreamServiceConfig.rate_limit:type_name -> mcpx.config.v1.RateLimitConfig
	1,  // 9: mcpx.config.v1.UpstreamServiceConfig.load_balancing_strategy:type_name -> mcpx.config.v1.LoadBalancingStrategy
	42, // 10: mcpx.config.v1.UpstreamServiceConfig.resilience:type_name -> mcpx.config.v1.ResilienceConfig
	17, // 11: mcpx.config.v1.UpstreamServiceConfig.mcp_service:type_name -> mcpx.config.v1.McpUpstreamService
	12, // 12: mcpx.config.v1.UpstreamServiceConfig.http_service:type_name -> mcpx.config.v1.HttpUpstreamService
	11, // 13: mcpx.config.v1.UpstreamServiceConfig.grpc_service:type_name -> mcpx.config.v1.GrpcUpstreamService
	15, // 14: mcpx.config.v1.UpstreamServiceConfig.openapi_service:type_name -> mcpx.config.v1.OpenapiUpstreamService
	16, // 15: mcpx.config.v1.UpstreamServiceConfig.command_line_service:type_name -> mcpx.config.v1.CommandLineUpstreamService
	13, // 16: mcpx.config.v1.UpstreamServiceConfig.websocket_service:type_name -> mcpx.config.v1.WebsocketUpstreamService
	14, // 17: mcpx.config.v1.UpstreamServiceConfig.webrtc_service:type_name -> mcpx.config.v1.WebrtcUpstreamService
	45, // 18: mcpx.config.v1.UpstreamServiceConfig.authentication:type_name -> mcpx.config.v1.AuthenticationConfig
	52, // 19: mcpx.config.v1.GrpcUpstreamService.tls_config:type_name -> mcpx.config.v1.TLSConfig
	29, // 20: mcpx.config.v1.GrpcUpstreamService.calls:type_name -> mcpx.config.v1.GrpcCallDefinition
	38, // 21: mcpx.config.v1.GrpcUpstreamService.health_check:type_name -> mcpx.config.v1.GrpcHealthCheck
	23, // 22: mcpx.config.v1.HttpUpstreamService.calls:type_name -> mcpx.config.v1.HttpCallDefinition
	37, // 23: mcpx.config.v1.HttpUpstreamService.health_check:type_name -> mcpx.config.v1.HttpHealthCheck
	52, // 24: mcpx.config.v1.HttpUpstreamService.tls_config:type_name -> mcpx.config.v1.TLSConfig
	24, // 25: mcpx.config.v1.WebsocketUpstreamService.calls:type_name -> mcpx.config.v1.WebsocketCallDefinition
	52, // 26: mcpx.config.v1.WebsocketUpstreamService.tls_config:type_name -> mcpx.config.v1.TLSConfig
	25, // 27: mcpx.config.v1.WebrtcUpstreamService.calls:type_name -> mcpx.config.v1.WebrtcCallDefinition
	52, // 28: mcpx.config.v1.WebrtcUpstreamService.tls_config:type_name -> mcpx.config.v1.TLSConfig
	37, // 29: mcpx.config.v1.OpenapiUpstreamService.health_check:type_name -> mcpx.config.v1.HttpHealthCheck
	52, // 30: mcpx.config.v1.OpenapiUpstreamService.tls_config:type_name -> mcpx.config.v1.TLSConfig
	30, // 31: mcpx.config.v1.OpenapiUpstreamService.calls:type_name -> mcpx.config.v1.OpenAPICallDefinition
	26, // 32: mcpx.config.v1.CommandLineUpstreamService.calls:type_name -> mcpx.config.v1.StdioCallDefinition
	39, // 33: mcpx.config.v1.CommandLineUpstreamService.health_check:type_name -> mcpx.config.v1.StdioHealthCheck
	41, // 34: mcpx.config.v1.CommandLineUpstreamService.cache:type_name -> mcpx.config.v1.CacheConfig
	19, // 35: mcpx.config.v1.McpUpstreamService.http_connection:type_name -> mcpx.config.v1.McpStreamableHttpConnection
	18, // 36: mcpx.config.v1.McpUpstreamService.stdio_connection:type_name -> mcpx.config.v1.McpStdioConnection
	20, // 37: mcpx.config.v1.McpUpstreamService.tools:type_name -> mcpx.config.v1.ToolDefinition
	31, // 38: mcpx.config.v1.McpUpstreamService.calls:type_name -> mcpx.config.v1.MCPCallDefinition
	52, // 39: mcpx.config.v1.McpStreamableHttpConnection.tls_config:type_name -> mcpx.config.v1.TLSConfig
	54, // 40: mcpx.config.v1.ToolDefinition.input_schema:type_name -> google.protobuf.Struct
	0,  // 41: mcpx.config.v1.ParameterSchema.type:type_name -> mcpx.config.v1.ParameterType
	55, // 42: mcpx.config.v1.ParameterSchema.default_value:type_name -> google.protobuf.Value
	21, // 43: mcpx.config.v1.HttpCallDefinition.schema:type_name -> mcpx.config.v1.ToolAnnotation
	3,  // 44: mcpx.config.v1.HttpCallDefinition.method:type_name -> mcpx.config.v1.HttpCallDefinition.HttpMethod
	32, // 45: mcpx.config.v1.HttpCallDefinition.parameters:type_name -> mcpx.config.v1.HttpParameterMapping
	27, // 46: mcpx.config.v1.HttpCallDefinition.input_transformer:type_name -> mcpx.config.v1.InputTransformer
	28, // 47: mcpx.config.v1.HttpCallDefinition.output_transformer:type_name -> mcpx.config.v1.OutputTransformer
	41, // 48: mcpx.config.v1.HttpCallDefinition.cache:type_name -> mcpx.config.v1.CacheConfig
	21, // 49: mcpx.config.v1.WebsocketCallDefinition.schema:type_name -> mcpx.config.v1.ToolAnnotation
	33, // 50: mcpx.config.v1.WebsocketCallDefinition.parameters:type_name -> mcpx.config.v1.WebsocketParameterMapping
	27, // 51: mcpx.config.v1.WebsocketCallDefinition.input_transformer:type_name -> mcpx.config.v1.InputTransformer
	28, // 52: mcpx.config.v1.WebsocketCallDefinition.output_transformer:type_name -> mcpx.config.v1.OutputTransformer
	21, // 53: mcpx.config.v1.WebrtcCallDefinition.schema:type_name -> mcpx.config.v1.ToolAnnotation
	34, // 54: mcpx.config.v1.WebrtcCallDefinition.parameters:type_name -> mcpx.config.v1.WebrtcParameterMapping
	27, // 55: mcpx.config.v1.WebrtcCallDefinition.input_transformer:type_name -> mcpx.config.v1.InputTransformer
	28, // 56: mcpx.config.v1.WebrtcCallDefinition.output_transformer:type_name -> mcpx.config.v1.OutputTransformer
	21, // 57: mcpx.config.v1.StdioCallDefinition.schema:type_name -> mcpx.config.v1.ToolAnnotation
	35, // 58: mcpx.config.v1.StdioCallDefinition.parameters:type_name -> mcpx.config.v1.StdioParameterMapping
	4,  // 59: mcpx.config.v1.OutputTransformer.format:type_name -> mcpx.config.v1.OutputTransformer.OutputFormat
	53, // 60: mcpx.config.v1.OutputTransformer.extraction_rules:type_name -> mcpx.config.v1.OutputTransformer.ExtractionRulesEntry
	27, // 61: mcpx.config.v1.OpenAPICallDefinition.input_transformer:type_name -> mcpx.config.v1.InputTransformer
	28, // 62: mcpx.config.v1.OpenAPICallDefinition.output_transformer:type_name -> mcpx.config.v1.OutputTransformer
	27, // 63: mcpx.config.v1.MCPCallDefinition.input_transformer:type_name -> mcpx.config.v1.InputTransformer
	28, // 64: mcpx.config.v1.MCPCallDefinition.output_transformer:type_name -> mcpx.config.v1.OutputTransformer
	22, // 65: mcpx.config.v1.HttpParameterMapping.schema:type_name -> mcpx.config.v1.ParameterSchema
	22, // 66: mcpx.config.v1.WebsocketParameterMapping.schema:type_name -> mcpx.config.v1.ParameterSchema
	22, // 67: mcpx.config.v1.WebrtcParameterMapping.schema:type_name -> mcpx.config.v1.ParameterSchema
	22, // 68: mcpx.config.v1.StdioParameterMapping.schema:type_name -> mcpx.config.v1.ParameterSchema
	56, // 69: mcpx.config.v1.ConnectionPoolConfig.idle_timeout:type_name -> google.protobuf.Duration
	56, // 70: mcpx.config.v1.HttpHealthCheck.interval:type_name -> google.protobuf.Duration
	56, // 71: mcpx.config.v1.HttpHealthCheck.timeout:type_name -> google.protobuf.Duration
	56, // 72: mcpx.config.v1.GrpcHealthCheck.interval:type_name -> google.protobuf.Duration
	56, // 73: mcpx.config.v1.GrpcHealthCheck.timeout:type_name -> google.protobuf.Duration
	56, // 74: mcpx.config.v1.StdioHealthCheck.interval:type_name -> google.protobuf.Duration
	56, // 75: mcpx.config.v1.StdioHealthCheck.timeout:type_name -> google.protobuf.Duration
	56, // 76: mcpx.config.v1.CacheConfig.ttl:type_name -> google.protobuf.Duration
	43, // 77: mcpx.config.v1.ResilienceConfig.circuit_breaker:type_name -> mcpx.config.v1.CircuitBreakerConfig
	44, // 78: mcpx.config.v1.ResilienceConfig.retry_policy:type_name -> mcpx.config.v1.RetryConfig
	56, // 79: mcpx.config.v1.CircuitBreakerConfig.open_duration:type_name -> google.protobuf.Duration
	56, // 80: mcpx.config.v1.RetryConfig.base_backoff:type_name -> google.protobuf.Duration
	56, // 81: mcpx.config.v1.RetryConfig.max_backoff:type_name -> google.protobuf.Duration
	46, // 82: mcpx.config.v1.AuthenticationConfig.api_key:type_name -> mcpx.config.v1.APIKeyAuth
	47, // 83: mcpx.config.v1.AuthenticationConfig.oauth2:type_name -> mcpx.config.v1.OAuth2Auth
	5,  // 84: mcpx.config.v1.APIKeyAuth.in:type_name -> mcpx.config.v1.APIKeyAuth.Location
	49, // 85: mcpx.config.v1.UpstreamAuthentication.api_key:type_name -> mcpx.config.v1.UpstreamAPIKeyAuth
	50, // 86: mcpx.config.v1.UpstreamAuthentication.bearer_token:type_name -> mcpx.config.v1.UpstreamBearerTokenAuth
	51, // 87: mcpx.config.v1.UpstreamAuthentication.basic_auth:type_name -> mcpx.config.v1.UpstreamBasicAuth
	88, // [88:88] is the sub-list for method output_type
	88, // [88:88] is the sub-list for method input_type
	88, // [88:88] is the sub-list for extension type_name
	88, // [88:88] is the sub-list for extension extendee
	0,  // [0:88] is the sub-list for field type_name
}

func init() { file_proto_config_v1_config_proto_init() }
func file_proto_config_v1_config_proto_init() {
	if File_proto_config_v1_config_proto != nil {
		return
	}
	file_proto_config_v1_config_proto_msgTypes[4].OneofWrappers = []any{
		(*upstreamServiceConfig_McpService)(nil),
		(*upstreamServiceConfig_HttpService)(nil),
		(*upstreamServiceConfig_GrpcService)(nil),
		(*upstreamServiceConfig_OpenapiService)(nil),
		(*upstreamServiceConfig_CommandLineService)(nil),
		(*upstreamServiceConfig_WebsocketService)(nil),
		(*upstreamServiceConfig_WebrtcService)(nil),
	}
	file_proto_config_v1_config_proto_msgTypes[11].OneofWrappers = []any{
		(*mcpUpstreamService_HttpConnection)(nil),
		(*mcpUpstreamService_StdioConnection)(nil),
	}
	file_proto_config_v1_config_proto_msgTypes[39].OneofWrappers = []any{
		(*authenticationConfig_ApiKey)(nil),
		(*authenticationConfig_Oauth2)(nil),
	}
	file_proto_config_v1_config_proto_msgTypes[42].OneofWrappers = []any{
		(*upstreamAuthentication_ApiKey)(nil),
		(*upstreamAuthentication_BearerToken)(nil),
		(*upstreamAuthentication_BasicAuth)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_config_v1_config_proto_rawDesc), len(file_proto_config_v1_config_proto_rawDesc)),
			NumEnums:      6,
			NumMessages:   48,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_config_v1_config_proto_goTypes,
		DependencyIndexes: file_proto_config_v1_config_proto_depIdxs,
		EnumInfos:         file_proto_config_v1_config_proto_enumTypes,
		MessageInfos:      file_proto_config_v1_config_proto_msgTypes,
	}.Build()
	File_proto_config_v1_config_proto = out.File
	file_proto_config_v1_config_proto_goTypes = nil
	file_proto_config_v1_config_proto_depIdxs = nil
}
