// Copyright 2025 Author(s) of MCP Any
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v6.33.0
// source: proto/bus/bus.proto

package bus

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MessageBus struct {
	state              protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_BusType isMessageBus_BusType   `protobuf_oneof:"bus_type"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *MessageBus) Reset() {
	*x = MessageBus{}
	mi := &file_proto_bus_bus_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessageBus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageBus) ProtoMessage() {}

func (x *MessageBus) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bus_bus_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *MessageBus) GetInMemory() *InMemoryBus {
	if x != nil {
		if x, ok := x.xxx_hidden_BusType.(*messageBus_InMemory); ok {
			return x.InMemory
		}
	}
	return nil
}

func (x *MessageBus) GetRedis() *RedisBus {
	if x != nil {
		if x, ok := x.xxx_hidden_BusType.(*messageBus_Redis); ok {
			return x.Redis
		}
	}
	return nil
}

func (x *MessageBus) SetInMemory(v *InMemoryBus) {
	if v == nil {
		x.xxx_hidden_BusType = nil
		return
	}
	x.xxx_hidden_BusType = &messageBus_InMemory{v}
}

func (x *MessageBus) SetRedis(v *RedisBus) {
	if v == nil {
		x.xxx_hidden_BusType = nil
		return
	}
	x.xxx_hidden_BusType = &messageBus_Redis{v}
}

func (x *MessageBus) HasBusType() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_BusType != nil
}

func (x *MessageBus) HasInMemory() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_BusType.(*messageBus_InMemory)
	return ok
}

func (x *MessageBus) HasRedis() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_BusType.(*messageBus_Redis)
	return ok
}

func (x *MessageBus) ClearBusType() {
	x.xxx_hidden_BusType = nil
}

func (x *MessageBus) ClearInMemory() {
	if _, ok := x.xxx_hidden_BusType.(*messageBus_InMemory); ok {
		x.xxx_hidden_BusType = nil
	}
}

func (x *MessageBus) ClearRedis() {
	if _, ok := x.xxx_hidden_BusType.(*messageBus_Redis); ok {
		x.xxx_hidden_BusType = nil
	}
}

const MessageBus_BusType_not_set_case case_MessageBus_BusType = 0
const MessageBus_InMemory_case case_MessageBus_BusType = 1
const MessageBus_Redis_case case_MessageBus_BusType = 2

func (x *MessageBus) WhichBusType() case_MessageBus_BusType {
	if x == nil {
		return MessageBus_BusType_not_set_case
	}
	switch x.xxx_hidden_BusType.(type) {
	case *messageBus_InMemory:
		return MessageBus_InMemory_case
	case *messageBus_Redis:
		return MessageBus_Redis_case
	default:
		return MessageBus_BusType_not_set_case
	}
}

type MessageBus_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Fields of oneof xxx_hidden_BusType:
	InMemory *InMemoryBus
	Redis    *RedisBus
	// -- end of xxx_hidden_BusType
}

func (b0 MessageBus_builder) Build() *MessageBus {
	m0 := &MessageBus{}
	b, x := &b0, m0
	_, _ = b, x
	if b.InMemory != nil {
		x.xxx_hidden_BusType = &messageBus_InMemory{b.InMemory}
	}
	if b.Redis != nil {
		x.xxx_hidden_BusType = &messageBus_Redis{b.Redis}
	}
	return m0
}

type case_MessageBus_BusType protoreflect.FieldNumber

func (x case_MessageBus_BusType) String() string {
	md := file_proto_bus_bus_proto_msgTypes[0].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isMessageBus_BusType interface {
	isMessageBus_BusType()
}

type messageBus_InMemory struct {
	InMemory *InMemoryBus `protobuf:"bytes,1,opt,name=in_memory,json=inMemory,oneof"`
}

type messageBus_Redis struct {
	Redis *RedisBus `protobuf:"bytes,2,opt,name=redis,oneof"`
}

func (*messageBus_InMemory) isMessageBus_BusType() {}

func (*messageBus_Redis) isMessageBus_BusType() {}

type InMemoryBus struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InMemoryBus) Reset() {
	*x = InMemoryBus{}
	mi := &file_proto_bus_bus_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InMemoryBus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InMemoryBus) ProtoMessage() {}

func (x *InMemoryBus) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bus_bus_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type InMemoryBus_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 InMemoryBus_builder) Build() *InMemoryBus {
	m0 := &InMemoryBus{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

type RedisBus struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Address     *string                `protobuf:"bytes,1,opt,name=address"`
	xxx_hidden_Db          int32                  `protobuf:"varint,2,opt,name=db"`
	xxx_hidden_Password    *string                `protobuf:"bytes,3,opt,name=password"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *RedisBus) Reset() {
	*x = RedisBus{}
	mi := &file_proto_bus_bus_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RedisBus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedisBus) ProtoMessage() {}

func (x *RedisBus) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bus_bus_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *RedisBus) GetAddress() string {
	if x != nil {
		if x.xxx_hidden_Address != nil {
			return *x.xxx_hidden_Address
		}
		return ""
	}
	return ""
}

func (x *RedisBus) GetDb() int32 {
	if x != nil {
		return x.xxx_hidden_Db
	}
	return 0
}

func (x *RedisBus) GetPassword() string {
	if x != nil {
		if x.xxx_hidden_Password != nil {
			return *x.xxx_hidden_Password
		}
		return ""
	}
	return ""
}

func (x *RedisBus) SetAddress(v string) {
	x.xxx_hidden_Address = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 3)
}

func (x *RedisBus) SetDb(v int32) {
	x.xxx_hidden_Db = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 3)
}

func (x *RedisBus) SetPassword(v string) {
	x.xxx_hidden_Password = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 3)
}

func (x *RedisBus) HasAddress() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *RedisBus) HasDb() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *RedisBus) HasPassword() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *RedisBus) ClearAddress() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Address = nil
}

func (x *RedisBus) ClearDb() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Db = 0
}

func (x *RedisBus) ClearPassword() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_Password = nil
}

type RedisBus_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Address  *string
	Db       *int32
	Password *string
}

func (b0 RedisBus_builder) Build() *RedisBus {
	m0 := &RedisBus{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Address != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 3)
		x.xxx_hidden_Address = b.Address
	}
	if b.Db != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 3)
		x.xxx_hidden_Db = *b.Db
	}
	if b.Password != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 3)
		x.xxx_hidden_Password = b.Password
	}
	return m0
}

var File_proto_bus_bus_proto protoreflect.FileDescriptor

const file_proto_bus_bus_proto_rawDesc = "" +
	"\n" +
	"\x13proto/bus/bus.proto\x12\x03bus\"p\n" +
	"\n" +
	"MessageBus\x12/\n" +
	"\tin_memory\x18\x01 \x01(\v2\x10.bus.InMemoryBusH\x00R\binMemory\x12%\n" +
	"\x05redis\x18\x02 \x01(\v2\r.bus.RedisBusH\x00R\x05redisB\n" +
	"\n" +
	"\bbus_type\"\r\n" +
	"\vInMemoryBus\"P\n" +
	"\bRedisBus\x12\x18\n" +
	"\aaddress\x18\x01 \x01(\tR\aaddress\x12\x0e\n" +
	"\x02db\x18\x02 \x01(\x05R\x02db\x12\x1a\n" +
	"\bpassword\x18\x03 \x01(\tR\bpasswordB\"Z github.com/mcpany/core/proto/busb\beditionsp\xe8\a"

var file_proto_bus_bus_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_proto_bus_bus_proto_goTypes = []any{
	(*MessageBus)(nil),  // 0: bus.MessageBus
	(*InMemoryBus)(nil), // 1: bus.InMemoryBus
	(*RedisBus)(nil),    // 2: bus.RedisBus
}
var file_proto_bus_bus_proto_depIdxs = []int32{
	1, // 0: bus.MessageBus.in_memory:type_name -> bus.InMemoryBus
	2, // 1: bus.MessageBus.redis:type_name -> bus.RedisBus
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_proto_bus_bus_proto_init() }
func file_proto_bus_bus_proto_init() {
	if File_proto_bus_bus_proto != nil {
		return
	}
	file_proto_bus_bus_proto_msgTypes[0].OneofWrappers = []any{
		(*messageBus_InMemory)(nil),
		(*messageBus_Redis)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_bus_bus_proto_rawDesc), len(file_proto_bus_bus_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_bus_bus_proto_goTypes,
		DependencyIndexes: file_proto_bus_bus_proto_depIdxs,
		MessageInfos:      file_proto_bus_bus_proto_msgTypes,
	}.Build()
	File_proto_bus_bus_proto = out.File
	file_proto_bus_bus_proto_goTypes = nil
	file_proto_bus_bus_proto_depIdxs = nil
}
