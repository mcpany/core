// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: proto/mcp_router/v1/mcp_router.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	McpRouter_ListTools_FullMethodName     = "/mcpx.mcp_router.v1.McpRouter/ListTools"
	McpRouter_ExecuteTool_FullMethodName   = "/mcpx.mcp_router.v1.McpRouter/ExecuteTool"
	McpRouter_ListPrompts_FullMethodName   = "/mcpx.mcp_router.v1.McpRouter/ListPrompts"
	McpRouter_ListResources_FullMethodName = "/mcpx.mcp_router.v1.McpRouter/ListResources"
)

// McpRouterClient is the client API for McpRouter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type McpRouterClient interface {
	ListTools(ctx context.Context, in *ListToolsRequest, opts ...grpc.CallOption) (*ListToolsResponse, error)
	ExecuteTool(ctx context.Context, in *ExecuteToolRequest, opts ...grpc.CallOption) (*ExecuteToolResponse, error)
	ListPrompts(ctx context.Context, in *ListPromptsRequest, opts ...grpc.CallOption) (*ListPromptsResponse, error)
	ListResources(ctx context.Context, in *ListResourcesRequest, opts ...grpc.CallOption) (*ListResourcesResponse, error)
}

type mcpRouterClient struct {
	cc grpc.ClientConnInterface
}

func NewMcpRouterClient(cc grpc.ClientConnInterface) McpRouterClient {
	return &mcpRouterClient{cc}
}

func (c *mcpRouterClient) ListTools(ctx context.Context, in *ListToolsRequest, opts ...grpc.CallOption) (*ListToolsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListToolsResponse)
	err := c.cc.Invoke(ctx, McpRouter_ListTools_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mcpRouterClient) ExecuteTool(ctx context.Context, in *ExecuteToolRequest, opts ...grpc.CallOption) (*ExecuteToolResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExecuteToolResponse)
	err := c.cc.Invoke(ctx, McpRouter_ExecuteTool_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mcpRouterClient) ListPrompts(ctx context.Context, in *ListPromptsRequest, opts ...grpc.CallOption) (*ListPromptsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPromptsResponse)
	err := c.cc.Invoke(ctx, McpRouter_ListPrompts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mcpRouterClient) ListResources(ctx context.Context, in *ListResourcesRequest, opts ...grpc.CallOption) (*ListResourcesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListResourcesResponse)
	err := c.cc.Invoke(ctx, McpRouter_ListResources_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// McpRouterServer is the server API for McpRouter service.
// All implementations must embed UnimplementedMcpRouterServer
// for forward compatibility.
type McpRouterServer interface {
	ListTools(context.Context, *ListToolsRequest) (*ListToolsResponse, error)
	ExecuteTool(context.Context, *ExecuteToolRequest) (*ExecuteToolResponse, error)
	ListPrompts(context.Context, *ListPromptsRequest) (*ListPromptsResponse, error)
	ListResources(context.Context, *ListResourcesRequest) (*ListResourcesResponse, error)
	mustEmbedUnimplementedMcpRouterServer()
}

// UnimplementedMcpRouterServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMcpRouterServer struct{}

func (UnimplementedMcpRouterServer) ListTools(context.Context, *ListToolsRequest) (*ListToolsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTools not implemented")
}
func (UnimplementedMcpRouterServer) ExecuteTool(context.Context, *ExecuteToolRequest) (*ExecuteToolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteTool not implemented")
}
func (UnimplementedMcpRouterServer) ListPrompts(context.Context, *ListPromptsRequest) (*ListPromptsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPrompts not implemented")
}
func (UnimplementedMcpRouterServer) ListResources(context.Context, *ListResourcesRequest) (*ListResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListResources not implemented")
}
func (UnimplementedMcpRouterServer) mustEmbedUnimplementedMcpRouterServer() {}
func (UnimplementedMcpRouterServer) testEmbeddedByValue()                   {}

// UnsafeMcpRouterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to McpRouterServer will
// result in compilation errors.
type UnsafeMcpRouterServer interface {
	mustEmbedUnimplementedMcpRouterServer()
}

func RegisterMcpRouterServer(s grpc.ServiceRegistrar, srv McpRouterServer) {
	// If the following call pancis, it indicates UnimplementedMcpRouterServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&McpRouter_ServiceDesc, srv)
}

func _McpRouter_ListTools_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListToolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(McpRouterServer).ListTools(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: McpRouter_ListTools_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(McpRouterServer).ListTools(ctx, req.(*ListToolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _McpRouter_ExecuteTool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteToolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(McpRouterServer).ExecuteTool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: McpRouter_ExecuteTool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(McpRouterServer).ExecuteTool(ctx, req.(*ExecuteToolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _McpRouter_ListPrompts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPromptsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(McpRouterServer).ListPrompts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: McpRouter_ListPrompts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(McpRouterServer).ListPrompts(ctx, req.(*ListPromptsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _McpRouter_ListResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(McpRouterServer).ListResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: McpRouter_ListResources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(McpRouterServer).ListResources(ctx, req.(*ListResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// McpRouter_ServiceDesc is the grpc.ServiceDesc for McpRouter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var McpRouter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mcpx.mcp_router.v1.McpRouter",
	HandlerType: (*McpRouterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListTools",
			Handler:    _McpRouter_ListTools_Handler,
		},
		{
			MethodName: "ExecuteTool",
			Handler:    _McpRouter_ExecuteTool_Handler,
		},
		{
			MethodName: "ListPrompts",
			Handler:    _McpRouter_ListPrompts_Handler,
		},
		{
			MethodName: "ListResources",
			Handler:    _McpRouter_ListResources_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/mcp_router/v1/mcp_router.proto",
}
