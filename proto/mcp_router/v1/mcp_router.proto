edition = "2023";

package mcpx.mcp_router.v1;

option go_package = "github.com/mcpxy/core/proto/mcp_router/v1";

import "google/protobuf/struct.proto"; // For generic JSON-like data

// Represents an MCP Tool exposed by the aggregator
message Tool {
     string name = 1;                   // Unique name, e.g., "serviceName/methodName" or a hash
     string display_name = 2;         // User-friendly name
     string description = 3;          // Description from annotation
     string service_id = 4;           // The ID of the registered user service that provides this tool
     string underlying_method_fqn = 5; // Fully qualified name of the gRPC method, e.g., /pkg.UserService/Method
     string request_type_fqn = 6;     // Fully qualified name of the underlying method's request message
     string response_type_fqn = 7;    // Fully qualified name of the underlying method's response message
    repeated Field request_fields = 8;
    repeated Field response_fields = 9;
     InputSchema input_schema = 10;
     ToolAnnotations annotations = 11;
     bool is_stream = 12;
}

message Field {
     string name = 1;
     string description = 2;
     string type = 3;
}

message InputSchema {
     string type = 1; // e.g., "object"
     google.protobuf.Struct properties = 2;
    repeated string required = 3;
}

message ToolAnnotations {
     string title = 1;
     bool read_only_hint = 2;
     bool destructive_hint = 3;
     bool idempotent_hint = 4;
     bool open_world_hint = 5;
}

message ListToolsRequest {
    // Future: filtering options
}

message ListToolsResponse {
    repeated Tool tools = 1;
}

message ExecuteToolRequest {
     string tool_id = 1;                     // ID of the tool to execute
     google.protobuf.Struct inputs = 2;     // Actual inputs for the tool, as a JSON-like object
                                          // The fields should match the fields of the underlying gRPC method's request message
}

message ExecuteToolResponse {
     google.protobuf.Struct outputs = 1;    // Actual outputs from the tool, as a JSON-like object
                                          // The fields will match the fields of the underlying gRPC method's response message
}

// A Prompt is a pre-defined template for interacting with a language model.
message Prompt {
     string id = 1;
     string name = 2;
     string description = 3;
     string template = 4;
     InputSchema input_schema = 5;
}

message ListPromptsRequest {}

message ListPromptsResponse {
    repeated Prompt prompts = 1;
}

// A Resource is a piece of data that can be used by tools or prompts.
message Resource {
     string id = 1;
     string name = 2;
     string description = 3;
     string type = 4; // e.g., "text", "image", "url"
     bytes content = 5;
}

message ListResourcesRequest {}

message ListResourcesResponse {
    repeated Resource resources = 1;
}

service McpRouter {
    rpc ListTools(ListToolsRequest) returns (ListToolsResponse);
    rpc ExecuteTool(ExecuteToolRequest) returns (ExecuteToolResponse);

    rpc ListPrompts(ListPromptsRequest) returns (ListPromptsResponse);
    rpc ListResources(ListResourcesRequest) returns (ListResourcesResponse);
}
