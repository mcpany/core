# Copyright 2025 Author(s) of MCP Any
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0

name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v5

    - name: Set up Go
      uses: actions/setup-go@v6
      with:
        go-version: '1.24'
        cache: true

    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: '3.13'
        cache: 'pip'

    - name: Install Python dependencies
      run: pip install -r requirements.txt

    - name: Cache pre-commit
      uses: actions/cache@v4
      with:
        path: ~/.cache/pre-commit
        key: ${{ runner.os }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pre-commit-

    - name: Set up Node.js
      uses: actions/setup-node@v6
      with:
        node-version: '24'
        cache: 'npm'
        cache-dependency-path: tests/integration/upstream/package-lock.json

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Get Date
      id: get-date
      run: |
        echo "week=$(/bin/date -u "+%V")" >> $GITHUB_OUTPUT
      shell: bash

    - name: Docker Cache
      uses: actions/cache@v4
      with:
        path: build/buildx-cache
        key: ${{ runner.os }}-buildx-${{ steps.get-date.outputs.week }}-${{ hashFiles('tests/integration/examples/Dockerfile.timeserver', 'tests/integration/examples/timeserver_patch/**') }}
        restore-keys: |
          ${{ runner.os }}-buildx-${{ steps.get-date.outputs.week }}-${{ hashFiles('tests/integration/examples/Dockerfile.timeserver', 'tests/integration/examples/timeserver_patch/**') }}-
          ${{ runner.os }}-buildx-${{ steps.get-date.outputs.week }}-

    - name: Cache Tools
      uses: actions/cache@v4
      with:
        path: build/env/bin
        key: ${{ runner.os }}-tools-${{ steps.get-date.outputs.week }}-${{ hashFiles('Makefile') }}
        restore-keys: |
          ${{ runner.os }}-tools-${{ steps.get-date.outputs.week }}-${{ hashFiles('Makefile') }}-
          ${{ runner.os }}-tools-${{ steps.get-date.outputs.week }}-

    - name: Prepare environment
      run: |
        make prepare CACHE_TO=type=local,dest=build/buildx-cache CACHE_FROM=type=local,src=build/buildx-cache

    - name: Check linting
      run: make lint

  test:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    env:
      IPINFO_API_TOKEN: ${{ secrets.IPINFO_API_TOKEN }}
    steps:
    - uses: actions/checkout@v5

    - name: Set up Go
      uses: actions/setup-go@v6
      with:
        go-version: '1.24'
        cache: true

    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: '3.13'
        cache: 'pip'

    - name: Install Python dependencies
      run: pip install -r requirements.txt

    - name: Set up Node.js
      uses: actions/setup-node@v6
      with:
        node-version: '24'
        cache: 'npm'
        cache-dependency-path: tests/integration/upstream/package-lock.json

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Get Date
      id: get-date
      run: |
        echo "week=$(/bin/date -u "+%V")" >> $GITHUB_OUTPUT
      shell: bash

    - name: Docker Cache
      uses: actions/cache@v4
      with:
        path: build/buildx-cache
        key: ${{ runner.os }}-buildx-${{ steps.get-date.outputs.week }}-${{ hashFiles('tests/integration/examples/Dockerfile.timeserver', 'tests/integration/examples/timeserver_patch/**') }}
        restore-keys: |
          ${{ runner.os }}-buildx-${{ steps.get-date.outputs.week }}-${{ hashFiles('tests/integration/examples/Dockerfile.timeserver', 'tests/integration/examples/timeserver_patch/**') }}-
          ${{ runner.os }}-buildx-${{ steps.get-date.outputs.week }}-

    - name: Cache Tools
      uses: actions/cache@v4
      with:
        path: build/env/bin
        key: ${{ runner.os }}-tools-${{ steps.get-date.outputs.week }}-${{ hashFiles('Makefile') }}
        restore-keys: |
          ${{ runner.os }}-tools-${{ steps.get-date.outputs.week }}-${{ hashFiles('Makefile') }}-
          ${{ runner.os }}-tools-${{ steps.get-date.outputs.week }}-

    - name: Prepare environment
      run: make prepare CACHE_TO=type=local,dest=build/buildx-cache CACHE_FROM=type=local,src=build/buildx-cache

    - name: test everything
      run: |
        make test-fast CACHE_TO=type=local,dest=build/buildx-cache CACHE_FROM=type=local,src=build/buildx-cache COVERAGE_FILE=coverage-test.out

    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-test
        path: coverage-test.out
  e2e:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    env:
      GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      IPINFO_API_TOKEN: ${{ secrets.IPINFO_API_TOKEN }}
    steps:
    - uses: actions/checkout@v5

    - name: Set up Go
      uses: actions/setup-go@v6
      with:
        go-version: '1.24'
        cache: true

    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: '3.13'
        cache: 'pip'

    - name: Install Python dependencies
      run: pip install -r requirements.txt

    - name: Set up Node.js
      uses: actions/setup-node@v6
      with:
        node-version: '24'
        cache: 'npm'
        cache-dependency-path: tests/integration/upstream/package-lock.json

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Get Date
      id: get-date
      run: |
        echo "week=$(/bin/date -u "+%V")" >> $GITHUB_OUTPUT
      shell: bash

    - name: Docker Cache
      uses: actions/cache@v4
      with:
        path: build/buildx-cache
        key: ${{ runner.os }}-buildx-${{ steps.get-date.outputs.week }}-${{ hashFiles('tests/integration/examples/Dockerfile.timeserver', 'tests/integration/examples/timeserver_patch/**') }}
        restore-keys: |
          ${{ runner.os }}-buildx-${{ steps.get-date.outputs.week }}-${{ hashFiles('tests/integration/examples/Dockerfile.timeserver', 'tests/integration/examples/timeserver_patch/**') }}-
          ${{ runner.os }}-buildx-${{ steps.get-date.outputs.week }}-

    - name: Cache Tools
      uses: actions/cache@v4
      with:
        path: build/env/bin
        key: ${{ runner.os }}-tools-${{ steps.get-date.outputs.week }}-${{ hashFiles('Makefile') }}
        restore-keys: |
          ${{ runner.os }}-tools-${{ steps.get-date.outputs.week }}-${{ hashFiles('Makefile') }}-
          ${{ runner.os }}-tools-${{ steps.get-date.outputs.week }}-

    - name: Prepare environment
      run: make prepare CACHE_TO=type=local,dest=build/buildx-cache CACHE_FROM=type=local,src=build/buildx-cache

    - name: test everything
      run: |
        make e2e CACHE_TO=type=local,dest=build/buildx-cache CACHE_FROM=type=local,src=build/buildx-cache COVERAGE_FILE=coverage-e2e.out
    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-e2e
        path: coverage-e2e.out
  e2e-public-api:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    env:
      GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      IPINFO_API_TOKEN: ${{ secrets.IPINFO_API_TOKEN }}
    steps:
    - uses: actions/checkout@v5

    - name: Set up Go
      uses: actions/setup-go@v6
      with:
        go-version: '1.24'
        cache: true

    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: '3.13'
        cache: 'pip'

    - name: Install Python dependencies
      run: pip install -r requirements.txt

    - name: Set up Node.js
      uses: actions/setup-node@v6
      with:
        node-version: '24'
        cache: 'npm'
        cache-dependency-path: tests/integration/upstream/package-lock.json

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Get Date
      id: get-date
      run: |
        echo "week=$(/bin/date -u "+%V")" >> $GITHUB_OUTPUT
      shell: bash

    - name: Docker Cache
      uses: actions/cache@v4
      with:
        path: build/buildx-cache
        key: ${{ runner.os }}-buildx-${{ steps.get-date.outputs.week }}-${{ hashFiles('tests/integration/examples/Dockerfile.timeserver', 'tests/integration/examples/timeserver_patch/**') }}
        restore-keys: |
          ${{ runner.os }}-buildx-${{ steps.get-date.outputs.week }}-${{ hashFiles('tests/integration/examples/Dockerfile.timeserver', 'tests/integration/examples/timeserver_patch/**') }}-
          ${{ runner.os }}-buildx-${{ steps.get-date.outputs.week }}-

    - name: Cache Tools
      uses: actions/cache@v4
      with:
        path: build/env/bin
        key: ${{ runner.os }}-tools-${{ steps.get-date.outputs.week }}-${{ hashFiles('Makefile') }}
        restore-keys: |
          ${{ runner.os }}-tools-${{ steps.get-date.outputs.week }}-${{ hashFiles('Makefile') }}-
          ${{ runner.os }}-tools-${{ steps.get-date.outputs.week }}-

    - name: Prepare environment
      run: make prepare CACHE_TO=type=local,dest=build/buildx-cache CACHE_FROM=type=local,src=build/buildx-cache

    - name: test public api
      run: |
        make test-public-api CACHE_TO=type=local,dest=build/buildx-cache CACHE_FROM=type=local,src=build/buildx-cache COVERAGE_FILE=coverage-public-api.out
    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-public-api
        path: coverage-public-api.out

  codecov-upload:
    runs-on: ubuntu-latest
    needs: [test, e2e, e2e-public-api]
    steps:
      - name: Download all coverage artifacts
        uses: actions/download-artifact@v4
        with:
          path: coverage
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          fail_ci_if_error: false
          files: coverage/coverage-test/coverage-test.out,coverage/coverage-e2e/coverage-e2e.out,coverage/coverage-public-api/coverage-public-api.out
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: true
