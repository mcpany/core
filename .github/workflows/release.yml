name: Release

on:
  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64, linux/386, darwin/amd64, darwin/arm64, windows/amd64]
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          cache: true

      - name: Prepare environment
        id: prep
        run: make prepare

      - name: Build binaries
        run: |
          make release PLATFORMS=${{ matrix.platform }}

      - name: Package binaries
        id: package
        run: |
          RELEASE_DIR=./build/release
          PLATFORM=${{ matrix.platform }}
          GOOS=${PLATFORM%/*}
          GOARCH=${PLATFORM#*/}
          echo "goos=${GOOS}" >> $GITHUB_OUTPUT
          echo "goarch=${GOARCH}" >> $GITHUB_OUTPUT
          BINARY_NAME=server-$GOOS-$GOARCH
          if [ "$GOOS" = "windows" ]; then
            BINARY_NAME=$BINARY_NAME.exe
          fi
          zip -j $RELEASE_DIR/$BINARY_NAME.zip $RELEASE_DIR/$BINARY_NAME

      - name: Upload binaries
        uses: actions/upload-artifact@v4
        with:
          name: release-binaries-${{ steps.package.outputs.goos }}-${{ steps.package.outputs.goarch }}
          path: ./build/release/*.zip

  publish:
    runs-on: ubuntu-latest
    needs: release
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          cache: true

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Download release binaries
        uses: actions/download-artifact@v4
        with:
          path: ./build/release
          pattern: release-binaries-*
          merge-multiple: true

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.run_number }}
          release_name: Release ${{ github.run_number }}
          draft: false
          prerelease: false

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/release/*.zip
          asset_content_type: application/zip

      - name: Get Date
        id: date
        run: echo "week=$(date +'%Y-%U')" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        env:
          CACHE_TO: type=gha,mode=max,scope=release-cache-${{ steps.date.outputs.week }}
          CACHE_FROM: type=gha,scope=release-cache-${{ steps.date.outputs.week }}
        run: |
          make build-docker PUSH=true PLATFORMS=linux/amd64,linux/arm64,linux/arm/v7,linux/arm/v6 SERVER_IMAGE_TAG=ghcr.io/${{ github.repository }}:${{ github.run_number }}
