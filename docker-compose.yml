# Copyright 2025 Author(s) of MCP Any
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0

# This Docker Compose file provides an example setup for running the MCP Any server
# along with a sample upstream service (http-echo-server) to demonstrate how they
# can be connected within a Docker environment.

services:
  # The MCP Any server itself.
  mcpany-server:
    build:
      context: .
      dockerfile: docker/Dockerfile.server
    ports:
      # Exposes the JSON-RPC port (for tool calls) to the host.
      - "50050:50050"
      # Exposes the gRPC registration port to the host.
      - "50051:50051"
    volumes:
      # Mounts the Docker-specific config file into the container.
      # This allows mcpany-server to discover and connect to the http-echo-server.
      - ./docker/config.docker.yaml:/etc/mcpany/config.yaml
    entrypoint:
      # Tells the server to load the configuration from the mounted path.
      - "/app/server"
      - "--config-paths"
      - "/etc/mcpany/config.yaml"
    healthcheck:
      test: ["CMD", "curl", "--fail", "--silent", "http://localhost:50050/healthz"]
      interval: 5s
      timeout: 2s
      retries: 5
    depends_on:
      # Ensures that the http-echo-server is started before mcpany-server.
      http-echo-server:
        condition: service_healthy
    networks:
      - mcpany-net

  # A sample upstream HTTP service that mcpany-server will connect to.
  http-echo-server:
    build:
      context: .
      dockerfile: docker/Dockerfile.http-echo-server
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 5s
      timeout: 2s
      retries: 5
    networks:
      - mcpany-net

networks:
  mcpany-net:
    driver: bridge
